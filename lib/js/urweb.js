// Detect browser quirks that we should be aware of.

function needsDynPrefix() {
    var span = document.createElement("span");
    span.innerHTML = "<script>alert('test');</script>";
    var scripts = span.getElementsByTagName("script");
    return scripts.length == 0;
}

var dynPrefix = needsDynPrefix() ? "<span style=\"display:none\">A</span>" : "";

// Function versions of operators

function not(x) { return !x; }
function neg(x) { return -x; }

function eq(x, y) { return x == y; }
function plus(x, y) { return x + y; }
function minus(x, y) { return x - y; }
function times(x, y) { return x * y; }
function div(x, y) { return x / y; }
function divInt(x, y) { if (y == 0) er("Division by zero"); var n = x / y; return n < 0 ? Math.ceil(n) : Math.floor(n); }
function mod(x, y) { return x % y; }
function modInt(x, y) { if (y == 0) er("Division by zero"); var n = x % y; return n < 0 ? Math.ceil(n) : Math.floor(n); }
function lt(x, y) { return x < y; }
function le(x, y) { return x <= y; }

// Characters

function ord(c) { return c.codePointAt(0); }

var isLowerBitm = new Uint32Array(3915);
var a = isLowerBitm;
a[3] = 134217726; a[5] = 69207040; a[6] = 2147483648; a[7] = 4286578687; 
a[8] = 2863311530; a[9] = 1437248170; a[10] = 2863311701; a[11] = 3567954602; 
a[12] = 1310994729; a[13] = 3864079658; a[14] = 3042267712; a[15] = 2854857386; 
a[16] = 2863311530; a[17] = 2482678442; a[18] = 4294945413; a[19] = 4294967295; 
a[20] = 4293918719; a[21] = 33554431; a[22] = 3; a[23] = 31; 
a[26] = 32; a[27] = 1015676928; a[28] = 65536; a[29] = 4294963200; 
a[30] = 2867036159; a[31] = 422554282; a[33] = 4294901760; a[34] = 4294967295; 
a[35] = 2863311530; a[36] = 2863310850; a[37] = 2863311530; a[38] = 2863322452; 
a[39] = 2863311530; a[40] = 2863311530; a[41] = 43690; a[43] = 4294967294; 
a[44] = 255; a[159] = 1056964608; a[228] = 511; a[232] = 4294967295; 
a[233] = 4294967295; a[234] = 4294967295; a[235] = 4294967295; a[236] = 4294967295; 
a[237] = 4294967295; a[240] = 2863311530; a[241] = 2863311530; a[242] = 2863311530; 
a[243] = 2863311530; a[244] = 3219827370; a[245] = 2863311530; a[246] = 2863311530; 
a[247] = 2863311530; a[248] = 4129023; a[249] = 16711935; a[250] = 16711743; 
a[251] = 1073676543; a[252] = 16711935; a[253] = 1088356607; a[254] = 13566172; 
a[255] = 14418175; a[259] = 2147614720; a[260] = 536805376; a[264] = 574464; 
a[265] = 839942144; a[266] = 17344; a[267] = 4294901760; a[268] = 16; 
a[294] = 4294901760; a[295] = 1023; a[353] = 4294901760; a[354] = 2147483647; 
a[355] = 1071256930; a[356] = 2863311530; a[357] = 2863311530; a[358] = 2863311530; 
a[359] = 544794; a[360] = 4294967295; a[361] = 8383; a[1330] = 2863311530; 
a[1331] = 10922; a[1332] = 984263338; a[1337] = 2863377064; a[1338] = 2863311530; 
a[1339] = 2516560554; a[1340] = 2864337066; a[1341] = 10486442; a[1343] = 117440512; 
a[1369] = 4294901760; a[1370] = 4160749567; a[1371] = 4294901823; a[1372] = 4294967295; 
a[1373] = 4294967295; a[2008] = 16253055; a[2042] = 134217726; a[2081] = 4294967040; 
a[2082] = 65535; a[2086] = 4278190080; a[2087] = 268435455; a[2150] = 4294967295; 
a[2151] = 524287; a[2246] = 4294967295; a[3744] = 4227858432; a[3745] = 1048575; 
a[3746] = 4292853760; a[3747] = 255; a[3748] = 268435452; a[3749] = 3955228672; 
a[3750] = 65519; a[3751] = 4294966272; a[3752] = 3221225487; a[3753] = 16777215; 
a[3754] = 4294705152; a[3755] = 4095; a[3756] = 4294967232; a[3757] = 4227858432; 
a[3758] = 1048575; a[3759] = 4294950912; a[3760] = 255; a[3761] = 268435452; 
a[3762] = 4290772992; a[3763] = 65535; a[3764] = 4294966272; a[3765] = 63; 
a[3766] = 4160749564; a[3767] = 4026531843; a[3768] = 266338303; a[3769] = 4290772992; 
a[3770] = 4161535; a[3771] = 4294901760; a[3772] = 65023; a[3773] = 4294966272; 
a[3774] = 3063; a[3913] = 4294967292; a[3914] = 15; 

function isLower(c) {
	var cp = ord(c);
	var idx = Math.floor(cp / 32);
	var byt = isLowerBitm[idx];
	if (byt) {
		var mask = Math.pow(2, cp - idx * 32);
		return (byt & mask) != 0;
	}
	return false;
}

var isUpperBitm = new Uint32Array(3981);
a = isUpperBitm;
a[2] = 134217726; a[6] = 2139095039; a[8] = 1431655765; a[9] = 2857719125; 
a[10] = 1431655594; a[11] = 727012693; a[12] = 2983972566; a[13] = 296669909; 
a[14] = 1252697232; a[15] = 1439847765; a[16] = 1431655765; a[17] = 1812288853; 
a[18] = 21882; a[27] = 2152005632; a[28] = 4294891328; a[29] = 4091; 
a[30] = 1427931136; a[31] = 3868218709; a[32] = 4294967295; a[33] = 65535; 
a[35] = 1431655765; a[36] = 1431655425; a[37] = 1431655765; a[38] = 1431644843; 
a[39] = 1431655765; a[40] = 1431655765; a[41] = 4294858069; a[42] = 8388607; 
a[133] = 4294967295; a[134] = 8383; a[157] = 4294967295; a[158] = 4294967295; 
a[159] = 4194303; a[240] = 1431655765; a[241] = 1431655765; a[242] = 1431655765; 
a[243] = 1431655765; a[244] = 1075139925; a[245] = 1431655765; a[246] = 1431655765; 
a[247] = 1431655765; a[248] = 1057029888; a[249] = 4278255360; a[250] = 2852142848; 
a[251] = 65280; a[253] = 251658240; a[254] = 251662080; a[255] = 251666176; 
a[264] = 1042757764; a[265] = 3222224208; a[266] = 32; a[267] = 65535; 
a[268] = 8; a[293] = 4290772992; a[294] = 65535; a[352] = 4294967295; 
a[353] = 32767; a[355] = 3223710365; a[356] = 1431655765; a[357] = 1431655765; 
a[358] = 1431655765; a[359] = 272389; a[1330] = 1431655765; a[1331] = 5461; 
a[1332] = 89478485; a[1337] = 1431590228; a[1338] = 1431655765; a[1339] = 1778406741; 
a[1340] = 1430595669; a[1341] = 6258005; a[2041] = 134217726; a[2080] = 4294967295; 
a[2081] = 255; a[2085] = 4294901760; a[2086] = 1048575; a[2148] = 4294967295; 
a[2149] = 524287; a[2245] = 4294967295; a[3744] = 67108863; a[3745] = 4293918720; 
a[3746] = 16383; a[3747] = 4294967040; a[3748] = 3489660931; a[3749] = 4185700; 
a[3750] = 4294901760; a[3751] = 1023; a[3752] = 534767536; a[3753] = 2063597568; 
a[3754] = 130143; a[3755] = 4294963200; a[3756] = 63; a[3757] = 67108863; 
a[3758] = 4293918720; a[3759] = 16383; a[3760] = 4294967040; a[3761] = 4026531843; 
a[3762] = 4194303; a[3763] = 4294901760; a[3764] = 1023; a[3765] = 4294967040; 
a[3766] = 1; a[3767] = 134217724; a[3768] = 4026531840; a[3769] = 2097151; 
a[3770] = 4290772992; a[3771] = 32767; a[3772] = 4294901760; a[3773] = 511; 
a[3774] = 1024; a[3912] = 4294967295; a[3913] = 3; a[3977] = 4294901760; 
a[3978] = 4294902783; a[3979] = 4294902783; a[3980] = 1023; 

function isUpper(c) {
	var cp = ord(c);
	var idx = Math.floor(cp / 32);
	var byt = isUpperBitm[idx];
	if (byt) {
		var mask = Math.pow(2, cp - idx * 32);
		return (byt & mask) != 0;
	}
	return false;
}

var isDigitBitm = new Uint32Array(3915);
a = isDigitBitm;
a[1] = 67043328; a[51] = 1023; a[55] = 67043328; a[62] = 1023; 
a[75] = 65472; a[79] = 65472; a[83] = 65472; a[87] = 65472; 
a[91] = 65472; a[95] = 65472; a[99] = 65472; a[103] = 65472; 
a[107] = 65472; a[111] = 65472; a[114] = 67043328; a[118] = 67043328; 
a[121] = 1023; a[130] = 1023; a[132] = 67043328; a[191] = 1023; 
a[192] = 67043328; a[202] = 65472; a[206] = 67043328; a[212] = 67044351; 
a[218] = 67043328; a[221] = 67043328; a[226] = 67044351; a[1329] = 1023; 
a[1350] = 67043328; a[1352] = 1023; a[1358] = 67043328; a[1359] = 67043328; 
a[1362] = 67043328; a[1375] = 67043328; a[2040] = 67043328; a[2085] = 1023; 
a[2179] = 65472; a[2183] = 67043328; a[2185] = 4290772992; a[2190] = 67043328; 
a[2199] = 67043328; a[2210] = 67043328; a[2214] = 67043328; a[2226] = 67043328; 
a[2230] = 1023; a[2233] = 67043328; a[2247] = 1023; a[2274] = 67043328; 
a[2282] = 67043328; a[2899] = 1023; a[2906] = 67043328; a[3774] = 4294950912; 
a[3775] = 4294967295; a[3914] = 67043328; 

function isDigit(c) {
	var cp = ord(c);
	var idx = Math.floor(cp / 32);
	var byt = isDigitBitm[idx];
	if (byt) {
		var mask = Math.pow(2, cp - idx * 32);
		return (byt & mask) != 0;
	}
	return false;
}

var isAlphaBitm = new Uint32Array(6097);
a = isAlphaBitm;
a[2] = 134217726; a[3] = 134217726; a[5] = 69207040; a[6] = 4286578687; 
a[7] = 4286578687; a[8] = 4294967295; a[9] = 4294967295; a[10] = 4294967295; 
a[11] = 4294967295; a[12] = 4294967295; a[13] = 4294967295; a[14] = 4294967295; 
a[15] = 4294967295; a[16] = 4294967295; a[17] = 4294967295; a[18] = 4294967295; 
a[19] = 4294967295; a[20] = 4294967295; a[21] = 4294967295; a[22] = 262083; 
a[23] = 20511; a[26] = 32; a[27] = 3168731136; a[28] = 4294956864; 
a[29] = 4294967291; a[30] = 4294967295; a[31] = 4290772991; a[32] = 4294967295; 
a[33] = 4294967295; a[34] = 4294967295; a[35] = 4294967295; a[36] = 4294966275; 
a[37] = 4294967295; a[38] = 4294967295; a[39] = 4294967295; a[40] = 4294967295; 
a[41] = 4294901759; a[42] = 41943039; a[43] = 4294967294; a[44] = 255; 
a[45] = 3221159936; a[46] = 4294901942; a[47] = 460799; a[48] = 134152192; 
a[49] = 4294967295; a[50] = 4278190079; a[51] = 4294950912; a[52] = 4294967295; 
a[53] = 4294967295; a[54] = 535822335; a[55] = 2617303550; a[56] = 4294901760; 
a[57] = 4294967295; a[58] = 4294959104; a[59] = 4294967295; a[60] = 4294967295; 
a[61] = 262143; a[62] = 4294966272; a[63] = 70256639; a[64] = 4244635647; 
a[65] = 8191; a[66] = 33554431; a[67] = 2047; a[69] = 1071644671; 
a[70] = 4293918720; a[71] = 4294902776; a[72] = 4294967295; a[73] = 4026531839; 
a[74] = 4292993023; a[75] = 4294836239; a[76] = 4294549487; a[77] = 3821403647; 
a[78] = 2961201567; a[79] = 268632079; a[80] = 4294543342; a[81] = 3278765567; 
a[82] = 1577195911; a[83] = 4128768; a[84] = 4294688750; a[85] = 3824025087; 
a[86] = 72639; a[87] = 503316495; a[88] = 4294549486; a[89] = 3824025087; 
a[90] = 2965379487; a[91] = 131087; a[92] = 3594373100; a[93] = 3288319768; 
a[94] = 8461767; a[96] = 4294828015; a[97] = 3825204735; a[98] = 123739615; 
a[99] = 15; a[100] = 4294828015; a[101] = 3824156159; a[102] = 1080040927; 
a[103] = 393231; a[104] = 4294828015; a[105] = 3892314111; a[106] = 2163236319; 
a[107] = 4227858447; a[108] = 4236247020; a[109] = 805044223; a[110] = 4284448895; 
a[111] = 786432; a[112] = 4294967294; a[113] = 134217727; a[114] = 8319; 
a[116] = 4277151126; a[117] = 1006628014; a[118] = 4026540127; a[120] = 1; 
a[122] = 4294967039; a[123] = 4294844415; a[124] = 4278189827; a[125] = 536870911; 
a[128] = 4294967295; a[129] = 4185915391; a[130] = 4294901760; a[131] = 4294951399; 
a[132] = 805322879; a[133] = 4294967295; a[134] = 4294910143; a[135] = 4160749567; 
a[136] = 4294967295; a[137] = 4294967295; a[138] = 4294967295; a[139] = 4294967295; 
a[140] = 4294967295; a[141] = 4294967295; a[142] = 4294967295; a[143] = 4294967295; 
a[144] = 4294967295; a[145] = 4294967295; a[146] = 1031749119; a[147] = 4294967295; 
a[148] = 4294917631; a[149] = 2134769663; a[150] = 4286578493; a[151] = 4294967295; 
a[152] = 4282253311; a[153] = 4294967295; a[154] = 2281701375; a[156] = 65535; 
a[157] = 4294967295; a[158] = 4294967295; a[159] = 1061158911; a[160] = 4294967294; 
a[161] = 4294967295; a[162] = 4294967295; a[163] = 4294967295; a[164] = 4294967295; 
a[165] = 4294967295; a[166] = 4294967295; a[167] = 4294967295; a[168] = 4294967295; 
a[169] = 4294967295; a[170] = 4294967295; a[171] = 4294967295; a[172] = 4294967295; 
a[173] = 4294967295; a[174] = 4294967295; a[175] = 4294967295; a[176] = 4294967295; 
a[177] = 4294967295; a[178] = 4294967295; a[179] = 4294942719; a[180] = 134217726; 
a[181] = 4294967295; a[182] = 4294967295; a[183] = 33540095; a[184] = 1040383; 
a[185] = 1048575; a[186] = 1048575; a[187] = 909311; a[188] = 4294967295; 
a[189] = 4291821567; a[190] = 276824575; a[193] = 4294967295; a[194] = 4294967295; 
a[195] = 16777215; a[196] = 4294967295; a[197] = 4294903807; a[198] = 4294967295; 
a[199] = 4194303; a[200] = 2147483647; a[201] = 33492991; a[202] = 4294901760; 
a[203] = 2047999; a[204] = 4294967295; a[205] = 4294905855; a[206] = 1023; 
a[208] = 268435455; a[209] = 4294967295; a[210] = 2147483647; a[211] = 2097150; 
a[213] = 128; a[216] = 4294967295; a[217] = 4293918719; a[218] = 4079; 
a[220] = 4294967295; a[221] = 4227920895; a[222] = 4294967295; a[223] = 262079; 
a[224] = 4294967295; a[225] = 4194303; a[226] = 4227915776; a[227] = 1073741823; 
a[228] = 511; a[231] = 7331328; a[232] = 4294967295; a[233] = 4294967295; 
a[234] = 4294967295; a[235] = 4294967295; a[236] = 4294967295; a[237] = 4294967295; 
a[239] = 2097024; a[240] = 4294967295; a[241] = 4294967295; a[242] = 4294967295; 
a[243] = 4294967295; a[244] = 4294967295; a[245] = 4294967295; a[246] = 4294967295; 
a[247] = 4294967295; a[248] = 1061158911; a[249] = 4294967295; a[250] = 2868854591; 
a[251] = 1073741823; a[252] = 4294967295; a[253] = 1608515583; a[254] = 265232348; 
a[255] = 534519807; a[259] = 2147614720; a[260] = 536805376; a[264] = 1043332228; 
a[265] = 4093623632; a[266] = 17376; a[267] = 4294967295; a[268] = 511; 
a[293] = 4290772992; a[294] = 4294967295; a[295] = 1023; a[352] = 4294967295; 
a[353] = 4294934527; a[354] = 2147483647; a[355] = 4294967295; a[356] = 4294967295; 
a[357] = 4294967295; a[358] = 4294967295; a[359] = 817183; a[360] = 4294967295; 
a[361] = 4294910143; a[362] = 4294967295; a[363] = 33023; a[364] = 8388607; 
a[365] = 2139062143; a[366] = 2139062143; a[367] = 4294967295; a[369] = 32768; 
a[384] = 224; a[385] = 524157950; a[386] = 4294967294; a[387] = 4294967295; 
a[388] = 3766484991; a[389] = 4294967294; a[390] = 4294967295; a[391] = 4160749567; 
a[392] = 4294967264; a[393] = 4294868991; a[394] = 4294967295; a[395] = 4294967295; 
a[396] = 32767; a[397] = 134217727; a[399] = 4294901760; a[416] = 4294967295; 
a[417] = 4294967295; a[418] = 4294967295; a[419] = 4294967295; a[420] = 4294967295; 
a[421] = 4294967295; a[422] = 4294967295; a[423] = 4294967295; a[424] = 4294967295; 
a[425] = 4294967295; a[426] = 4294967295; a[427] = 4294967295; a[428] = 4294967295; 
a[429] = 4294967295; a[430] = 4294967295; a[431] = 4294967295; a[432] = 4294967295; 
a[433] = 4294967295; a[434] = 4294967295; a[435] = 4294967295; a[436] = 4294967295; 
a[437] = 4294967295; a[438] = 4294967295; a[439] = 4294967295; a[440] = 4294967295; 
a[441] = 4294967295; a[442] = 4294967295; a[443] = 4294967295; a[444] = 4294967295; 
a[445] = 4294967295; a[446] = 4294967295; a[447] = 4294967295; a[448] = 4294967295; 
a[449] = 4294967295; a[450] = 4294967295; a[451] = 4294967295; a[452] = 4294967295; 
a[453] = 4294967295; a[454] = 4294967295; a[455] = 4294967295; a[456] = 4294967295; 
a[457] = 4294967295; a[458] = 4294967295; a[459] = 4294967295; a[460] = 4294967295; 
a[461] = 4294967295; a[462] = 4294967295; a[463] = 4294967295; a[464] = 4294967295; 
a[465] = 4294967295; a[466] = 4294967295; a[467] = 4294967295; a[468] = 4294967295; 
a[469] = 4294967295; a[470] = 4294967295; a[471] = 4294967295; a[472] = 4294967295; 
a[473] = 4294967295; a[474] = 4294967295; a[475] = 4294967295; a[476] = 4294967295; 
a[477] = 4294967295; a[478] = 4294967295; a[479] = 4294967295; a[480] = 4294967295; 
a[481] = 4294967295; a[482] = 4294967295; a[483] = 4294967295; a[484] = 4294967295; 
a[485] = 4294967295; a[486] = 4294967295; a[487] = 4294967295; a[488] = 4294967295; 
a[489] = 4294967295; a[490] = 4294967295; a[491] = 4294967295; a[492] = 4294967295; 
a[493] = 4294967295; a[494] = 4294967295; a[495] = 4294967295; a[496] = 4294967295; 
a[497] = 4294967295; a[498] = 4294967295; a[499] = 4294967295; a[500] = 4294967295; 
a[501] = 4294967295; a[502] = 4294967295; a[503] = 4294967295; a[504] = 4294967295; 
a[505] = 4294967295; a[506] = 4294967295; a[507] = 4294967295; a[508] = 4294967295; 
a[509] = 4294967295; a[510] = 4294967295; a[511] = 4294967295; a[512] = 4294967295; 
a[513] = 4294967295; a[514] = 4294967295; a[515] = 4294967295; a[516] = 4294967295; 
a[517] = 4294967295; a[518] = 4294967295; a[519] = 4294967295; a[520] = 4294967295; 
a[521] = 4294967295; a[522] = 4294967295; a[523] = 4294967295; a[524] = 4294967295; 
a[525] = 4294967295; a[526] = 4294967295; a[527] = 4294967295; a[528] = 4294967295; 
a[529] = 4294967295; a[530] = 4294967295; a[531] = 4294967295; a[532] = 4294967295; 
a[533] = 4294967295; a[534] = 4294967295; a[535] = 4294967295; a[536] = 4294967295; 
a[537] = 4294967295; a[538] = 4294967295; a[539] = 4294967295; a[540] = 4294967295; 
a[541] = 4294967295; a[542] = 4294967295; a[543] = 4294967295; a[544] = 4294967295; 
a[545] = 4294967295; a[546] = 4294967295; a[547] = 4294967295; a[548] = 4294967295; 
a[549] = 4294967295; a[550] = 4294967295; a[551] = 4294967295; a[552] = 4294967295; 
a[553] = 4294967295; a[554] = 4294967295; a[555] = 4294967295; a[556] = 4294967295; 
a[557] = 4294967295; a[558] = 4294967295; a[559] = 4294967295; a[560] = 4294967295; 
a[561] = 4294967295; a[562] = 4294967295; a[563] = 4294967295; a[564] = 4294967295; 
a[565] = 4294967295; a[566] = 4294967295; a[567] = 4294967295; a[568] = 4294967295; 
a[569] = 4294967295; a[570] = 4294967295; a[571] = 4294967295; a[572] = 4294967295; 
a[573] = 4294967295; a[574] = 4294967295; a[575] = 4294967295; a[576] = 4294967295; 
a[577] = 4294967295; a[578] = 4294967295; a[579] = 4294967295; a[580] = 4294967295; 
a[581] = 4294967295; a[582] = 4294967295; a[583] = 4294967295; a[584] = 4294967295; 
a[585] = 4294967295; a[586] = 4294967295; a[587] = 4294967295; a[588] = 4294967295; 
a[589] = 4294967295; a[590] = 4294967295; a[591] = 4294967295; a[592] = 4294967295; 
a[593] = 4294967295; a[594] = 4294967295; a[595] = 4294967295; a[596] = 4294967295; 
a[597] = 4294967295; a[598] = 4294967295; a[599] = 4294967295; a[600] = 4294967295; 
a[601] = 4294967295; a[602] = 4294967295; a[603] = 4294967295; a[604] = 4294967295; 
a[605] = 4294967295; a[606] = 4294967295; a[607] = 4294967295; a[608] = 4294967295; 
a[609] = 4294967295; a[610] = 4294967295; a[611] = 4294967295; a[612] = 4294967295; 
a[613] = 4294967295; a[614] = 4294967295; a[615] = 4294967295; a[616] = 4294967295; 
a[617] = 4294967295; a[618] = 4294967295; a[619] = 4294967295; a[620] = 4294967295; 
a[621] = 4194303; a[624] = 4294967295; a[625] = 4294967295; a[626] = 4294967295; 
a[627] = 4294967295; a[628] = 4294967295; a[629] = 4294967295; a[630] = 4294967295; 
a[631] = 4294967295; a[632] = 4294967295; a[633] = 4294967295; a[634] = 4294967295; 
a[635] = 4294967295; a[636] = 4294967295; a[637] = 4294967295; a[638] = 4294967295; 
a[639] = 4294967295; a[640] = 4294967295; a[641] = 4294967295; a[642] = 4294967295; 
a[643] = 4294967295; a[644] = 4294967295; a[645] = 4294967295; a[646] = 4294967295; 
a[647] = 4294967295; a[648] = 4294967295; a[649] = 4294967295; a[650] = 4294967295; 
a[651] = 4294967295; a[652] = 4294967295; a[653] = 4294967295; a[654] = 4294967295; 
a[655] = 4294967295; a[656] = 4294967295; a[657] = 4294967295; a[658] = 4294967295; 
a[659] = 4294967295; a[660] = 4294967295; a[661] = 4294967295; a[662] = 4294967295; 
a[663] = 4294967295; a[664] = 4294967295; a[665] = 4294967295; a[666] = 4294967295; 
a[667] = 4294967295; a[668] = 4294967295; a[669] = 4294967295; a[670] = 4294967295; 
a[671] = 4294967295; a[672] = 4294967295; a[673] = 4294967295; a[674] = 4294967295; 
a[675] = 4294967295; a[676] = 4294967295; a[677] = 4294967295; a[678] = 4294967295; 
a[679] = 4294967295; a[680] = 4294967295; a[681] = 4294967295; a[682] = 4294967295; 
a[683] = 4294967295; a[684] = 4294967295; a[685] = 4294967295; a[686] = 4294967295; 
a[687] = 4294967295; a[688] = 4294967295; a[689] = 4294967295; a[690] = 4294967295; 
a[691] = 4294967295; a[692] = 4294967295; a[693] = 4294967295; a[694] = 4294967295; 
a[695] = 4294967295; a[696] = 4294967295; a[697] = 4294967295; a[698] = 4294967295; 
a[699] = 4294967295; a[700] = 4294967295; a[701] = 4294967295; a[702] = 4294967295; 
a[703] = 4294967295; a[704] = 4294967295; a[705] = 4294967295; a[706] = 4294967295; 
a[707] = 4294967295; a[708] = 4294967295; a[709] = 4294967295; a[710] = 4294967295; 
a[711] = 4294967295; a[712] = 4294967295; a[713] = 4294967295; a[714] = 4294967295; 
a[715] = 4294967295; a[716] = 4294967295; a[717] = 4294967295; a[718] = 4294967295; 
a[719] = 4294967295; a[720] = 4294967295; a[721] = 4294967295; a[722] = 4294967295; 
a[723] = 4294967295; a[724] = 4294967295; a[725] = 4294967295; a[726] = 4294967295; 
a[727] = 4294967295; a[728] = 4294967295; a[729] = 4294967295; a[730] = 4294967295; 
a[731] = 4294967295; a[732] = 4294967295; a[733] = 4294967295; a[734] = 4294967295; 
a[735] = 4294967295; a[736] = 4294967295; a[737] = 4294967295; a[738] = 4294967295; 
a[739] = 4294967295; a[740] = 4294967295; a[741] = 4294967295; a[742] = 4294967295; 
a[743] = 4294967295; a[744] = 4294967295; a[745] = 4294967295; a[746] = 4294967295; 
a[747] = 4294967295; a[748] = 4294967295; a[749] = 4294967295; a[750] = 4294967295; 
a[751] = 4294967295; a[752] = 4294967295; a[753] = 4294967295; a[754] = 4294967295; 
a[755] = 4294967295; a[756] = 4294967295; a[757] = 4294967295; a[758] = 4294967295; 
a[759] = 4294967295; a[760] = 4294967295; a[761] = 4294967295; a[762] = 4294967295; 
a[763] = 4294967295; a[764] = 4294967295; a[765] = 4294967295; a[766] = 4294967295; 
a[767] = 4294967295; a[768] = 4294967295; a[769] = 4294967295; a[770] = 4294967295; 
a[771] = 4294967295; a[772] = 4294967295; a[773] = 4294967295; a[774] = 4294967295; 
a[775] = 4294967295; a[776] = 4294967295; a[777] = 4294967295; a[778] = 4294967295; 
a[779] = 4294967295; a[780] = 4294967295; a[781] = 4294967295; a[782] = 4294967295; 
a[783] = 4294967295; a[784] = 4294967295; a[785] = 4294967295; a[786] = 4294967295; 
a[787] = 4294967295; a[788] = 4294967295; a[789] = 4294967295; a[790] = 4294967295; 
a[791] = 4294967295; a[792] = 4294967295; a[793] = 4294967295; a[794] = 4294967295; 
a[795] = 4294967295; a[796] = 4294967295; a[797] = 4294967295; a[798] = 4294967295; 
a[799] = 4294967295; a[800] = 4294967295; a[801] = 4294967295; a[802] = 4294967295; 
a[803] = 4294967295; a[804] = 4294967295; a[805] = 4294967295; a[806] = 4294967295; 
a[807] = 4294967295; a[808] = 4294967295; a[809] = 4294967295; a[810] = 4294967295; 
a[811] = 4294967295; a[812] = 4294967295; a[813] = 4294967295; a[814] = 4294967295; 
a[815] = 4294967295; a[816] = 4294967295; a[817] = 4294967295; a[818] = 4294967295; 
a[819] = 4294967295; a[820] = 4294967295; a[821] = 4294967295; a[822] = 4294967295; 
a[823] = 4294967295; a[824] = 4294967295; a[825] = 4294967295; a[826] = 4294967295; 
a[827] = 4294967295; a[828] = 4294967295; a[829] = 4294967295; a[830] = 4294967295; 
a[831] = 4294967295; a[832] = 4294967295; a[833] = 4294967295; a[834] = 4294967295; 
a[835] = 4294967295; a[836] = 4294967295; a[837] = 4294967295; a[838] = 4294967295; 
a[839] = 4294967295; a[840] = 4294967295; a[841] = 4294967295; a[842] = 4294967295; 
a[843] = 4294967295; a[844] = 4294967295; a[845] = 4294967295; a[846] = 4294967295; 
a[847] = 4294967295; a[848] = 4294967295; a[849] = 4294967295; a[850] = 4294967295; 
a[851] = 4294967295; a[852] = 4294967295; a[853] = 4294967295; a[854] = 4294967295; 
a[855] = 4294967295; a[856] = 4294967295; a[857] = 4294967295; a[858] = 4294967295; 
a[859] = 4294967295; a[860] = 4294967295; a[861] = 4294967295; a[862] = 4294967295; 
a[863] = 4294967295; a[864] = 4294967295; a[865] = 4294967295; a[866] = 4294967295; 
a[867] = 4294967295; a[868] = 4294967295; a[869] = 4294967295; a[870] = 4294967295; 
a[871] = 4294967295; a[872] = 4294967295; a[873] = 4294967295; a[874] = 4294967295; 
a[875] = 4294967295; a[876] = 4294967295; a[877] = 4294967295; a[878] = 4294967295; 
a[879] = 4294967295; a[880] = 4294967295; a[881] = 4294967295; a[882] = 4294967295; 
a[883] = 4294967295; a[884] = 4294967295; a[885] = 4294967295; a[886] = 4294967295; 
a[887] = 4294967295; a[888] = 4294967295; a[889] = 4294967295; a[890] = 4294967295; 
a[891] = 4294967295; a[892] = 4294967295; a[893] = 4294967295; a[894] = 4294967295; 
a[895] = 4294967295; a[896] = 4294967295; a[897] = 4294967295; a[898] = 4294967295; 
a[899] = 4294967295; a[900] = 4294967295; a[901] = 4294967295; a[902] = 4294967295; 
a[903] = 4294967295; a[904] = 4294967295; a[905] = 4294967295; a[906] = 4294967295; 
a[907] = 4294967295; a[908] = 4294967295; a[909] = 4294967295; a[910] = 4294967295; 
a[911] = 4294967295; a[912] = 4294967295; a[913] = 4294967295; a[914] = 4294967295; 
a[915] = 4294967295; a[916] = 4294967295; a[917] = 4294967295; a[918] = 4294967295; 
a[919] = 4294967295; a[920] = 4294967295; a[921] = 4294967295; a[922] = 4294967295; 
a[923] = 4294967295; a[924] = 4294967295; a[925] = 4294967295; a[926] = 4294967295; 
a[927] = 4294967295; a[928] = 4294967295; a[929] = 4294967295; a[930] = 4294967295; 
a[931] = 4294967295; a[932] = 4294967295; a[933] = 4294967295; a[934] = 4294967295; 
a[935] = 4294967295; a[936] = 4294967295; a[937] = 4294967295; a[938] = 4294967295; 
a[939] = 4294967295; a[940] = 4294967295; a[941] = 4294967295; a[942] = 4294967295; 
a[943] = 4294967295; a[944] = 4294967295; a[945] = 4294967295; a[946] = 4294967295; 
a[947] = 4294967295; a[948] = 4294967295; a[949] = 4294967295; a[950] = 4294967295; 
a[951] = 4294967295; a[952] = 4294967295; a[953] = 4294967295; a[954] = 4294967295; 
a[955] = 4294967295; a[956] = 4294967295; a[957] = 4294967295; a[958] = 4294967295; 
a[959] = 4294967295; a[960] = 4294967295; a[961] = 4294967295; a[962] = 4294967295; 
a[963] = 4294967295; a[964] = 4294967295; a[965] = 4294967295; a[966] = 4294967295; 
a[967] = 4294967295; a[968] = 4294967295; a[969] = 4294967295; a[970] = 4294967295; 
a[971] = 4294967295; a[972] = 4294967295; a[973] = 4294967295; a[974] = 4294967295; 
a[975] = 4294967295; a[976] = 4294967295; a[977] = 4294967295; a[978] = 4294967295; 
a[979] = 4294967295; a[980] = 4294967295; a[981] = 4294967295; a[982] = 4294967295; 
a[983] = 4294967295; a[984] = 4294967295; a[985] = 4294967295; a[986] = 4294967295; 
a[987] = 4294967295; a[988] = 4294967295; a[989] = 4294967295; a[990] = 4294967295; 
a[991] = 4294967295; a[992] = 4294967295; a[993] = 4294967295; a[994] = 4294967295; 
a[995] = 4294967295; a[996] = 4294967295; a[997] = 4294967295; a[998] = 4294967295; 
a[999] = 4294967295; a[1000] = 4294967295; a[1001] = 4294967295; a[1002] = 4294967295; 
a[1003] = 4294967295; a[1004] = 4294967295; a[1005] = 4294967295; a[1006] = 4294967295; 
a[1007] = 4294967295; a[1008] = 4294967295; a[1009] = 4294967295; a[1010] = 4294967295; 
a[1011] = 4294967295; a[1012] = 4294967295; a[1013] = 4294967295; a[1014] = 4294967295; 
a[1015] = 4294967295; a[1016] = 4294967295; a[1017] = 4294967295; a[1018] = 4294967295; 
a[1019] = 4294967295; a[1020] = 4294967295; a[1021] = 4294967295; a[1022] = 4294967295; 
a[1023] = 4294967295; a[1024] = 4294967295; a[1025] = 4294967295; a[1026] = 4294967295; 
a[1027] = 4294967295; a[1028] = 4294967295; a[1029] = 4294967295; a[1030] = 4294967295; 
a[1031] = 4294967295; a[1032] = 4294967295; a[1033] = 4294967295; a[1034] = 4294967295; 
a[1035] = 4294967295; a[1036] = 4294967295; a[1037] = 4294967295; a[1038] = 4294967295; 
a[1039] = 4294967295; a[1040] = 4294967295; a[1041] = 4294967295; a[1042] = 4294967295; 
a[1043] = 4294967295; a[1044] = 4294967295; a[1045] = 4294967295; a[1046] = 4294967295; 
a[1047] = 4294967295; a[1048] = 4294967295; a[1049] = 4294967295; a[1050] = 4294967295; 
a[1051] = 4294967295; a[1052] = 4294967295; a[1053] = 4294967295; a[1054] = 4294967295; 
a[1055] = 4294967295; a[1056] = 4294967295; a[1057] = 4294967295; a[1058] = 4294967295; 
a[1059] = 4294967295; a[1060] = 4294967295; a[1061] = 4294967295; a[1062] = 4294967295; 
a[1063] = 4294967295; a[1064] = 4294967295; a[1065] = 4294967295; a[1066] = 4294967295; 
a[1067] = 4294967295; a[1068] = 4294967295; a[1069] = 4294967295; a[1070] = 4294967295; 
a[1071] = 4294967295; a[1072] = 4294967295; a[1073] = 4294967295; a[1074] = 4294967295; 
a[1075] = 4294967295; a[1076] = 4294967295; a[1077] = 4294967295; a[1078] = 4294967295; 
a[1079] = 4294967295; a[1080] = 4294967295; a[1081] = 4294967295; a[1082] = 4294967295; 
a[1083] = 4294967295; a[1084] = 4294967295; a[1085] = 4294967295; a[1086] = 4294967295; 
a[1087] = 4294967295; a[1088] = 4294967295; a[1089] = 4294967295; a[1090] = 4294967295; 
a[1091] = 4294967295; a[1092] = 4294967295; a[1093] = 4294967295; a[1094] = 4294967295; 
a[1095] = 4294967295; a[1096] = 4294967295; a[1097] = 4294967295; a[1098] = 4294967295; 
a[1099] = 4294967295; a[1100] = 4294967295; a[1101] = 4294967295; a[1102] = 4294967295; 
a[1103] = 4294967295; a[1104] = 4294967295; a[1105] = 4294967295; a[1106] = 4294967295; 
a[1107] = 4294967295; a[1108] = 4294967295; a[1109] = 4294967295; a[1110] = 4294967295; 
a[1111] = 4294967295; a[1112] = 4294967295; a[1113] = 4294967295; a[1114] = 4294967295; 
a[1115] = 4294967295; a[1116] = 4294967295; a[1117] = 4294967295; a[1118] = 4294967295; 
a[1119] = 4294967295; a[1120] = 4294967295; a[1121] = 4294967295; a[1122] = 4294967295; 
a[1123] = 4294967295; a[1124] = 4294967295; a[1125] = 4294967295; a[1126] = 4294967295; 
a[1127] = 4294967295; a[1128] = 4294967295; a[1129] = 4294967295; a[1130] = 4294967295; 
a[1131] = 4294967295; a[1132] = 4294967295; a[1133] = 4294967295; a[1134] = 4294967295; 
a[1135] = 4294967295; a[1136] = 4294967295; a[1137] = 4294967295; a[1138] = 4294967295; 
a[1139] = 4294967295; a[1140] = 4294967295; a[1141] = 4294967295; a[1142] = 4294967295; 
a[1143] = 4294967295; a[1144] = 4294967295; a[1145] = 4294967295; a[1146] = 4294967295; 
a[1147] = 4294967295; a[1148] = 4294967295; a[1149] = 4294967295; a[1150] = 4294967295; 
a[1151] = 4294967295; a[1152] = 4294967295; a[1153] = 4294967295; a[1154] = 4294967295; 
a[1155] = 4294967295; a[1156] = 4294967295; a[1157] = 4294967295; a[1158] = 4294967295; 
a[1159] = 4294967295; a[1160] = 4294967295; a[1161] = 4294967295; a[1162] = 4294967295; 
a[1163] = 4294967295; a[1164] = 4294967295; a[1165] = 4294967295; a[1166] = 4294967295; 
a[1167] = 4294967295; a[1168] = 4294967295; a[1169] = 4294967295; a[1170] = 4294967295; 
a[1171] = 4294967295; a[1172] = 4294967295; a[1173] = 4294967295; a[1174] = 4294967295; 
a[1175] = 4294967295; a[1176] = 4294967295; a[1177] = 4294967295; a[1178] = 4294967295; 
a[1179] = 4294967295; a[1180] = 4294967295; a[1181] = 4294967295; a[1182] = 4294967295; 
a[1183] = 4294967295; a[1184] = 4294967295; a[1185] = 4294967295; a[1186] = 4294967295; 
a[1187] = 4294967295; a[1188] = 4294967295; a[1189] = 4294967295; a[1190] = 4294967295; 
a[1191] = 4294967295; a[1192] = 4294967295; a[1193] = 4294967295; a[1194] = 4294967295; 
a[1195] = 4294967295; a[1196] = 4294967295; a[1197] = 4294967295; a[1198] = 4294967295; 
a[1199] = 4294967295; a[1200] = 4294967295; a[1201] = 4294967295; a[1202] = 4294967295; 
a[1203] = 4294967295; a[1204] = 4294967295; a[1205] = 4294967295; a[1206] = 4294967295; 
a[1207] = 4294967295; a[1208] = 4294967295; a[1209] = 4294967295; a[1210] = 4294967295; 
a[1211] = 4294967295; a[1212] = 4294967295; a[1213] = 4294967295; a[1214] = 4294967295; 
a[1215] = 4294967295; a[1216] = 4294967295; a[1217] = 4294967295; a[1218] = 4294967295; 
a[1219] = 4294967295; a[1220] = 4294967295; a[1221] = 4294967295; a[1222] = 4294967295; 
a[1223] = 4294967295; a[1224] = 4294967295; a[1225] = 4294967295; a[1226] = 4294967295; 
a[1227] = 4294967295; a[1228] = 4294967295; a[1229] = 4294967295; a[1230] = 4294967295; 
a[1231] = 4294967295; a[1232] = 4294967295; a[1233] = 4294967295; a[1234] = 4294967295; 
a[1235] = 4294967295; a[1236] = 4294967295; a[1237] = 4294967295; a[1238] = 4294967295; 
a[1239] = 4294967295; a[1240] = 4294967295; a[1241] = 4294967295; a[1242] = 4294967295; 
a[1243] = 4294967295; a[1244] = 4294967295; a[1245] = 4294967295; a[1246] = 4294967295; 
a[1247] = 4294967295; a[1248] = 4294967295; a[1249] = 4294967295; a[1250] = 4294967295; 
a[1251] = 4294967295; a[1252] = 4294967295; a[1253] = 4294967295; a[1254] = 4294967295; 
a[1255] = 4294967295; a[1256] = 4294967295; a[1257] = 4294967295; a[1258] = 4294967295; 
a[1259] = 4294967295; a[1260] = 4294967295; a[1261] = 4294967295; a[1262] = 4294967295; 
a[1263] = 4294967295; a[1264] = 4294967295; a[1265] = 4294967295; a[1266] = 4294967295; 
a[1267] = 4294967295; a[1268] = 4294967295; a[1269] = 4294967295; a[1270] = 4294967295; 
a[1271] = 4294967295; a[1272] = 4294967295; a[1273] = 4294967295; a[1274] = 4294967295; 
a[1275] = 4294967295; a[1276] = 4294967295; a[1277] = 4294967295; a[1278] = 4294967295; 
a[1279] = 2047; a[1280] = 4294967295; a[1281] = 4294967295; a[1282] = 4294967295; 
a[1283] = 4294967295; a[1284] = 4294967295; a[1285] = 4294967295; a[1286] = 4294967295; 
a[1287] = 4294967295; a[1288] = 4294967295; a[1289] = 4294967295; a[1290] = 4294967295; 
a[1291] = 4294967295; a[1292] = 4294967295; a[1293] = 4294967295; a[1294] = 4294967295; 
a[1295] = 4294967295; a[1296] = 4294967295; a[1297] = 4294967295; a[1298] = 4294967295; 
a[1299] = 4294967295; a[1300] = 4294967295; a[1301] = 4294967295; a[1302] = 4294967295; 
a[1303] = 4294967295; a[1304] = 4294967295; a[1305] = 4294967295; a[1306] = 4294967295; 
a[1307] = 4294967295; a[1308] = 4294967295; a[1309] = 4294967295; a[1310] = 4294967295; 
a[1311] = 4294967295; a[1312] = 4294967295; a[1313] = 4294967295; a[1314] = 4294967295; 
a[1315] = 4294967295; a[1316] = 8191; a[1318] = 4294901760; a[1319] = 1073741823; 
a[1320] = 4294967295; a[1321] = 4294967295; a[1322] = 4294967295; a[1323] = 4294967295; 
a[1324] = 4294967295; a[1325] = 4294967295; a[1326] = 4294967295; a[1327] = 4294967295; 
a[1328] = 4294909951; a[1329] = 3072; a[1330] = 4294967295; a[1331] = 2414903295; 
a[1332] = 4294967295; a[1333] = 4294967295; a[1334] = 4294967295; a[1335] = 65535; 
a[1336] = 4286578688; a[1337] = 4294967292; a[1338] = 4294967295; a[1339] = 4294967295; 
a[1340] = 4294965759; a[1341] = 16744447; a[1343] = 4286578688; a[1344] = 4294965179; 
a[1345] = 255; a[1346] = 4294967295; a[1347] = 1048575; a[1348] = 4294967295; 
a[1349] = 4294967295; a[1350] = 47; a[1351] = 687603712; a[1352] = 4294966272; 
a[1353] = 4294903807; a[1354] = 524287; a[1355] = 536870911; a[1356] = 4294967295; 
a[1357] = 4294443007; a[1358] = 32768; a[1359] = 2080440287; a[1360] = 4294967295; 
a[1361] = 8388607; a[1362] = 16383; a[1363] = 3296722943; a[1364] = 4294967295; 
a[1365] = 2147483647; a[1366] = 939524101; a[1367] = 3997695; a[1368] = 8289918; 
a[1369] = 4294934399; a[1370] = 4160749567; a[1371] = 4294901823; a[1372] = 4294967295; 
a[1373] = 4294967295; a[1374] = 4294967295; a[1375] = 2047; a[1376] = 4294967295; 
a[1377] = 4294967295; a[1378] = 4294967295; a[1379] = 4294967295; a[1380] = 4294967295; 
a[1381] = 4294967295; a[1382] = 4294967295; a[1383] = 4294967295; a[1384] = 4294967295; 
a[1385] = 4294967295; a[1386] = 4294967295; a[1387] = 4294967295; a[1388] = 4294967295; 
a[1389] = 4294967295; a[1390] = 4294967295; a[1391] = 4294967295; a[1392] = 4294967295; 
a[1393] = 4294967295; a[1394] = 4294967295; a[1395] = 4294967295; a[1396] = 4294967295; 
a[1397] = 4294967295; a[1398] = 4294967295; a[1399] = 4294967295; a[1400] = 4294967295; 
a[1401] = 4294967295; a[1402] = 4294967295; a[1403] = 4294967295; a[1404] = 4294967295; 
a[1405] = 4294967295; a[1406] = 4294967295; a[1407] = 4294967295; a[1408] = 4294967295; 
a[1409] = 4294967295; a[1410] = 4294967295; a[1411] = 4294967295; a[1412] = 4294967295; 
a[1413] = 4294967295; a[1414] = 4294967295; a[1415] = 4294967295; a[1416] = 4294967295; 
a[1417] = 4294967295; a[1418] = 4294967295; a[1419] = 4294967295; a[1420] = 4294967295; 
a[1421] = 4294967295; a[1422] = 4294967295; a[1423] = 4294967295; a[1424] = 4294967295; 
a[1425] = 4294967295; a[1426] = 4294967295; a[1427] = 4294967295; a[1428] = 4294967295; 
a[1429] = 4294967295; a[1430] = 4294967295; a[1431] = 4294967295; a[1432] = 4294967295; 
a[1433] = 4294967295; a[1434] = 4294967295; a[1435] = 4294967295; a[1436] = 4294967295; 
a[1437] = 4294967295; a[1438] = 4294967295; a[1439] = 4294967295; a[1440] = 4294967295; 
a[1441] = 4294967295; a[1442] = 4294967295; a[1443] = 4294967295; a[1444] = 4294967295; 
a[1445] = 4294967295; a[1446] = 4294967295; a[1447] = 4294967295; a[1448] = 4294967295; 
a[1449] = 4294967295; a[1450] = 4294967295; a[1451] = 4294967295; a[1452] = 4294967295; 
a[1453] = 4294967295; a[1454] = 4294967295; a[1455] = 4294967295; a[1456] = 4294967295; 
a[1457] = 4294967295; a[1458] = 4294967295; a[1459] = 4294967295; a[1460] = 4294967295; 
a[1461] = 4294967295; a[1462] = 4294967295; a[1463] = 4294967295; a[1464] = 4294967295; 
a[1465] = 4294967295; a[1466] = 4294967295; a[1467] = 4294967295; a[1468] = 4294967295; 
a[1469] = 4294967295; a[1470] = 4294967295; a[1471] = 4294967295; a[1472] = 4294967295; 
a[1473] = 4294967295; a[1474] = 4294967295; a[1475] = 4294967295; a[1476] = 4294967295; 
a[1477] = 4294967295; a[1478] = 4294967295; a[1479] = 4294967295; a[1480] = 4294967295; 
a[1481] = 4294967295; a[1482] = 4294967295; a[1483] = 4294967295; a[1484] = 4294967295; 
a[1485] = 4294967295; a[1486] = 4294967295; a[1487] = 4294967295; a[1488] = 4294967295; 
a[1489] = 4294967295; a[1490] = 4294967295; a[1491] = 4294967295; a[1492] = 4294967295; 
a[1493] = 4294967295; a[1494] = 4294967295; a[1495] = 4294967295; a[1496] = 4294967295; 
a[1497] = 4294967295; a[1498] = 4294967295; a[1499] = 4294967295; a[1500] = 4294967295; 
a[1501] = 4294967295; a[1502] = 4294967295; a[1503] = 4294967295; a[1504] = 4294967295; 
a[1505] = 4294967295; a[1506] = 4294967295; a[1507] = 4294967295; a[1508] = 4294967295; 
a[1509] = 4294967295; a[1510] = 4294967295; a[1511] = 4294967295; a[1512] = 4294967295; 
a[1513] = 4294967295; a[1514] = 4294967295; a[1515] = 4294967295; a[1516] = 4294967295; 
a[1517] = 4294967295; a[1518] = 4294967295; a[1519] = 4294967295; a[1520] = 4294967295; 
a[1521] = 4294967295; a[1522] = 4294967295; a[1523] = 4294967295; a[1524] = 4294967295; 
a[1525] = 4294967295; a[1526] = 4294967295; a[1527] = 4294967295; a[1528] = 4294967295; 
a[1529] = 4294967295; a[1530] = 4294967295; a[1531] = 4294967295; a[1532] = 4294967295; 
a[1533] = 4294967295; a[1534] = 4294967295; a[1535] = 4294967295; a[1536] = 4294967295; 
a[1537] = 4294967295; a[1538] = 4294967295; a[1539] = 4294967295; a[1540] = 4294967295; 
a[1541] = 4294967295; a[1542] = 4294967295; a[1543] = 4294967295; a[1544] = 4294967295; 
a[1545] = 4294967295; a[1546] = 4294967295; a[1547] = 4294967295; a[1548] = 4294967295; 
a[1549] = 4294967295; a[1550] = 4294967295; a[1551] = 4294967295; a[1552] = 4294967295; 
a[1553] = 4294967295; a[1554] = 4294967295; a[1555] = 4294967295; a[1556] = 4294967295; 
a[1557] = 4294967295; a[1558] = 4294967295; a[1559] = 4294967295; a[1560] = 4294967295; 
a[1561] = 4294967295; a[1562] = 4294967295; a[1563] = 4294967295; a[1564] = 4294967295; 
a[1565] = 4294967295; a[1566] = 4294967295; a[1567] = 4294967295; a[1568] = 4294967295; 
a[1569] = 4294967295; a[1570] = 4294967295; a[1571] = 4294967295; a[1572] = 4294967295; 
a[1573] = 4294967295; a[1574] = 4294967295; a[1575] = 4294967295; a[1576] = 4294967295; 
a[1577] = 4294967295; a[1578] = 4294967295; a[1579] = 4294967295; a[1580] = 4294967295; 
a[1581] = 4294967295; a[1582] = 4294967295; a[1583] = 4294967295; a[1584] = 4294967295; 
a[1585] = 4294967295; a[1586] = 4294967295; a[1587] = 4294967295; a[1588] = 4294967295; 
a[1589] = 4294967295; a[1590] = 4294967295; a[1591] = 4294967295; a[1592] = 4294967295; 
a[1593] = 4294967295; a[1594] = 4294967295; a[1595] = 4294967295; a[1596] = 4294967295; 
a[1597] = 4294967295; a[1598] = 4294967295; a[1599] = 4294967295; a[1600] = 4294967295; 
a[1601] = 4294967295; a[1602] = 4294967295; a[1603] = 4294967295; a[1604] = 4294967295; 
a[1605] = 4294967295; a[1606] = 4294967295; a[1607] = 4294967295; a[1608] = 4294967295; 
a[1609] = 4294967295; a[1610] = 4294967295; a[1611] = 4294967295; a[1612] = 4294967295; 
a[1613] = 4294967295; a[1614] = 4294967295; a[1615] = 4294967295; a[1616] = 4294967295; 
a[1617] = 4294967295; a[1618] = 4294967295; a[1619] = 4294967295; a[1620] = 4294967295; 
a[1621] = 4294967295; a[1622] = 4294967295; a[1623] = 4294967295; a[1624] = 4294967295; 
a[1625] = 4294967295; a[1626] = 4294967295; a[1627] = 4294967295; a[1628] = 4294967295; 
a[1629] = 4294967295; a[1630] = 4294967295; a[1631] = 4294967295; a[1632] = 4294967295; 
a[1633] = 4294967295; a[1634] = 4294967295; a[1635] = 4294967295; a[1636] = 4294967295; 
a[1637] = 4294967295; a[1638] = 4294967295; a[1639] = 4294967295; a[1640] = 4294967295; 
a[1641] = 4294967295; a[1642] = 4294967295; a[1643] = 4294967295; a[1644] = 4294967295; 
a[1645] = 4294967295; a[1646] = 4294967295; a[1647] = 4294967295; a[1648] = 4294967295; 
a[1649] = 4294967295; a[1650] = 4294967295; a[1651] = 4294967295; a[1652] = 4294967295; 
a[1653] = 4294967295; a[1654] = 4294967295; a[1655] = 4294967295; a[1656] = 4294967295; 
a[1657] = 4294967295; a[1658] = 4294967295; a[1659] = 4294967295; a[1660] = 4294967295; 
a[1661] = 4294967295; a[1662] = 4294967295; a[1663] = 4294967295; a[1664] = 4294967295; 
a[1665] = 4294967295; a[1666] = 4294967295; a[1667] = 4294967295; a[1668] = 4294967295; 
a[1669] = 4294967295; a[1670] = 4294967295; a[1671] = 4294967295; a[1672] = 4294967295; 
a[1673] = 4294967295; a[1674] = 4294967295; a[1675] = 4294967295; a[1676] = 4294967295; 
a[1677] = 4294967295; a[1678] = 4294967295; a[1679] = 4294967295; a[1680] = 4294967295; 
a[1681] = 4294967295; a[1682] = 4294967295; a[1683] = 4294967295; a[1684] = 4294967295; 
a[1685] = 4294967295; a[1686] = 4294967295; a[1687] = 4294967295; a[1688] = 4294967295; 
a[1689] = 4294967295; a[1690] = 4294967295; a[1691] = 4294967295; a[1692] = 4294967295; 
a[1693] = 4294967295; a[1694] = 4294967295; a[1695] = 4294967295; a[1696] = 4294967295; 
a[1697] = 4294967295; a[1698] = 4294967295; a[1699] = 4294967295; a[1700] = 4294967295; 
a[1701] = 4294967295; a[1702] = 4294967295; a[1703] = 4294967295; a[1704] = 4294967295; 
a[1705] = 4294967295; a[1706] = 4294967295; a[1707] = 4294967295; a[1708] = 4294967295; 
a[1709] = 4294967295; a[1710] = 4294967295; a[1711] = 4294967295; a[1712] = 4294967295; 
a[1713] = 4294967295; a[1714] = 4294967295; a[1715] = 4294967295; a[1716] = 4294967295; 
a[1717] = 4294967295; a[1718] = 4294967295; a[1719] = 4294967295; a[1720] = 4294967295; 
a[1721] = 4294967295; a[1722] = 4294967295; a[1723] = 4294967295; a[1724] = 4294967295; 
a[1725] = 4294901775; a[1726] = 4294965375; a[1727] = 268435455; a[1992] = 4294967295; 
a[1993] = 4294967295; a[1994] = 4294967295; a[1995] = 4294967295; a[1996] = 4294967295; 
a[1997] = 4294967295; a[1998] = 4294967295; a[1999] = 4294967295; a[2000] = 4294967295; 
a[2001] = 4294967295; a[2002] = 4294967295; a[2003] = 4294918143; a[2004] = 4294967295; 
a[2005] = 4294967295; a[2006] = 67108863; a[2008] = 3774349439; a[2009] = 1602223615; 
a[2010] = 4294967259; a[2011] = 4294967295; a[2012] = 4294967295; a[2013] = 262143; 
a[2014] = 4294443008; a[2015] = 4294967295; a[2016] = 4294967295; a[2017] = 4294967295; 
a[2018] = 4294967295; a[2019] = 4294967295; a[2020] = 4294967295; a[2021] = 4294967295; 
a[2022] = 4294967295; a[2023] = 4294967295; a[2024] = 4294967295; a[2025] = 1073741823; 
a[2026] = 4294901760; a[2027] = 4294967295; a[2028] = 4294770687; a[2029] = 4294967295; 
a[2030] = 255; a[2031] = 268369920; a[2035] = 4292804608; a[2036] = 4294967295; 
a[2037] = 4294967295; a[2038] = 4294967295; a[2039] = 536870911; a[2041] = 134217726; 
a[2042] = 134217726; a[2043] = 4294967232; a[2044] = 4294967295; a[2045] = 2147483647; 
a[2046] = 486341884; a[2048] = 4294963199; a[2049] = 3087007615; a[2050] = 1073692671; 
a[2052] = 4294967295; a[2053] = 4294967295; a[2054] = 4294967295; a[2055] = 134217727; 
a[2058] = 4294967295; a[2059] = 2097151; a[2068] = 536870911; a[2069] = 4294967295; 
a[2070] = 131071; a[2072] = 4294967295; a[2073] = 4294959104; a[2074] = 4294903807; 
a[2075] = 134217727; a[2076] = 1073741823; a[2077] = 4294967295; a[2078] = 4128527; 
a[2080] = 4294967295; a[2081] = 4294967295; a[2082] = 4294967295; a[2083] = 4294967295; 
a[2084] = 1073741823; a[2085] = 4294901760; a[2086] = 4279238655; a[2087] = 268435455; 
a[2088] = 4294967295; a[2089] = 4294902015; a[2090] = 4294967295; a[2091] = 15; 
a[2096] = 4294967295; a[2097] = 4294967295; a[2098] = 4294967295; a[2099] = 4294967295; 
a[2100] = 4294967295; a[2101] = 4294967295; a[2102] = 4294967295; a[2103] = 4294967295; 
a[2104] = 4294967295; a[2105] = 8388607; a[2106] = 4194303; a[2107] = 255; 
a[2112] = 4294966591; a[2113] = 2445279231; a[2114] = 4194303; a[2115] = 8388607; 
a[2116] = 2147483647; a[2119] = 3670015; a[2120] = 4194303; a[2121] = 67108863; 
a[2124] = 4294967295; a[2125] = 3238002687; a[2128] = 4277137519; a[2129] = 1048575; 
a[2131] = 536870911; a[2132] = 536870911; a[2134] = 4294967039; a[2135] = 31; 
a[2136] = 4294967295; a[2137] = 4194303; a[2138] = 4194303; a[2139] = 524287; 
a[2140] = 262143; a[2144] = 4294967295; a[2145] = 4294967295; a[2146] = 511; 
a[2148] = 4294967295; a[2149] = 524287; a[2150] = 4294967295; a[2151] = 524287; 
a[2176] = 4294967295; a[2177] = 4294967295; a[2178] = 63; a[2180] = 4294967292; 
a[2181] = 33554431; a[2182] = 4294901760; a[2183] = 511; a[2184] = 4294967295; 
a[2185] = 524287; a[2186] = 4294901760; a[2187] = 4718591; a[2188] = 4294967295; 
a[2189] = 4294967295; a[2190] = 335544350; a[2192] = 4294705151; a[2193] = 1084227583; 
a[2196] = 3221208447; a[2197] = 4294902271; a[2198] = 4294967295; a[2199] = 511; 
a[2200] = 4294549487; a[2201] = 3824025087; a[2202] = 3766557087; a[2203] = 15; 
a[2208] = 4294967295; a[2209] = 4294967295; a[2210] = 1979; a[2212] = 4294967295; 
a[2213] = 4294967295; a[2214] = 179; a[2220] = 4294967295; a[2221] = 2134900735; 
a[2222] = 1056964608; a[2224] = 4294967295; a[2225] = 2147483647; a[2226] = 17; 
a[2228] = 4294967295; a[2229] = 4194303; a[2232] = 3825205247; a[2233] = 2047; 
a[2245] = 4294967295; a[2246] = 4294967295; a[2247] = 2147483648; a[2256] = 4294967295; 
a[2257] = 2145910783; a[2258] = 4294901760; a[2259] = 4294967295; a[2260] = 16777167; 
a[2262] = 4294967295; a[2263] = 33554431; a[2272] = 4294966783; a[2273] = 2139095039; 
a[2274] = 1; a[2275] = 4294705152; a[2276] = 4294770687; a[2277] = 8388351; 
a[2280] = 4294966143; a[2281] = 3028287487; a[2282] = 203; a[2304] = 4294967295; 
a[2305] = 4294967295; a[2306] = 4294967295; a[2307] = 4294967295; a[2308] = 4294967295; 
a[2309] = 4294967295; a[2310] = 4294967295; a[2311] = 4294967295; a[2312] = 4294967295; 
a[2313] = 4294967295; a[2314] = 4294967295; a[2315] = 4294967295; a[2316] = 4294967295; 
a[2317] = 4294967295; a[2318] = 4294967295; a[2319] = 4294967295; a[2320] = 4294967295; 
a[2321] = 4294967295; a[2322] = 4294967295; a[2323] = 4294967295; a[2324] = 4294967295; 
a[2325] = 4294967295; a[2326] = 4294967295; a[2327] = 4294967295; a[2328] = 4294967295; 
a[2329] = 4294967295; a[2330] = 4294967295; a[2331] = 4294967295; a[2332] = 67108863; 
a[2336] = 4294967295; a[2337] = 4294967295; a[2338] = 4294967295; a[2339] = 32767; 
a[2340] = 4294967295; a[2341] = 4294967295; a[2342] = 4294967295; a[2343] = 4294967295; 
a[2344] = 4294967295; a[2345] = 4294967295; a[2346] = 15; a[2432] = 4294967295; 
a[2433] = 4294967295; a[2434] = 4294967295; a[2435] = 4294967295; a[2436] = 4294967295; 
a[2437] = 4294967295; a[2438] = 4294967295; a[2439] = 4294967295; a[2440] = 4294967295; 
a[2441] = 4294967295; a[2442] = 4294967295; a[2443] = 4294967295; a[2444] = 4294967295; 
a[2445] = 4294967295; a[2446] = 4294967295; a[2447] = 4294967295; a[2448] = 4294967295; 
a[2449] = 4294967295; a[2450] = 4294967295; a[2451] = 4294967295; a[2452] = 4294967295; 
a[2453] = 4294967295; a[2454] = 4294967295; a[2455] = 4294967295; a[2456] = 4294967295; 
a[2457] = 4294967295; a[2458] = 4294967295; a[2459] = 4294967295; a[2460] = 4294967295; 
a[2461] = 4294967295; a[2462] = 4294967295; a[2463] = 4294967295; a[2464] = 4294967295; 
a[2465] = 32767; a[2592] = 4294967295; a[2593] = 4294967295; a[2594] = 4294967295; 
a[2595] = 4294967295; a[2596] = 4294967295; a[2597] = 4294967295; a[2598] = 4294967295; 
a[2599] = 4294967295; a[2600] = 4294967295; a[2601] = 4294967295; a[2602] = 4294967295; 
a[2603] = 4294967295; a[2604] = 4294967295; a[2605] = 4294967295; a[2606] = 4294967295; 
a[2607] = 4294967295; a[2608] = 4294967295; a[2609] = 4294967295; a[2610] = 127; 
a[2880] = 4294967295; a[2881] = 4294967295; a[2882] = 4294967295; a[2883] = 4294967295; 
a[2884] = 4294967295; a[2885] = 4294967295; a[2886] = 4294967295; a[2887] = 4294967295; 
a[2888] = 4294967295; a[2889] = 4294967295; a[2890] = 4294967295; a[2891] = 4294967295; 
a[2892] = 4294967295; a[2893] = 4294967295; a[2894] = 4294967295; a[2895] = 4294967295; 
a[2896] = 4294967295; a[2897] = 33554431; a[2898] = 2147483647; a[2902] = 4294901760; 
a[2903] = 16383; a[2904] = 4294967295; a[2905] = 8388607; a[2906] = 15; 
a[2907] = 3774873592; a[2908] = 65535; a[2936] = 4294967295; a[2937] = 4294967295; 
a[2938] = 4294901791; a[2939] = 2147483647; a[2940] = 4294443008; a[2943] = 3; 
a[2944] = 4294967295; a[2945] = 4294967295; a[2946] = 4294967295; a[2947] = 4294967295; 
a[2948] = 4294967295; a[2949] = 4294967295; a[2950] = 4294967295; a[2951] = 4294967295; 
a[2952] = 4294967295; a[2953] = 4294967295; a[2954] = 4294967295; a[2955] = 4294967295; 
a[2956] = 4294967295; a[2957] = 4294967295; a[2958] = 4294967295; a[2959] = 4294967295; 
a[2960] = 4294967295; a[2961] = 4294967295; a[2962] = 4294967295; a[2963] = 4294967295; 
a[2964] = 4294967295; a[2965] = 4294967295; a[2966] = 4294967295; a[2967] = 4294967295; 
a[2968] = 4294967295; a[2969] = 4294967295; a[2970] = 4294967295; a[2971] = 4294967295; 
a[2972] = 4294967295; a[2973] = 4294967295; a[2974] = 4294967295; a[2975] = 4294967295; 
a[2976] = 4294967295; a[2977] = 4294967295; a[2978] = 4294967295; a[2979] = 4294967295; 
a[2980] = 4294967295; a[2981] = 4294967295; a[2982] = 4294967295; a[2983] = 4294967295; 
a[2984] = 4294967295; a[2985] = 4294967295; a[2986] = 4294967295; a[2987] = 4294967295; 
a[2988] = 4294967295; a[2989] = 4294967295; a[2990] = 4294967295; a[2991] = 4294967295; 
a[2992] = 4294967295; a[2993] = 4294967295; a[2994] = 4294967295; a[2995] = 4294967295; 
a[2996] = 4294967295; a[2997] = 4294967295; a[2998] = 4294967295; a[2999] = 4294967295; 
a[3000] = 4294967295; a[3001] = 4294967295; a[3002] = 4294967295; a[3003] = 4294967295; 
a[3004] = 4294967295; a[3005] = 4294967295; a[3006] = 4294967295; a[3007] = 4294967295; 
a[3008] = 4294967295; a[3009] = 4294967295; a[3010] = 4294967295; a[3011] = 4294967295; 
a[3012] = 4294967295; a[3013] = 4294967295; a[3014] = 4294967295; a[3015] = 4294967295; 
a[3016] = 4294967295; a[3017] = 4294967295; a[3018] = 4294967295; a[3019] = 4294967295; 
a[3020] = 4294967295; a[3021] = 4294967295; a[3022] = 4294967295; a[3023] = 4294967295; 
a[3024] = 4294967295; a[3025] = 4294967295; a[3026] = 4294967295; a[3027] = 4294967295; 
a[3028] = 4294967295; a[3029] = 4294967295; a[3030] = 4294967295; a[3031] = 4294967295; 
a[3032] = 4294967295; a[3033] = 4294967295; a[3034] = 4294967295; a[3035] = 4294967295; 
a[3036] = 4294967295; a[3037] = 4294967295; a[3038] = 4294967295; a[3039] = 4294967295; 
a[3040] = 4294967295; a[3041] = 4294967295; a[3042] = 4294967295; a[3043] = 4294967295; 
a[3044] = 4294967295; a[3045] = 4294967295; a[3046] = 4294967295; a[3047] = 4294967295; 
a[3048] = 4294967295; a[3049] = 4294967295; a[3050] = 4294967295; a[3051] = 4294967295; 
a[3052] = 4294967295; a[3053] = 4294967295; a[3054] = 4294967295; a[3055] = 4294967295; 
a[3056] = 4294967295; a[3057] = 4294967295; a[3058] = 4294967295; a[3059] = 4294967295; 
a[3060] = 4294967295; a[3061] = 4294967295; a[3062] = 4294967295; a[3063] = 4294967295; 
a[3064] = 4294967295; a[3065] = 4294967295; a[3066] = 4294967295; a[3067] = 4294967295; 
a[3068] = 4294967295; a[3069] = 4294967295; a[3070] = 4294967295; a[3071] = 4294967295; 
a[3072] = 4294967295; a[3073] = 4294967295; a[3074] = 4294967295; a[3075] = 4294967295; 
a[3076] = 4294967295; a[3077] = 4294967295; a[3078] = 4294967295; a[3079] = 4294967295; 
a[3080] = 4294967295; a[3081] = 4294967295; a[3082] = 4294967295; a[3083] = 4294967295; 
a[3084] = 4294967295; a[3085] = 4294967295; a[3086] = 4294967295; a[3087] = 4294967295; 
a[3088] = 4294967295; a[3089] = 4294967295; a[3090] = 4294967295; a[3091] = 4294967295; 
a[3092] = 4294967295; a[3093] = 4294967295; a[3094] = 4294967295; a[3095] = 4294967295; 
a[3096] = 4294967295; a[3097] = 4294967295; a[3098] = 4294967295; a[3099] = 4294967295; 
a[3100] = 4294967295; a[3101] = 4294967295; a[3102] = 4294967295; a[3103] = 4294967295; 
a[3104] = 4294967295; a[3105] = 4294967295; a[3106] = 4294967295; a[3107] = 4294967295; 
a[3108] = 4294967295; a[3109] = 4294967295; a[3110] = 4294967295; a[3111] = 4294967295; 
a[3112] = 4294967295; a[3113] = 4294967295; a[3114] = 4294967295; a[3115] = 4294967295; 
a[3116] = 4294967295; a[3117] = 4294967295; a[3118] = 4294967295; a[3119] = 4294967295; 
a[3120] = 4294967295; a[3121] = 4294967295; a[3122] = 4294967295; a[3123] = 4294967295; 
a[3124] = 4294967295; a[3125] = 4294967295; a[3126] = 4294967295; a[3127] = 4294967295; 
a[3128] = 4294967295; a[3129] = 4294967295; a[3130] = 4294967295; a[3131] = 4294967295; 
a[3132] = 4294967295; a[3133] = 4294967295; a[3134] = 4294967295; a[3135] = 8191; 
a[3136] = 4294967295; a[3137] = 4294967295; a[3138] = 4294967295; a[3139] = 4294967295; 
a[3140] = 4294967295; a[3141] = 4294967295; a[3142] = 4294967295; a[3143] = 4294967295; 
a[3144] = 4294967295; a[3145] = 4294967295; a[3146] = 4294967295; a[3147] = 4294967295; 
a[3148] = 4294967295; a[3149] = 4294967295; a[3150] = 4294967295; a[3151] = 4294967295; 
a[3152] = 4294967295; a[3153] = 4294967295; a[3154] = 4294967295; a[3155] = 4294967295; 
a[3156] = 4294967295; a[3157] = 4294967295; a[3158] = 4294967295; a[3159] = 524287; 
a[3456] = 4294967295; a[3457] = 4294967295; a[3458] = 4294967295; a[3459] = 4294967295; 
a[3460] = 4294967295; a[3461] = 4294967295; a[3462] = 4294967295; a[3463] = 4294967295; 
a[3464] = 2147483647; a[3467] = 4294901760; a[3468] = 4294967295; a[3469] = 4294967295; 
a[3470] = 4294967295; a[3471] = 4294967295; a[3472] = 4294967295; a[3473] = 4294967295; 
a[3474] = 4294967295; a[3475] = 4294967295; a[3476] = 4294967295; a[3477] = 4294967295; 
a[3478] = 4294967295; a[3479] = 268435455; a[3552] = 4294967295; a[3553] = 4294967295; 
a[3554] = 4294967295; a[3555] = 536807423; a[3556] = 1140785663; a[3744] = 4294967295; 
a[3745] = 4294967295; a[3746] = 4292870143; a[3747] = 4294967295; a[3748] = 3758096383; 
a[3749] = 3959414372; a[3750] = 4294967279; a[3751] = 4294967295; a[3752] = 3755993023; 
a[3753] = 2080374783; a[3754] = 4294835295; a[3755] = 4294967295; a[3756] = 4294967295; 
a[3757] = 4294967295; a[3758] = 4294967295; a[3759] = 4294967295; a[3760] = 4294967295; 
a[3761] = 4294967295; a[3762] = 4294967295; a[3763] = 4294967295; a[3764] = 4294967295; 
a[3765] = 4294967103; a[3766] = 4160749565; a[3767] = 4160749567; a[3768] = 4292870143; 
a[3769] = 4292870143; a[3770] = 4294934527; a[3771] = 4294934527; a[3772] = 4294966783; 
a[3773] = 4294966783; a[3774] = 4087; a[3840] = 4194303871; a[3841] = 2011; 
a[3904] = 4294967295; a[3905] = 4294967295; a[3906] = 4294967295; a[3907] = 4294967295; 
a[3908] = 4294967295; a[3909] = 4294967295; a[3910] = 31; a[3912] = 4294967295; 
a[3913] = 4294967295; a[3914] = 143; a[3952] = 4294967279; a[3953] = 184024726; 
a[3954] = 2862017156; a[3955] = 1593309078; a[3956] = 268434431; a[3957] = 268434414; 
a[3977] = 4294901760; a[3978] = 4294902783; a[3979] = 4294902783; a[3980] = 1023; 
a[4096] = 4294967295; a[4097] = 4294967295; a[4098] = 4294967295; a[4099] = 4294967295; 
a[4100] = 4294967295; a[4101] = 4294967295; a[4102] = 4294967295; a[4103] = 4294967295; 
a[4104] = 4294967295; a[4105] = 4294967295; a[4106] = 4294967295; a[4107] = 4294967295; 
a[4108] = 4294967295; a[4109] = 4294967295; a[4110] = 4294967295; a[4111] = 4294967295; 
a[4112] = 4294967295; a[4113] = 4294967295; a[4114] = 4294967295; a[4115] = 4294967295; 
a[4116] = 4294967295; a[4117] = 4294967295; a[4118] = 4294967295; a[4119] = 4294967295; 
a[4120] = 4294967295; a[4121] = 4294967295; a[4122] = 4294967295; a[4123] = 4294967295; 
a[4124] = 4294967295; a[4125] = 4294967295; a[4126] = 4294967295; a[4127] = 4294967295; 
a[4128] = 4294967295; a[4129] = 4294967295; a[4130] = 4294967295; a[4131] = 4294967295; 
a[4132] = 4294967295; a[4133] = 4294967295; a[4134] = 4294967295; a[4135] = 4294967295; 
a[4136] = 4294967295; a[4137] = 4294967295; a[4138] = 4294967295; a[4139] = 4294967295; 
a[4140] = 4294967295; a[4141] = 4294967295; a[4142] = 4294967295; a[4143] = 4294967295; 
a[4144] = 4294967295; a[4145] = 4294967295; a[4146] = 4294967295; a[4147] = 4294967295; 
a[4148] = 4294967295; a[4149] = 4294967295; a[4150] = 4294967295; a[4151] = 4294967295; 
a[4152] = 4294967295; a[4153] = 4294967295; a[4154] = 4294967295; a[4155] = 4294967295; 
a[4156] = 4294967295; a[4157] = 4294967295; a[4158] = 4294967295; a[4159] = 4294967295; 
a[4160] = 4294967295; a[4161] = 4294967295; a[4162] = 4294967295; a[4163] = 4294967295; 
a[4164] = 4294967295; a[4165] = 4294967295; a[4166] = 4294967295; a[4167] = 4294967295; 
a[4168] = 4294967295; a[4169] = 4294967295; a[4170] = 4294967295; a[4171] = 4294967295; 
a[4172] = 4294967295; a[4173] = 4294967295; a[4174] = 4294967295; a[4175] = 4294967295; 
a[4176] = 4294967295; a[4177] = 4294967295; a[4178] = 4294967295; a[4179] = 4294967295; 
a[4180] = 4294967295; a[4181] = 4294967295; a[4182] = 4294967295; a[4183] = 4294967295; 
a[4184] = 4294967295; a[4185] = 4294967295; a[4186] = 4294967295; a[4187] = 4294967295; 
a[4188] = 4294967295; a[4189] = 4294967295; a[4190] = 4294967295; a[4191] = 4294967295; 
a[4192] = 4294967295; a[4193] = 4294967295; a[4194] = 4294967295; a[4195] = 4294967295; 
a[4196] = 4294967295; a[4197] = 4294967295; a[4198] = 4294967295; a[4199] = 4294967295; 
a[4200] = 4294967295; a[4201] = 4294967295; a[4202] = 4294967295; a[4203] = 4294967295; 
a[4204] = 4294967295; a[4205] = 4294967295; a[4206] = 4294967295; a[4207] = 4294967295; 
a[4208] = 4294967295; a[4209] = 4294967295; a[4210] = 4294967295; a[4211] = 4294967295; 
a[4212] = 4294967295; a[4213] = 4294967295; a[4214] = 4294967295; a[4215] = 4294967295; 
a[4216] = 4294967295; a[4217] = 4294967295; a[4218] = 4294967295; a[4219] = 4294967295; 
a[4220] = 4294967295; a[4221] = 4294967295; a[4222] = 4294967295; a[4223] = 4294967295; 
a[4224] = 4294967295; a[4225] = 4294967295; a[4226] = 4294967295; a[4227] = 4294967295; 
a[4228] = 4294967295; a[4229] = 4294967295; a[4230] = 4294967295; a[4231] = 4294967295; 
a[4232] = 4294967295; a[4233] = 4294967295; a[4234] = 4294967295; a[4235] = 4294967295; 
a[4236] = 4294967295; a[4237] = 4294967295; a[4238] = 4294967295; a[4239] = 4294967295; 
a[4240] = 4294967295; a[4241] = 4294967295; a[4242] = 4294967295; a[4243] = 4294967295; 
a[4244] = 4294967295; a[4245] = 4294967295; a[4246] = 4294967295; a[4247] = 4294967295; 
a[4248] = 4294967295; a[4249] = 4294967295; a[4250] = 4294967295; a[4251] = 4294967295; 
a[4252] = 4294967295; a[4253] = 4294967295; a[4254] = 4294967295; a[4255] = 4294967295; 
a[4256] = 4294967295; a[4257] = 4294967295; a[4258] = 4294967295; a[4259] = 4294967295; 
a[4260] = 4294967295; a[4261] = 4294967295; a[4262] = 4294967295; a[4263] = 4294967295; 
a[4264] = 4294967295; a[4265] = 4294967295; a[4266] = 4294967295; a[4267] = 4294967295; 
a[4268] = 4294967295; a[4269] = 4294967295; a[4270] = 4294967295; a[4271] = 4294967295; 
a[4272] = 4294967295; a[4273] = 4294967295; a[4274] = 4294967295; a[4275] = 4294967295; 
a[4276] = 4294967295; a[4277] = 4294967295; a[4278] = 4294967295; a[4279] = 4294967295; 
a[4280] = 4294967295; a[4281] = 4294967295; a[4282] = 4294967295; a[4283] = 4294967295; 
a[4284] = 4294967295; a[4285] = 4294967295; a[4286] = 4294967295; a[4287] = 4294967295; 
a[4288] = 4294967295; a[4289] = 4294967295; a[4290] = 4294967295; a[4291] = 4294967295; 
a[4292] = 4294967295; a[4293] = 4294967295; a[4294] = 4294967295; a[4295] = 4294967295; 
a[4296] = 4294967295; a[4297] = 4294967295; a[4298] = 4294967295; a[4299] = 4294967295; 
a[4300] = 4294967295; a[4301] = 4294967295; a[4302] = 4294967295; a[4303] = 4294967295; 
a[4304] = 4294967295; a[4305] = 4294967295; a[4306] = 4294967295; a[4307] = 4294967295; 
a[4308] = 4294967295; a[4309] = 4294967295; a[4310] = 4294967295; a[4311] = 4294967295; 
a[4312] = 4294967295; a[4313] = 4294967295; a[4314] = 4294967295; a[4315] = 4294967295; 
a[4316] = 4294967295; a[4317] = 4294967295; a[4318] = 4294967295; a[4319] = 4294967295; 
a[4320] = 4294967295; a[4321] = 4294967295; a[4322] = 4294967295; a[4323] = 4294967295; 
a[4324] = 4294967295; a[4325] = 4294967295; a[4326] = 4294967295; a[4327] = 4294967295; 
a[4328] = 4294967295; a[4329] = 4294967295; a[4330] = 4294967295; a[4331] = 4294967295; 
a[4332] = 4294967295; a[4333] = 4294967295; a[4334] = 4294967295; a[4335] = 4294967295; 
a[4336] = 4294967295; a[4337] = 4294967295; a[4338] = 4294967295; a[4339] = 4294967295; 
a[4340] = 4294967295; a[4341] = 4294967295; a[4342] = 4294967295; a[4343] = 4294967295; 
a[4344] = 4294967295; a[4345] = 4294967295; a[4346] = 4294967295; a[4347] = 4294967295; 
a[4348] = 4294967295; a[4349] = 4294967295; a[4350] = 4294967295; a[4351] = 4294967295; 
a[4352] = 4294967295; a[4353] = 4294967295; a[4354] = 4294967295; a[4355] = 4294967295; 
a[4356] = 4294967295; a[4357] = 4294967295; a[4358] = 4294967295; a[4359] = 4294967295; 
a[4360] = 4294967295; a[4361] = 4294967295; a[4362] = 4294967295; a[4363] = 4294967295; 
a[4364] = 4294967295; a[4365] = 4294967295; a[4366] = 4294967295; a[4367] = 4294967295; 
a[4368] = 4294967295; a[4369] = 4294967295; a[4370] = 4294967295; a[4371] = 4294967295; 
a[4372] = 4294967295; a[4373] = 4294967295; a[4374] = 4294967295; a[4375] = 4294967295; 
a[4376] = 4294967295; a[4377] = 4294967295; a[4378] = 4294967295; a[4379] = 4294967295; 
a[4380] = 4294967295; a[4381] = 4294967295; a[4382] = 4294967295; a[4383] = 4294967295; 
a[4384] = 4294967295; a[4385] = 4294967295; a[4386] = 4294967295; a[4387] = 4294967295; 
a[4388] = 4294967295; a[4389] = 4294967295; a[4390] = 4294967295; a[4391] = 4294967295; 
a[4392] = 4294967295; a[4393] = 4294967295; a[4394] = 4294967295; a[4395] = 4294967295; 
a[4396] = 4294967295; a[4397] = 4294967295; a[4398] = 4294967295; a[4399] = 4294967295; 
a[4400] = 4294967295; a[4401] = 4294967295; a[4402] = 4294967295; a[4403] = 4294967295; 
a[4404] = 4294967295; a[4405] = 4294967295; a[4406] = 4294967295; a[4407] = 4294967295; 
a[4408] = 4294967295; a[4409] = 4294967295; a[4410] = 4294967295; a[4411] = 4294967295; 
a[4412] = 4294967295; a[4413] = 4294967295; a[4414] = 4294967295; a[4415] = 4294967295; 
a[4416] = 4294967295; a[4417] = 4294967295; a[4418] = 4294967295; a[4419] = 4294967295; 
a[4420] = 4294967295; a[4421] = 4294967295; a[4422] = 4294967295; a[4423] = 4294967295; 
a[4424] = 4294967295; a[4425] = 4294967295; a[4426] = 4294967295; a[4427] = 4294967295; 
a[4428] = 4294967295; a[4429] = 4294967295; a[4430] = 4294967295; a[4431] = 4294967295; 
a[4432] = 4294967295; a[4433] = 4294967295; a[4434] = 4294967295; a[4435] = 4294967295; 
a[4436] = 4294967295; a[4437] = 4294967295; a[4438] = 4294967295; a[4439] = 4294967295; 
a[4440] = 4294967295; a[4441] = 4294967295; a[4442] = 4294967295; a[4443] = 4294967295; 
a[4444] = 4294967295; a[4445] = 4294967295; a[4446] = 4294967295; a[4447] = 4294967295; 
a[4448] = 4294967295; a[4449] = 4294967295; a[4450] = 4294967295; a[4451] = 4294967295; 
a[4452] = 4294967295; a[4453] = 4294967295; a[4454] = 4294967295; a[4455] = 4294967295; 
a[4456] = 4294967295; a[4457] = 4294967295; a[4458] = 4294967295; a[4459] = 4294967295; 
a[4460] = 4294967295; a[4461] = 4294967295; a[4462] = 4294967295; a[4463] = 4294967295; 
a[4464] = 4294967295; a[4465] = 4294967295; a[4466] = 4294967295; a[4467] = 4294967295; 
a[4468] = 4294967295; a[4469] = 4294967295; a[4470] = 4294967295; a[4471] = 4294967295; 
a[4472] = 4294967295; a[4473] = 4294967295; a[4474] = 4294967295; a[4475] = 4294967295; 
a[4476] = 4294967295; a[4477] = 4294967295; a[4478] = 4294967295; a[4479] = 4294967295; 
a[4480] = 4294967295; a[4481] = 4294967295; a[4482] = 4294967295; a[4483] = 4294967295; 
a[4484] = 4294967295; a[4485] = 4294967295; a[4486] = 4294967295; a[4487] = 4294967295; 
a[4488] = 4294967295; a[4489] = 4294967295; a[4490] = 4294967295; a[4491] = 4294967295; 
a[4492] = 4294967295; a[4493] = 4294967295; a[4494] = 4294967295; a[4495] = 4294967295; 
a[4496] = 4294967295; a[4497] = 4294967295; a[4498] = 4294967295; a[4499] = 4294967295; 
a[4500] = 4294967295; a[4501] = 4294967295; a[4502] = 4294967295; a[4503] = 4294967295; 
a[4504] = 4294967295; a[4505] = 4294967295; a[4506] = 4294967295; a[4507] = 4294967295; 
a[4508] = 4294967295; a[4509] = 4294967295; a[4510] = 4294967295; a[4511] = 4294967295; 
a[4512] = 4294967295; a[4513] = 4294967295; a[4514] = 4294967295; a[4515] = 4294967295; 
a[4516] = 4294967295; a[4517] = 4294967295; a[4518] = 4294967295; a[4519] = 4294967295; 
a[4520] = 4294967295; a[4521] = 4294967295; a[4522] = 4294967295; a[4523] = 4294967295; 
a[4524] = 4294967295; a[4525] = 4294967295; a[4526] = 4294967295; a[4527] = 4294967295; 
a[4528] = 4294967295; a[4529] = 4294967295; a[4530] = 4294967295; a[4531] = 4294967295; 
a[4532] = 4294967295; a[4533] = 4294967295; a[4534] = 4294967295; a[4535] = 4294967295; 
a[4536] = 4294967295; a[4537] = 4294967295; a[4538] = 4294967295; a[4539] = 4294967295; 
a[4540] = 4294967295; a[4541] = 4294967295; a[4542] = 4294967295; a[4543] = 4294967295; 
a[4544] = 4294967295; a[4545] = 4294967295; a[4546] = 4294967295; a[4547] = 4294967295; 
a[4548] = 4294967295; a[4549] = 4294967295; a[4550] = 4294967295; a[4551] = 4294967295; 
a[4552] = 4294967295; a[4553] = 4294967295; a[4554] = 4294967295; a[4555] = 4294967295; 
a[4556] = 4294967295; a[4557] = 4294967295; a[4558] = 4294967295; a[4559] = 4294967295; 
a[4560] = 4294967295; a[4561] = 4294967295; a[4562] = 4294967295; a[4563] = 4294967295; 
a[4564] = 4294967295; a[4565] = 4294967295; a[4566] = 4294967295; a[4567] = 4294967295; 
a[4568] = 4294967295; a[4569] = 4294967295; a[4570] = 4294967295; a[4571] = 4294967295; 
a[4572] = 4294967295; a[4573] = 4294967295; a[4574] = 4294967295; a[4575] = 4294967295; 
a[4576] = 4294967295; a[4577] = 4294967295; a[4578] = 4294967295; a[4579] = 4294967295; 
a[4580] = 4294967295; a[4581] = 4294967295; a[4582] = 4294967295; a[4583] = 4294967295; 
a[4584] = 4294967295; a[4585] = 4294967295; a[4586] = 4294967295; a[4587] = 4294967295; 
a[4588] = 4294967295; a[4589] = 4294967295; a[4590] = 4294967295; a[4591] = 4294967295; 
a[4592] = 4294967295; a[4593] = 4294967295; a[4594] = 4294967295; a[4595] = 4294967295; 
a[4596] = 4294967295; a[4597] = 4294967295; a[4598] = 4294967295; a[4599] = 4294967295; 
a[4600] = 4294967295; a[4601] = 4294967295; a[4602] = 4294967295; a[4603] = 4294967295; 
a[4604] = 4294967295; a[4605] = 4294967295; a[4606] = 4294967295; a[4607] = 4294967295; 
a[4608] = 4294967295; a[4609] = 4294967295; a[4610] = 4294967295; a[4611] = 4294967295; 
a[4612] = 4294967295; a[4613] = 4294967295; a[4614] = 4294967295; a[4615] = 4294967295; 
a[4616] = 4294967295; a[4617] = 4294967295; a[4618] = 4294967295; a[4619] = 4294967295; 
a[4620] = 4294967295; a[4621] = 4294967295; a[4622] = 4294967295; a[4623] = 4294967295; 
a[4624] = 4294967295; a[4625] = 4294967295; a[4626] = 4294967295; a[4627] = 4294967295; 
a[4628] = 4294967295; a[4629] = 4294967295; a[4630] = 4294967295; a[4631] = 4294967295; 
a[4632] = 4294967295; a[4633] = 4294967295; a[4634] = 4294967295; a[4635] = 4294967295; 
a[4636] = 4294967295; a[4637] = 4294967295; a[4638] = 4294967295; a[4639] = 4294967295; 
a[4640] = 4294967295; a[4641] = 4294967295; a[4642] = 4294967295; a[4643] = 4294967295; 
a[4644] = 4294967295; a[4645] = 4294967295; a[4646] = 4294967295; a[4647] = 4294967295; 
a[4648] = 4294967295; a[4649] = 4294967295; a[4650] = 4294967295; a[4651] = 4294967295; 
a[4652] = 4294967295; a[4653] = 4294967295; a[4654] = 4294967295; a[4655] = 4294967295; 
a[4656] = 4294967295; a[4657] = 4294967295; a[4658] = 4294967295; a[4659] = 4294967295; 
a[4660] = 4294967295; a[4661] = 4294967295; a[4662] = 4294967295; a[4663] = 4294967295; 
a[4664] = 4294967295; a[4665] = 4294967295; a[4666] = 4294967295; a[4667] = 4294967295; 
a[4668] = 4294967295; a[4669] = 4294967295; a[4670] = 4294967295; a[4671] = 4294967295; 
a[4672] = 4294967295; a[4673] = 4294967295; a[4674] = 4294967295; a[4675] = 4294967295; 
a[4676] = 4294967295; a[4677] = 4294967295; a[4678] = 4294967295; a[4679] = 4294967295; 
a[4680] = 4294967295; a[4681] = 4294967295; a[4682] = 4294967295; a[4683] = 4294967295; 
a[4684] = 4294967295; a[4685] = 4294967295; a[4686] = 4294967295; a[4687] = 4294967295; 
a[4688] = 4294967295; a[4689] = 4294967295; a[4690] = 4294967295; a[4691] = 4294967295; 
a[4692] = 4294967295; a[4693] = 4294967295; a[4694] = 4294967295; a[4695] = 4294967295; 
a[4696] = 4294967295; a[4697] = 4294967295; a[4698] = 4294967295; a[4699] = 4294967295; 
a[4700] = 4294967295; a[4701] = 4294967295; a[4702] = 4294967295; a[4703] = 4294967295; 
a[4704] = 4294967295; a[4705] = 4294967295; a[4706] = 4294967295; a[4707] = 4294967295; 
a[4708] = 4294967295; a[4709] = 4294967295; a[4710] = 4294967295; a[4711] = 4294967295; 
a[4712] = 4294967295; a[4713] = 4294967295; a[4714] = 4294967295; a[4715] = 4294967295; 
a[4716] = 4294967295; a[4717] = 4294967295; a[4718] = 4294967295; a[4719] = 4294967295; 
a[4720] = 4294967295; a[4721] = 4294967295; a[4722] = 4294967295; a[4723] = 4294967295; 
a[4724] = 4294967295; a[4725] = 4294967295; a[4726] = 4294967295; a[4727] = 4294967295; 
a[4728] = 4294967295; a[4729] = 4294967295; a[4730] = 4294967295; a[4731] = 4294967295; 
a[4732] = 4294967295; a[4733] = 4294967295; a[4734] = 4294967295; a[4735] = 4294967295; 
a[4736] = 4294967295; a[4737] = 4294967295; a[4738] = 4294967295; a[4739] = 4294967295; 
a[4740] = 4294967295; a[4741] = 4294967295; a[4742] = 4294967295; a[4743] = 4294967295; 
a[4744] = 4294967295; a[4745] = 4294967295; a[4746] = 4294967295; a[4747] = 4294967295; 
a[4748] = 4294967295; a[4749] = 4294967295; a[4750] = 4294967295; a[4751] = 4294967295; 
a[4752] = 4294967295; a[4753] = 4294967295; a[4754] = 4294967295; a[4755] = 4294967295; 
a[4756] = 4294967295; a[4757] = 4294967295; a[4758] = 4294967295; a[4759] = 4294967295; 
a[4760] = 4294967295; a[4761] = 4294967295; a[4762] = 4294967295; a[4763] = 4294967295; 
a[4764] = 4294967295; a[4765] = 4294967295; a[4766] = 4294967295; a[4767] = 4294967295; 
a[4768] = 4294967295; a[4769] = 4294967295; a[4770] = 4294967295; a[4771] = 4294967295; 
a[4772] = 4294967295; a[4773] = 4294967295; a[4774] = 4294967295; a[4775] = 4294967295; 
a[4776] = 4294967295; a[4777] = 4294967295; a[4778] = 4294967295; a[4779] = 4294967295; 
a[4780] = 4294967295; a[4781] = 4294967295; a[4782] = 4294967295; a[4783] = 4294967295; 
a[4784] = 4294967295; a[4785] = 4294967295; a[4786] = 4294967295; a[4787] = 4294967295; 
a[4788] = 4294967295; a[4789] = 4294967295; a[4790] = 4294967295; a[4791] = 4294967295; 
a[4792] = 4294967295; a[4793] = 4294967295; a[4794] = 4294967295; a[4795] = 4294967295; 
a[4796] = 4294967295; a[4797] = 4294967295; a[4798] = 4294967295; a[4799] = 4294967295; 
a[4800] = 4294967295; a[4801] = 4294967295; a[4802] = 4294967295; a[4803] = 4294967295; 
a[4804] = 4294967295; a[4805] = 4294967295; a[4806] = 4294967295; a[4807] = 4294967295; 
a[4808] = 4294967295; a[4809] = 4294967295; a[4810] = 4294967295; a[4811] = 4294967295; 
a[4812] = 4294967295; a[4813] = 4294967295; a[4814] = 4294967295; a[4815] = 4294967295; 
a[4816] = 4294967295; a[4817] = 4294967295; a[4818] = 4294967295; a[4819] = 4294967295; 
a[4820] = 4294967295; a[4821] = 4294967295; a[4822] = 4294967295; a[4823] = 4294967295; 
a[4824] = 4294967295; a[4825] = 4294967295; a[4826] = 4294967295; a[4827] = 4294967295; 
a[4828] = 4294967295; a[4829] = 4294967295; a[4830] = 4294967295; a[4831] = 4294967295; 
a[4832] = 4294967295; a[4833] = 4294967295; a[4834] = 4294967295; a[4835] = 4294967295; 
a[4836] = 4294967295; a[4837] = 4294967295; a[4838] = 4294967295; a[4839] = 4294967295; 
a[4840] = 4294967295; a[4841] = 4294967295; a[4842] = 4294967295; a[4843] = 4294967295; 
a[4844] = 4294967295; a[4845] = 4294967295; a[4846] = 4294967295; a[4847] = 4294967295; 
a[4848] = 4294967295; a[4849] = 4294967295; a[4850] = 4294967295; a[4851] = 4294967295; 
a[4852] = 4294967295; a[4853] = 4294967295; a[4854] = 4294967295; a[4855] = 4294967295; 
a[4856] = 4294967295; a[4857] = 4294967295; a[4858] = 4294967295; a[4859] = 4294967295; 
a[4860] = 4294967295; a[4861] = 4294967295; a[4862] = 4294967295; a[4863] = 4294967295; 
a[4864] = 4294967295; a[4865] = 4294967295; a[4866] = 4294967295; a[4867] = 4294967295; 
a[4868] = 4294967295; a[4869] = 4294967295; a[4870] = 4294967295; a[4871] = 4294967295; 
a[4872] = 4294967295; a[4873] = 4294967295; a[4874] = 4294967295; a[4875] = 4294967295; 
a[4876] = 4294967295; a[4877] = 4294967295; a[4878] = 4294967295; a[4879] = 4294967295; 
a[4880] = 4294967295; a[4881] = 4294967295; a[4882] = 4294967295; a[4883] = 4294967295; 
a[4884] = 4294967295; a[4885] = 4294967295; a[4886] = 4294967295; a[4887] = 4294967295; 
a[4888] = 4294967295; a[4889] = 4294967295; a[4890] = 4294967295; a[4891] = 4294967295; 
a[4892] = 4294967295; a[4893] = 4294967295; a[4894] = 4294967295; a[4895] = 4294967295; 
a[4896] = 4294967295; a[4897] = 4294967295; a[4898] = 4294967295; a[4899] = 4294967295; 
a[4900] = 4294967295; a[4901] = 4294967295; a[4902] = 4294967295; a[4903] = 4294967295; 
a[4904] = 4294967295; a[4905] = 4294967295; a[4906] = 4294967295; a[4907] = 4294967295; 
a[4908] = 4294967295; a[4909] = 4294967295; a[4910] = 4294967295; a[4911] = 4294967295; 
a[4912] = 4294967295; a[4913] = 4294967295; a[4914] = 4294967295; a[4915] = 4294967295; 
a[4916] = 4294967295; a[4917] = 4294967295; a[4918] = 4294967295; a[4919] = 4294967295; 
a[4920] = 4294967295; a[4921] = 4294967295; a[4922] = 4294967295; a[4923] = 4294967295; 
a[4924] = 4294967295; a[4925] = 4294967295; a[4926] = 4294967295; a[4927] = 4294967295; 
a[4928] = 4294967295; a[4929] = 4294967295; a[4930] = 4294967295; a[4931] = 4294967295; 
a[4932] = 4294967295; a[4933] = 4294967295; a[4934] = 4294967295; a[4935] = 4294967295; 
a[4936] = 4294967295; a[4937] = 4294967295; a[4938] = 4294967295; a[4939] = 4294967295; 
a[4940] = 4294967295; a[4941] = 4294967295; a[4942] = 4294967295; a[4943] = 4294967295; 
a[4944] = 4294967295; a[4945] = 4294967295; a[4946] = 4294967295; a[4947] = 4294967295; 
a[4948] = 4294967295; a[4949] = 4294967295; a[4950] = 4294967295; a[4951] = 4294967295; 
a[4952] = 4294967295; a[4953] = 4294967295; a[4954] = 4294967295; a[4955] = 4294967295; 
a[4956] = 4294967295; a[4957] = 4294967295; a[4958] = 4294967295; a[4959] = 4294967295; 
a[4960] = 4294967295; a[4961] = 4294967295; a[4962] = 4294967295; a[4963] = 4294967295; 
a[4964] = 4294967295; a[4965] = 4294967295; a[4966] = 4294967295; a[4967] = 4294967295; 
a[4968] = 4294967295; a[4969] = 4294967295; a[4970] = 4294967295; a[4971] = 4294967295; 
a[4972] = 4294967295; a[4973] = 4294967295; a[4974] = 4294967295; a[4975] = 4294967295; 
a[4976] = 4294967295; a[4977] = 4294967295; a[4978] = 4294967295; a[4979] = 4294967295; 
a[4980] = 4294967295; a[4981] = 4294967295; a[4982] = 4294967295; a[4983] = 4294967295; 
a[4984] = 4294967295; a[4985] = 4294967295; a[4986] = 4294967295; a[4987] = 4294967295; 
a[4988] = 4294967295; a[4989] = 4294967295; a[4990] = 4294967295; a[4991] = 4294967295; 
a[4992] = 4294967295; a[4993] = 4294967295; a[4994] = 4294967295; a[4995] = 4294967295; 
a[4996] = 4294967295; a[4997] = 4294967295; a[4998] = 4294967295; a[4999] = 4294967295; 
a[5000] = 4294967295; a[5001] = 4294967295; a[5002] = 4294967295; a[5003] = 4294967295; 
a[5004] = 4294967295; a[5005] = 4294967295; a[5006] = 4294967295; a[5007] = 4294967295; 
a[5008] = 4294967295; a[5009] = 4294967295; a[5010] = 4294967295; a[5011] = 4294967295; 
a[5012] = 4294967295; a[5013] = 4294967295; a[5014] = 4294967295; a[5015] = 4294967295; 
a[5016] = 4294967295; a[5017] = 4294967295; a[5018] = 4294967295; a[5019] = 4294967295; 
a[5020] = 4294967295; a[5021] = 4294967295; a[5022] = 4294967295; a[5023] = 4294967295; 
a[5024] = 4294967295; a[5025] = 4294967295; a[5026] = 4294967295; a[5027] = 4294967295; 
a[5028] = 4294967295; a[5029] = 4294967295; a[5030] = 4294967295; a[5031] = 4294967295; 
a[5032] = 4294967295; a[5033] = 4294967295; a[5034] = 4294967295; a[5035] = 4294967295; 
a[5036] = 4294967295; a[5037] = 4294967295; a[5038] = 4294967295; a[5039] = 4294967295; 
a[5040] = 4294967295; a[5041] = 4294967295; a[5042] = 4294967295; a[5043] = 4294967295; 
a[5044] = 4294967295; a[5045] = 4294967295; a[5046] = 4294967295; a[5047] = 4294967295; 
a[5048] = 4294967295; a[5049] = 4294967295; a[5050] = 4294967295; a[5051] = 4294967295; 
a[5052] = 4294967295; a[5053] = 4294967295; a[5054] = 4294967295; a[5055] = 4294967295; 
a[5056] = 4294967295; a[5057] = 4294967295; a[5058] = 4294967295; a[5059] = 4294967295; 
a[5060] = 4294967295; a[5061] = 4294967295; a[5062] = 4294967295; a[5063] = 4294967295; 
a[5064] = 4294967295; a[5065] = 4294967295; a[5066] = 4294967295; a[5067] = 4294967295; 
a[5068] = 4294967295; a[5069] = 4294967295; a[5070] = 4294967295; a[5071] = 4294967295; 
a[5072] = 4294967295; a[5073] = 4294967295; a[5074] = 4294967295; a[5075] = 4294967295; 
a[5076] = 4294967295; a[5077] = 4294967295; a[5078] = 4294967295; a[5079] = 4294967295; 
a[5080] = 4294967295; a[5081] = 4294967295; a[5082] = 4294967295; a[5083] = 4294967295; 
a[5084] = 4294967295; a[5085] = 4294967295; a[5086] = 4294967295; a[5087] = 4294967295; 
a[5088] = 4294967295; a[5089] = 4294967295; a[5090] = 4294967295; a[5091] = 4294967295; 
a[5092] = 4294967295; a[5093] = 4294967295; a[5094] = 4294967295; a[5095] = 4294967295; 
a[5096] = 4294967295; a[5097] = 4294967295; a[5098] = 4294967295; a[5099] = 4294967295; 
a[5100] = 4294967295; a[5101] = 4294967295; a[5102] = 4294967295; a[5103] = 4294967295; 
a[5104] = 4294967295; a[5105] = 4294967295; a[5106] = 4294967295; a[5107] = 4294967295; 
a[5108] = 4294967295; a[5109] = 4294967295; a[5110] = 4294967295; a[5111] = 4294967295; 
a[5112] = 4294967295; a[5113] = 4294967295; a[5114] = 4294967295; a[5115] = 4294967295; 
a[5116] = 4294967295; a[5117] = 4294967295; a[5118] = 4294967295; a[5119] = 4294967295; 
a[5120] = 4294967295; a[5121] = 4294967295; a[5122] = 4294967295; a[5123] = 4294967295; 
a[5124] = 4294967295; a[5125] = 4294967295; a[5126] = 4294967295; a[5127] = 4294967295; 
a[5128] = 4294967295; a[5129] = 4294967295; a[5130] = 4294967295; a[5131] = 4294967295; 
a[5132] = 4294967295; a[5133] = 4294967295; a[5134] = 4294967295; a[5135] = 4294967295; 
a[5136] = 4294967295; a[5137] = 4294967295; a[5138] = 4294967295; a[5139] = 4294967295; 
a[5140] = 4294967295; a[5141] = 4294967295; a[5142] = 4294967295; a[5143] = 4294967295; 
a[5144] = 4294967295; a[5145] = 4294967295; a[5146] = 4294967295; a[5147] = 4294967295; 
a[5148] = 4294967295; a[5149] = 4294967295; a[5150] = 4294967295; a[5151] = 4294967295; 
a[5152] = 4294967295; a[5153] = 4294967295; a[5154] = 4294967295; a[5155] = 4294967295; 
a[5156] = 4294967295; a[5157] = 4294967295; a[5158] = 4294967295; a[5159] = 4294967295; 
a[5160] = 4294967295; a[5161] = 4294967295; a[5162] = 4294967295; a[5163] = 4294967295; 
a[5164] = 4294967295; a[5165] = 4294967295; a[5166] = 4294967295; a[5167] = 4294967295; 
a[5168] = 4294967295; a[5169] = 4294967295; a[5170] = 4294967295; a[5171] = 4294967295; 
a[5172] = 4294967295; a[5173] = 4294967295; a[5174] = 4294967295; a[5175] = 4294967295; 
a[5176] = 4294967295; a[5177] = 4294967295; a[5178] = 4294967295; a[5179] = 4294967295; 
a[5180] = 4294967295; a[5181] = 4294967295; a[5182] = 4294967295; a[5183] = 4294967295; 
a[5184] = 4294967295; a[5185] = 4294967295; a[5186] = 4294967295; a[5187] = 4294967295; 
a[5188] = 4294967295; a[5189] = 4294967295; a[5190] = 4294967295; a[5191] = 4294967295; 
a[5192] = 4294967295; a[5193] = 4294967295; a[5194] = 4294967295; a[5195] = 4294967295; 
a[5196] = 4294967295; a[5197] = 4294967295; a[5198] = 4294967295; a[5199] = 4294967295; 
a[5200] = 4294967295; a[5201] = 4294967295; a[5202] = 4294967295; a[5203] = 4294967295; 
a[5204] = 4294967295; a[5205] = 4294967295; a[5206] = 4294967295; a[5207] = 4294967295; 
a[5208] = 4294967295; a[5209] = 4294967295; a[5210] = 4294967295; a[5211] = 4294967295; 
a[5212] = 4294967295; a[5213] = 4294967295; a[5214] = 4294967295; a[5215] = 4294967295; 
a[5216] = 4294967295; a[5217] = 4294967295; a[5218] = 4294967295; a[5219] = 4294967295; 
a[5220] = 4294967295; a[5221] = 4294967295; a[5222] = 4294967295; a[5223] = 4294967295; 
a[5224] = 4294967295; a[5225] = 4294967295; a[5226] = 4294967295; a[5227] = 4294967295; 
a[5228] = 4294967295; a[5229] = 4294967295; a[5230] = 4294967295; a[5231] = 4294967295; 
a[5232] = 4294967295; a[5233] = 4294967295; a[5234] = 4294967295; a[5235] = 4294967295; 
a[5236] = 4294967295; a[5237] = 4294967295; a[5238] = 4294967295; a[5239] = 4294967295; 
a[5240] = 4294967295; a[5241] = 4294967295; a[5242] = 4294967295; a[5243] = 4294967295; 
a[5244] = 4294967295; a[5245] = 4294967295; a[5246] = 4294967295; a[5247] = 4294967295; 
a[5248] = 4294967295; a[5249] = 4294967295; a[5250] = 4294967295; a[5251] = 4294967295; 
a[5252] = 4294967295; a[5253] = 4294967295; a[5254] = 4294967295; a[5255] = 4294967295; 
a[5256] = 4294967295; a[5257] = 4294967295; a[5258] = 4294967295; a[5259] = 4294967295; 
a[5260] = 4294967295; a[5261] = 4294967295; a[5262] = 4294967295; a[5263] = 4294967295; 
a[5264] = 4294967295; a[5265] = 4294967295; a[5266] = 4294967295; a[5267] = 4294967295; 
a[5268] = 4294967295; a[5269] = 4294967295; a[5270] = 4294967295; a[5271] = 4294967295; 
a[5272] = 4294967295; a[5273] = 4294967295; a[5274] = 4294967295; a[5275] = 4294967295; 
a[5276] = 4294967295; a[5277] = 4294967295; a[5278] = 4294967295; a[5279] = 4294967295; 
a[5280] = 4294967295; a[5281] = 4294967295; a[5282] = 4294967295; a[5283] = 4294967295; 
a[5284] = 4294967295; a[5285] = 4294967295; a[5286] = 4294967295; a[5287] = 4294967295; 
a[5288] = 4294967295; a[5289] = 4294967295; a[5290] = 4294967295; a[5291] = 4294967295; 
a[5292] = 4294967295; a[5293] = 4294967295; a[5294] = 4294967295; a[5295] = 4294967295; 
a[5296] = 4294967295; a[5297] = 4294967295; a[5298] = 4294967295; a[5299] = 4294967295; 
a[5300] = 4294967295; a[5301] = 4294967295; a[5302] = 4294967295; a[5303] = 4294967295; 
a[5304] = 4294967295; a[5305] = 4294967295; a[5306] = 4294967295; a[5307] = 4294967295; 
a[5308] = 4294967295; a[5309] = 4294967295; a[5310] = 4294967295; a[5311] = 4294967295; 
a[5312] = 4294967295; a[5313] = 4294967295; a[5314] = 4294967295; a[5315] = 4294967295; 
a[5316] = 4294967295; a[5317] = 4294967295; a[5318] = 4294967295; a[5319] = 4294967295; 
a[5320] = 4294967295; a[5321] = 4294967295; a[5322] = 4294967295; a[5323] = 4294967295; 
a[5324] = 4294967295; a[5325] = 4294967295; a[5326] = 4294967295; a[5327] = 4294967295; 
a[5328] = 4294967295; a[5329] = 4294967295; a[5330] = 4294967295; a[5331] = 4294967295; 
a[5332] = 4294967295; a[5333] = 4294967295; a[5334] = 4294967295; a[5335] = 4294967295; 
a[5336] = 4294967295; a[5337] = 4294967295; a[5338] = 4294967295; a[5339] = 4294967295; 
a[5340] = 4294967295; a[5341] = 4294967295; a[5342] = 4294967295; a[5343] = 4294967295; 
a[5344] = 4294967295; a[5345] = 4294967295; a[5346] = 4294967295; a[5347] = 4294967295; 
a[5348] = 4294967295; a[5349] = 4294967295; a[5350] = 4294967295; a[5351] = 4294967295; 
a[5352] = 4294967295; a[5353] = 4294967295; a[5354] = 4294967295; a[5355] = 4294967295; 
a[5356] = 4294967295; a[5357] = 4294967295; a[5358] = 4294967295; a[5359] = 4294967295; 
a[5360] = 4294967295; a[5361] = 4294967295; a[5362] = 4294967295; a[5363] = 4294967295; 
a[5364] = 4294967295; a[5365] = 4294967295; a[5366] = 4294967295; a[5367] = 4294967295; 
a[5368] = 4294967295; a[5369] = 4294967295; a[5370] = 4294967295; a[5371] = 4294967295; 
a[5372] = 4294967295; a[5373] = 4294967295; a[5374] = 4294967295; a[5375] = 4294967295; 
a[5376] = 4294967295; a[5377] = 4294967295; a[5378] = 4294967295; a[5379] = 4294967295; 
a[5380] = 4294967295; a[5381] = 4294967295; a[5382] = 4294967295; a[5383] = 4294967295; 
a[5384] = 4294967295; a[5385] = 4294967295; a[5386] = 4294967295; a[5387] = 4294967295; 
a[5388] = 4294967295; a[5389] = 4294967295; a[5390] = 4294967295; a[5391] = 4294967295; 
a[5392] = 4294967295; a[5393] = 4294967295; a[5394] = 4294967295; a[5395] = 4294967295; 
a[5396] = 4294967295; a[5397] = 4294967295; a[5398] = 4294967295; a[5399] = 4294967295; 
a[5400] = 4294967295; a[5401] = 4294967295; a[5402] = 4294967295; a[5403] = 4294967295; 
a[5404] = 4294967295; a[5405] = 4294967295; a[5406] = 4294967295; a[5407] = 4294967295; 
a[5408] = 4294967295; a[5409] = 4294967295; a[5410] = 4294967295; a[5411] = 4294967295; 
a[5412] = 4294967295; a[5413] = 4294967295; a[5414] = 4294967295; a[5415] = 4294967295; 
a[5416] = 4294967295; a[5417] = 4294967295; a[5418] = 4294967295; a[5419] = 4294967295; 
a[5420] = 4294967295; a[5421] = 4294967295; a[5422] = 4294967295; a[5423] = 4294967295; 
a[5424] = 4294967295; a[5425] = 4294967295; a[5426] = 4294967295; a[5427] = 4294967295; 
a[5428] = 4294967295; a[5429] = 4294967295; a[5430] = 8388607; a[5432] = 4294967295; 
a[5433] = 4294967295; a[5434] = 4294967295; a[5435] = 4294967295; a[5436] = 4294967295; 
a[5437] = 4294967295; a[5438] = 4294967295; a[5439] = 4294967295; a[5440] = 4294967295; 
a[5441] = 4294967295; a[5442] = 4294967295; a[5443] = 4294967295; a[5444] = 4294967295; 
a[5445] = 4294967295; a[5446] = 4294967295; a[5447] = 4294967295; a[5448] = 4294967295; 
a[5449] = 4294967295; a[5450] = 4294967295; a[5451] = 4294967295; a[5452] = 4294967295; 
a[5453] = 4294967295; a[5454] = 4294967295; a[5455] = 4294967295; a[5456] = 4294967295; 
a[5457] = 4294967295; a[5458] = 4294967295; a[5459] = 4294967295; a[5460] = 4294967295; 
a[5461] = 4294967295; a[5462] = 4294967295; a[5463] = 4294967295; a[5464] = 4294967295; 
a[5465] = 4294967295; a[5466] = 4294967295; a[5467] = 4294967295; a[5468] = 4294967295; 
a[5469] = 4294967295; a[5470] = 4294967295; a[5471] = 4294967295; a[5472] = 4294967295; 
a[5473] = 4294967295; a[5474] = 4294967295; a[5475] = 4294967295; a[5476] = 4294967295; 
a[5477] = 4294967295; a[5478] = 4294967295; a[5479] = 4294967295; a[5480] = 4294967295; 
a[5481] = 4294967295; a[5482] = 4294967295; a[5483] = 4294967295; a[5484] = 4294967295; 
a[5485] = 4294967295; a[5486] = 4294967295; a[5487] = 4294967295; a[5488] = 4294967295; 
a[5489] = 4294967295; a[5490] = 4294967295; a[5491] = 4294967295; a[5492] = 4294967295; 
a[5493] = 4294967295; a[5494] = 4294967295; a[5495] = 4294967295; a[5496] = 4294967295; 
a[5497] = 4294967295; a[5498] = 4294967295; a[5499] = 4294967295; a[5500] = 4294967295; 
a[5501] = 4294967295; a[5502] = 4294967295; a[5503] = 4294967295; a[5504] = 4294967295; 
a[5505] = 4294967295; a[5506] = 4294967295; a[5507] = 4294967295; a[5508] = 4294967295; 
a[5509] = 4294967295; a[5510] = 4294967295; a[5511] = 4294967295; a[5512] = 4294967295; 
a[5513] = 4294967295; a[5514] = 4294967295; a[5515] = 4294967295; a[5516] = 4294967295; 
a[5517] = 4294967295; a[5518] = 4294967295; a[5519] = 4294967295; a[5520] = 4294967295; 
a[5521] = 4294967295; a[5522] = 4294967295; a[5523] = 4294967295; a[5524] = 4294967295; 
a[5525] = 4294967295; a[5526] = 4294967295; a[5527] = 4294967295; a[5528] = 4294967295; 
a[5529] = 4294967295; a[5530] = 4294967295; a[5531] = 4294967295; a[5532] = 4294967295; 
a[5533] = 4294967295; a[5534] = 4294967295; a[5535] = 4294967295; a[5536] = 4294967295; 
a[5537] = 4294967295; a[5538] = 4294967295; a[5539] = 4294967295; a[5540] = 4294967295; 
a[5541] = 4294967295; a[5542] = 4294967295; a[5543] = 4294967295; a[5544] = 4294967295; 
a[5545] = 4294967295; a[5546] = 4294967295; a[5547] = 4294967295; a[5548] = 4294967295; 
a[5549] = 4294967295; a[5550] = 4294967295; a[5551] = 4294967295; a[5552] = 4294967295; 
a[5553] = 4294967295; a[5554] = 4294967295; a[5555] = 4294967295; a[5556] = 4294967295; 
a[5557] = 4294967295; a[5558] = 4294967295; a[5559] = 4294967295; a[5560] = 4294967295; 
a[5561] = 2097151; a[5562] = 4294967295; a[5563] = 4294967295; a[5564] = 4294967295; 
a[5565] = 4294967295; a[5566] = 4294967295; a[5567] = 4294967295; a[5568] = 1073741823; 
a[5569] = 4294967295; a[5570] = 4294967295; a[5571] = 4294967295; a[5572] = 4294967295; 
a[5573] = 4294967295; a[5574] = 4294967295; a[5575] = 4294967295; a[5576] = 4294967295; 
a[5577] = 4294967295; a[5578] = 4294967295; a[5579] = 4294967295; a[5580] = 4294967295; 
a[5581] = 4294967295; a[5582] = 4294967295; a[5583] = 4294967295; a[5584] = 4294967295; 
a[5585] = 4294967295; a[5586] = 4294967295; a[5587] = 4294967295; a[5588] = 4294967295; 
a[5589] = 4294967295; a[5590] = 4294967295; a[5591] = 4294967295; a[5592] = 4294967295; 
a[5593] = 4294967295; a[5594] = 4294967295; a[5595] = 4294967295; a[5596] = 4294967295; 
a[5597] = 4294967295; a[5598] = 4294967295; a[5599] = 4294967295; a[5600] = 4294967295; 
a[5601] = 4294967295; a[5602] = 4294967295; a[5603] = 4294967295; a[5604] = 4294967295; 
a[5605] = 4294967295; a[5606] = 4294967295; a[5607] = 4294967295; a[5608] = 4294967295; 
a[5609] = 4294967295; a[5610] = 4294967295; a[5611] = 4294967295; a[5612] = 4294967295; 
a[5613] = 4294967295; a[5614] = 4294967295; a[5615] = 4294967295; a[5616] = 4294967295; 
a[5617] = 4294967295; a[5618] = 4294967295; a[5619] = 4294967295; a[5620] = 4294967295; 
a[5621] = 4294967295; a[5622] = 4294967295; a[5623] = 4294967295; a[5624] = 4294967295; 
a[5625] = 4294967295; a[5626] = 4294967295; a[5627] = 4294967295; a[5628] = 4294967295; 
a[5629] = 4294967295; a[5630] = 4294967295; a[5631] = 4294967295; a[5632] = 4294967295; 
a[5633] = 4294967295; a[5634] = 4294967295; a[5635] = 4294967295; a[5636] = 4294967295; 
a[5637] = 4294967295; a[5638] = 4294967295; a[5639] = 4294967295; a[5640] = 4294967295; 
a[5641] = 4294967295; a[5642] = 4294967295; a[5643] = 4294967295; a[5644] = 4294967295; 
a[5645] = 4294967295; a[5646] = 4294967295; a[5647] = 4294967295; a[5648] = 4294967295; 
a[5649] = 4294967295; a[5650] = 4294967295; a[5651] = 4294967295; a[5652] = 4294967295; 
a[5653] = 4294967295; a[5654] = 4294967295; a[5655] = 4294967295; a[5656] = 4294967295; 
a[5657] = 4294967295; a[5658] = 4294967295; a[5659] = 4294967295; a[5660] = 4294967295; 
a[5661] = 4294967295; a[5662] = 4294967295; a[5663] = 4294967295; a[5664] = 4294967295; 
a[5665] = 4294967295; a[5666] = 4294967295; a[5667] = 4294967295; a[5668] = 4294967295; 
a[5669] = 4294967295; a[5670] = 4294967295; a[5671] = 4294967295; a[5672] = 4294967295; 
a[5673] = 4294967295; a[5674] = 4294967295; a[5675] = 4294967295; a[5676] = 4294967295; 
a[5677] = 4294967295; a[5678] = 4294967295; a[5679] = 4294967295; a[5680] = 4294967295; 
a[5681] = 4294967295; a[5682] = 4294967295; a[5683] = 4294967295; a[5684] = 4294967295; 
a[5685] = 4294967295; a[5686] = 4294967295; a[5687] = 4294967295; a[5688] = 4294967295; 
a[5689] = 4294967295; a[5690] = 4294967295; a[5691] = 4294967295; a[5692] = 4294967295; 
a[5693] = 4294967295; a[5694] = 4294967295; a[5695] = 4294967295; a[5696] = 4294967295; 
a[5697] = 4294967295; a[5698] = 4294967295; a[5699] = 4294967295; a[5700] = 4294967295; 
a[5701] = 4294967295; a[5702] = 4294967295; a[5703] = 4294967295; a[5704] = 4294967295; 
a[5705] = 4294967295; a[5706] = 4294967295; a[5707] = 4294967295; a[5708] = 4294967295; 
a[5709] = 4294967295; a[5710] = 4294967295; a[5711] = 4294967295; a[5712] = 4294967295; 
a[5713] = 4294967295; a[5714] = 4294967295; a[5715] = 4294967295; a[5716] = 4294967295; 
a[5717] = 4294967295; a[5718] = 4294967295; a[5719] = 4294967295; a[5720] = 4294967295; 
a[5721] = 4294967295; a[5722] = 4294967295; a[5723] = 4294967295; a[5724] = 4294967295; 
a[5725] = 4294967295; a[5726] = 4294967295; a[5727] = 4294967295; a[5728] = 4294967295; 
a[5729] = 4294967295; a[5730] = 4294967295; a[5731] = 4294967295; a[5732] = 4294967295; 
a[5733] = 4294967295; a[5734] = 4294967295; a[5735] = 4294967295; a[5736] = 4294967295; 
a[5737] = 4294967295; a[5738] = 4294967295; a[5739] = 4294967295; a[5740] = 4294967295; 
a[5741] = 4294967295; a[5742] = 4294967295; a[5743] = 4294967295; a[5744] = 4294967295; 
a[5745] = 4294967295; a[5746] = 4294967295; a[5747] = 4294967295; a[5748] = 4294967295; 
a[5749] = 4294901763; a[5750] = 4294967295; a[5751] = 4294967295; a[5752] = 4294967295; 
a[5753] = 4294967295; a[5754] = 4294967295; a[5755] = 4294967295; a[5756] = 4294967295; 
a[5757] = 4294967295; a[5758] = 4294967295; a[5759] = 4294967295; a[5760] = 4294967295; 
a[5761] = 4294967295; a[5762] = 4294967295; a[5763] = 4294967295; a[5764] = 4294967295; 
a[5765] = 4294967295; a[5766] = 4294967295; a[5767] = 4294967295; a[5768] = 4294967295; 
a[5769] = 4294967295; a[5770] = 4294967295; a[5771] = 4294967295; a[5772] = 4294967295; 
a[5773] = 4294967295; a[5774] = 4294967295; a[5775] = 4294967295; a[5776] = 4294967295; 
a[5777] = 4294967295; a[5778] = 4294967295; a[5779] = 4294967295; a[5780] = 4294967295; 
a[5781] = 4294967295; a[5782] = 4294967295; a[5783] = 4294967295; a[5784] = 4294967295; 
a[5785] = 4294967295; a[5786] = 4294967295; a[5787] = 4294967295; a[5788] = 4294967295; 
a[5789] = 4294967295; a[5790] = 4294967295; a[5791] = 4294967295; a[5792] = 4294967295; 
a[5793] = 4294967295; a[5794] = 4294967295; a[5795] = 4294967295; a[5796] = 4294967295; 
a[5797] = 4294967295; a[5798] = 4294967295; a[5799] = 4294967295; a[5800] = 4294967295; 
a[5801] = 4294967295; a[5802] = 4294967295; a[5803] = 4294967295; a[5804] = 4294967295; 
a[5805] = 4294967295; a[5806] = 4294967295; a[5807] = 4294967295; a[5808] = 4294967295; 
a[5809] = 4294967295; a[5810] = 4294967295; a[5811] = 4294967295; a[5812] = 4294967295; 
a[5813] = 4294967295; a[5814] = 4294967295; a[5815] = 4294967295; a[5816] = 4294967295; 
a[5817] = 4294967295; a[5818] = 4294967295; a[5819] = 4294967295; a[5820] = 4294967295; 
a[5821] = 4294967295; a[5822] = 4294967295; a[5823] = 4294967295; a[5824] = 4294967295; 
a[5825] = 4294967295; a[5826] = 4294967295; a[5827] = 4294967295; a[5828] = 4294967295; 
a[5829] = 4294967295; a[5830] = 4294967295; a[5831] = 4294967295; a[5832] = 4294967295; 
a[5833] = 4294967295; a[5834] = 4294967295; a[5835] = 4294967295; a[5836] = 4294967295; 
a[5837] = 4294967295; a[5838] = 4294967295; a[5839] = 4294967295; a[5840] = 4294967295; 
a[5841] = 4294967295; a[5842] = 4294967295; a[5843] = 4294967295; a[5844] = 4294967295; 
a[5845] = 4294967295; a[5846] = 4294967295; a[5847] = 4294967295; a[5848] = 4294967295; 
a[5849] = 4294967295; a[5850] = 4294967295; a[5851] = 4294967295; a[5852] = 4294967295; 
a[5853] = 4294967295; a[5854] = 4294967295; a[5855] = 4294967295; a[5856] = 4294967295; 
a[5857] = 4294967295; a[5858] = 4294967295; a[5859] = 4294967295; a[5860] = 4294967295; 
a[5861] = 4294967295; a[5862] = 4294967295; a[5863] = 4294967295; a[5864] = 4294967295; 
a[5865] = 4294967295; a[5866] = 4294967295; a[5867] = 4294967295; a[5868] = 4294967295; 
a[5869] = 4294967295; a[5870] = 4294967295; a[5871] = 4294967295; a[5872] = 4294967295; 
a[5873] = 4294967295; a[5874] = 4294967295; a[5875] = 4294967295; a[5876] = 4294967295; 
a[5877] = 4294967295; a[5878] = 4294967295; a[5879] = 4294967295; a[5880] = 4294967295; 
a[5881] = 4294967295; a[5882] = 4294967295; a[5883] = 4294967295; a[5884] = 4294967295; 
a[5885] = 4294967295; a[5886] = 4294967295; a[5887] = 4294967295; a[5888] = 4294967295; 
a[5889] = 4294967295; a[5890] = 4294967295; a[5891] = 4294967295; a[5892] = 4294967295; 
a[5893] = 4294967295; a[5894] = 4294967295; a[5895] = 4294967295; a[5896] = 4294967295; 
a[5897] = 4294967295; a[5898] = 4294967295; a[5899] = 4294967295; a[5900] = 4294967295; 
a[5901] = 4294967295; a[5902] = 4294967295; a[5903] = 4294967295; a[5904] = 4294967295; 
a[5905] = 4294967295; a[5906] = 4294967295; a[5907] = 4294967295; a[5908] = 4294967295; 
a[5909] = 4294967295; a[5910] = 4294967295; a[5911] = 4294967295; a[5912] = 4294967295; 
a[5913] = 4294967295; a[5914] = 4294967295; a[5915] = 4294967295; a[5916] = 4294967295; 
a[5917] = 4294967295; a[5918] = 4294967295; a[5919] = 4294967295; a[5920] = 4294967295; 
a[5921] = 4294967295; a[5922] = 4294967295; a[5923] = 4294967295; a[5924] = 4294967295; 
a[5925] = 4294967295; a[5926] = 4294967295; a[5927] = 4294967295; a[5928] = 4294967295; 
a[5929] = 4294967295; a[5930] = 4294967295; a[5931] = 4294967295; a[5932] = 4294967295; 
a[5933] = 4294967295; a[5934] = 4294967295; a[5935] = 4294967295; a[5936] = 4294967295; 
a[5937] = 4294967295; a[5938] = 4294967295; a[5939] = 4294967295; a[5940] = 4294967295; 
a[5941] = 4294967295; a[5942] = 4294967295; a[5943] = 4294967295; a[5944] = 4294967295; 
a[5945] = 4294967295; a[5946] = 4294967295; a[5947] = 4294967295; a[5948] = 4294967295; 
a[5949] = 4294967295; a[5950] = 4294967295; a[5951] = 4294967295; a[5952] = 4294967295; 
a[5953] = 4294967295; a[5954] = 4294967295; a[5955] = 4294967295; a[5956] = 4294967295; 
a[5957] = 4294967295; a[5958] = 4294967295; a[5959] = 4294967295; a[5960] = 4294967295; 
a[5961] = 4294967295; a[5962] = 4294967295; a[5963] = 4294967295; a[5964] = 4294967295; 
a[5965] = 4294967295; a[5966] = 4294967295; a[5967] = 4294967295; a[5968] = 4294967295; 
a[5969] = 4294967295; a[5970] = 4294967295; a[5971] = 4294967295; a[5972] = 4294967295; 
a[5973] = 4294967295; a[5974] = 4294967295; a[5975] = 4294967295; a[5976] = 4294967295; 
a[5977] = 4294967295; a[5978] = 4294967295; a[5979] = 4294967295; a[5980] = 4294967295; 
a[5981] = 4294967295; a[5982] = 4294967295; a[5983] = 1; a[6080] = 4294967295; 
a[6081] = 4294967295; a[6082] = 4294967295; a[6083] = 4294967295; a[6084] = 4294967295; 
a[6085] = 4294967295; a[6086] = 4294967295; a[6087] = 4294967295; a[6088] = 4294967295; 
a[6089] = 4294967295; a[6090] = 4294967295; a[6091] = 4294967295; a[6092] = 4294967295; 
a[6093] = 4294967295; a[6094] = 4294967295; a[6095] = 4294967295; a[6096] = 1073741823; 

function isAlpha(c) {
	var cp = ord(c);
	var idx = Math.floor(cp / 32);
	var byt = isAlphaBitm[idx];
	if (byt) {
		var mask = Math.pow(2, cp - idx * 32);
		return (byt & mask) != 0;
	}
	return false;
}


function isAlnum(c) { return isAlpha(c) || isDigit(c); }
function isBlank(c) {
    var cp = ord(c);
    if (cp == 9)
	return true;
    if (cp == 32)
	return true;
    if (cp == 160)
	return true;
    if (cp == 5760)
	return true;
    if (cp >= 8192 && cp <= 8202)
	return true;
    if (cp == 8239)
	return true;
    if (cp == 8287)
	return true;
    if (cp == 12288)
	return true;
    
    return false;
}
function isSpace(c) {
    var cp = ord(c);
    if (cp >= 10 && cp <= 13)
	return true;
    if (cp == 133)
	return true;
    if (cp == 8232)
	return true;
    if (cp == 8233)
	return true;
    
    return isBlank(c);
}
function isXdigit(c) { return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'); }

var isPrintBitm = new Uint32Array(6097);
a = isPrintBitm;
a[1] = 4294967295; a[2] = 4294967295; a[3] = 2147483647; a[5] = 4294967295; 
a[6] = 4294967295; a[7] = 4294967295; a[8] = 4294967295; a[9] = 4294967295; 
a[10] = 4294967295; a[11] = 4294967295; a[12] = 4294967295; a[13] = 4294967295; 
a[14] = 4294967295; a[15] = 4294967295; a[16] = 4294967295; a[17] = 4294967295; 
a[18] = 4294967295; a[19] = 4294967295; a[20] = 4294967295; a[21] = 4294967295; 
a[22] = 4294967295; a[23] = 4294967295; a[24] = 4294967295; a[25] = 4294967295; 
a[26] = 4294967295; a[27] = 4244635647; a[28] = 4294957040; a[29] = 4294967291; 
a[30] = 4294967295; a[31] = 4294967295; a[32] = 4294967295; a[33] = 4294967295; 
a[34] = 4294967295; a[35] = 4294967295; a[36] = 4294967295; a[37] = 4294967295; 
a[38] = 4294967295; a[39] = 4294967295; a[40] = 4294967295; a[41] = 4294901759; 
a[42] = 4269801471; a[43] = 4294967294; a[44] = 4294895359; a[45] = 4294967295; 
a[46] = 4294902015; a[47] = 2033663; a[48] = 3758096383; a[49] = 4294967295; 
a[50] = 4294967295; a[51] = 4294967295; a[52] = 4294967295; a[53] = 4294967295; 
a[54] = 4294967295; a[55] = 4294967295; a[56] = 4294950911; a[57] = 4294967295; 
a[58] = 4294961151; a[59] = 4294967295; a[60] = 4294967295; a[61] = 262143; 
a[62] = 4294967295; a[63] = 134217727; a[64] = 4294967295; a[65] = 2147434495; 
a[66] = 1342177279; a[67] = 2047; a[69] = 1071644671; a[70] = 4293918720; 
a[71] = 4294967295; a[72] = 4294967295; a[73] = 4294967295; a[74] = 4294967295; 
a[75] = 4294967295; a[76] = 4294549487; a[77] = 4089839103; a[78] = 2961209759; 
a[79] = 1073741775; a[80] = 4294543342; a[81] = 3547201023; a[82] = 1577204103; 
a[83] = 4194240; a[84] = 4294688750; a[85] = 4092460543; a[86] = 80831; 
a[87] = 4261674959; a[88] = 4294549486; a[89] = 4092460543; a[90] = 2965387679; 
a[91] = 16777167; a[92] = 3594373100; a[93] = 3288319768; a[94] = 8469959; 
a[95] = 134217664; a[96] = 4294828015; a[97] = 3825204735; a[98] = 123747807; 
a[99] = 4278255567; a[100] = 4294828015; a[101] = 4092591615; a[102] = 1080049119; 
a[103] = 458703; a[104] = 4294828015; a[105] = 4294967295; a[106] = 4293983711; 
a[107] = 4294967247; a[108] = 4236247020; a[109] = 805044223; a[110] = 4284449919; 
a[111] = 1900480; a[112] = 4294967294; a[113] = 2281701375; a[114] = 268435455; 
a[116] = 4277151126; a[117] = 1006628014; a[118] = 4093591391; a[120] = 4294967295; 
a[121] = 4294967295; a[122] = 4294967039; a[123] = 4294844415; a[124] = 4278190079; 
a[125] = 3758096383; a[126] = 134209535; a[128] = 4294967295; a[129] = 4294967295; 
a[130] = 4294967295; a[131] = 4294967295; a[132] = 4294967295; a[133] = 4294967295; 
a[134] = 4294910143; a[135] = 4294967295; a[136] = 4294967295; a[137] = 4294967295; 
a[138] = 4294967295; a[139] = 4294967295; a[140] = 4294967295; a[141] = 4294967295; 
a[142] = 4294967295; a[143] = 4294967295; a[144] = 4294967295; a[145] = 4294967295; 
a[146] = 1031749119; a[147] = 4294967295; a[148] = 4294917631; a[149] = 2134769663; 
a[150] = 4286578493; a[151] = 4294967295; a[152] = 4282253311; a[153] = 4294967295; 
a[154] = 3892314111; a[155] = 536870911; a[156] = 67108863; a[157] = 4294967295; 
a[158] = 4294967295; a[159] = 1061158911; a[160] = 4294967295; a[161] = 4294967295; 
a[162] = 4294967295; a[163] = 4294967295; a[164] = 4294967295; a[165] = 4294967295; 
a[166] = 4294967295; a[167] = 4294967295; a[168] = 4294967295; a[169] = 4294967295; 
a[170] = 4294967295; a[171] = 4294967295; a[172] = 4294967295; a[173] = 4294967295; 
a[174] = 4294967295; a[175] = 4294967295; a[176] = 4294967295; a[177] = 4294967295; 
a[178] = 4294967295; a[179] = 4294967295; a[180] = 536870911; a[181] = 4294967295; 
a[182] = 4294967295; a[183] = 33554431; a[184] = 2088959; a[185] = 8388607; 
a[186] = 1048575; a[187] = 909311; a[188] = 4294967295; a[189] = 4294967295; 
a[190] = 1073741823; a[191] = 67044351; a[192] = 67076095; a[193] = 4294967295; 
a[194] = 4294967295; a[195] = 16777215; a[196] = 4294967295; a[197] = 4294903807; 
a[198] = 4294967295; a[199] = 4194303; a[200] = 2147483647; a[201] = 268374015; 
a[202] = 4294967281; a[203] = 2047999; a[204] = 4294967295; a[205] = 4294905855; 
a[206] = 3355378687; a[207] = 4294967295; a[208] = 3489660927; a[209] = 4294967295; 
a[210] = 2147483647; a[211] = 2684354559; a[212] = 67044351; a[213] = 2147434495; 
a[216] = 4294967295; a[217] = 4294967295; a[218] = 4294905855; a[219] = 536870911; 
a[220] = 4294967295; a[221] = 4294967295; a[222] = 4294967295; a[223] = 4027580415; 
a[224] = 4294967295; a[225] = 4177526783; a[226] = 4294960127; a[227] = 4294967295; 
a[228] = 511; a[230] = 4294902015; a[231] = 67108863; a[232] = 4294967295; 
a[233] = 4294967295; a[234] = 4294967295; a[235] = 4294967295; a[236] = 4294967295; 
a[237] = 4294967295; a[238] = 4294967295; a[239] = 4227858431; a[240] = 4294967295; 
a[241] = 4294967295; a[242] = 4294967295; a[243] = 4294967295; a[244] = 4294967295; 
a[245] = 4294967295; a[246] = 4294967295; a[247] = 4294967295; a[248] = 1061158911; 
a[249] = 4294967295; a[250] = 2868854591; a[251] = 1073741823; a[252] = 4294967295; 
a[253] = 4292870143; a[254] = 4023386079; a[255] = 2145189887; a[256] = 4294967295; 
a[257] = 4294966527; a[258] = 4294967295; a[259] = 4294180831; a[260] = 536838143; 
a[261] = 4294967295; a[262] = 4294901760; a[263] = 131071; a[264] = 4294967295; 
a[265] = 4294967295; a[266] = 4294967295; a[267] = 4294967295; a[268] = 4294905855; 
a[269] = 4294967295; a[270] = 4294967295; a[271] = 4294967295; a[272] = 4294967295; 
a[273] = 4294967295; a[274] = 4294967295; a[275] = 4294967295; a[276] = 4294967295; 
a[277] = 4294967295; a[278] = 4294967295; a[279] = 4294967295; a[280] = 4294967295; 
a[281] = 4294967295; a[282] = 4294967295; a[283] = 4294967295; a[284] = 4294967295; 
a[285] = 4294967295; a[286] = 4294967295; a[287] = 4294967295; a[288] = 4294967295; 
a[289] = 127; a[290] = 2047; a[291] = 4294967295; a[292] = 4294967295; 
a[293] = 4294967295; a[294] = 4294967295; a[295] = 4294967295; a[296] = 4294967295; 
a[297] = 4294967295; a[298] = 4294967295; a[299] = 4294967295; a[300] = 4294967295; 
a[301] = 4294967295; a[302] = 4294967295; a[303] = 4294967295; a[304] = 4294967295; 
a[305] = 4294967295; a[306] = 4294967295; a[307] = 4294967295; a[308] = 4294967295; 
a[309] = 4294967295; a[310] = 4294967295; a[311] = 4294967295; a[312] = 4294967295; 
a[313] = 4294967295; a[314] = 4294967295; a[315] = 4294967295; a[316] = 4294967295; 
a[317] = 4294967295; a[318] = 4294967295; a[319] = 4294967295; a[320] = 4294967295; 
a[321] = 4294967295; a[322] = 4294967295; a[323] = 4294967295; a[324] = 4294967295; 
a[325] = 4294967295; a[326] = 4294967295; a[327] = 4294967295; a[328] = 4294967295; 
a[329] = 4294967295; a[330] = 4294967295; a[331] = 4294967295; a[332] = 4294967295; 
a[333] = 4294967295; a[334] = 4294967295; a[335] = 4294967295; a[336] = 4294967295; 
a[337] = 4294967295; a[338] = 4294967295; a[339] = 4294967295; a[340] = 4294967295; 
a[341] = 4294967295; a[342] = 4294967295; a[343] = 4294967295; a[344] = 4294967295; 
a[345] = 4294967295; a[346] = 4294967295; a[347] = 4291821567; a[348] = 4282384383; 
a[349] = 3825205247; a[350] = 523775; a[351] = 61440; a[352] = 4294967295; 
a[353] = 4294934527; a[354] = 2147483647; a[355] = 4294967295; a[356] = 4294967295; 
a[357] = 4294967295; a[358] = 4294967295; a[359] = 4262461439; a[360] = 4294967295; 
a[361] = 4294910143; a[362] = 4294967295; a[363] = 2147582207; a[364] = 8388607; 
a[365] = 2139062143; a[366] = 2139062143; a[367] = 4294967295; a[368] = 4294967295; 
a[369] = 4294967295; a[370] = 1023; a[372] = 4227858431; a[373] = 4294967295; 
a[374] = 4294967295; a[375] = 1048575; a[376] = 4294967295; a[377] = 4294967295; 
a[378] = 4294967295; a[379] = 4294967295; a[380] = 4294967295; a[381] = 4294967295; 
a[382] = 4194303; a[383] = 268369920; a[384] = 4294967295; a[385] = 4294967295; 
a[386] = 4294967294; a[387] = 4294967295; a[388] = 4269801471; a[389] = 4294967295; 
a[390] = 4294967295; a[391] = 4294967295; a[392] = 4294967264; a[393] = 4294868991; 
a[394] = 4294967295; a[395] = 4294967295; a[396] = 4294934527; a[397] = 134217727; 
a[398] = 4294967295; a[399] = 4294901775; a[400] = 2147483647; a[401] = 4294967295; 
a[402] = 4294967295; a[403] = 4294967295; a[404] = 4294967295; a[405] = 4294967295; 
a[406] = 4294967295; a[407] = 2147483647; a[408] = 4294967295; a[409] = 4294967295; 
a[410] = 4294967295; a[411] = 4294967295; a[412] = 4294967295; a[413] = 4294967295; 
a[414] = 4294967295; a[415] = 4294967295; a[416] = 4294967295; a[417] = 4294967295; 
a[418] = 4294967295; a[419] = 4294967295; a[420] = 4294967295; a[421] = 4294967295; 
a[422] = 4294967295; a[423] = 4294967295; a[424] = 4294967295; a[425] = 4294967295; 
a[426] = 4294967295; a[427] = 4294967295; a[428] = 4294967295; a[429] = 4294967295; 
a[430] = 4294967295; a[431] = 4294967295; a[432] = 4294967295; a[433] = 4294967295; 
a[434] = 4294967295; a[435] = 4294967295; a[436] = 4294967295; a[437] = 4294967295; 
a[438] = 4294967295; a[439] = 4294967295; a[440] = 4294967295; a[441] = 4294967295; 
a[442] = 4294967295; a[443] = 4294967295; a[444] = 4294967295; a[445] = 4294967295; 
a[446] = 4294967295; a[447] = 4294967295; a[448] = 4294967295; a[449] = 4294967295; 
a[450] = 4294967295; a[451] = 4294967295; a[452] = 4294967295; a[453] = 4294967295; 
a[454] = 4294967295; a[455] = 4294967295; a[456] = 4294967295; a[457] = 4294967295; 
a[458] = 4294967295; a[459] = 4294967295; a[460] = 4294967295; a[461] = 4294967295; 
a[462] = 4294967295; a[463] = 4294967295; a[464] = 4294967295; a[465] = 4294967295; 
a[466] = 4294967295; a[467] = 4294967295; a[468] = 4294967295; a[469] = 4294967295; 
a[470] = 4294967295; a[471] = 4294967295; a[472] = 4294967295; a[473] = 4294967295; 
a[474] = 4294967295; a[475] = 4294967295; a[476] = 4294967295; a[477] = 4294967295; 
a[478] = 4294967295; a[479] = 4294967295; a[480] = 4294967295; a[481] = 4294967295; 
a[482] = 4294967295; a[483] = 4294967295; a[484] = 4294967295; a[485] = 4294967295; 
a[486] = 4294967295; a[487] = 4294967295; a[488] = 4294967295; a[489] = 4294967295; 
a[490] = 4294967295; a[491] = 4294967295; a[492] = 4294967295; a[493] = 4294967295; 
a[494] = 4294967295; a[495] = 4294967295; a[496] = 4294967295; a[497] = 4294967295; 
a[498] = 4294967295; a[499] = 4294967295; a[500] = 4294967295; a[501] = 4294967295; 
a[502] = 4294967295; a[503] = 4294967295; a[504] = 4294967295; a[505] = 4294967295; 
a[506] = 4294967295; a[507] = 4294967295; a[508] = 4294967295; a[509] = 4294967295; 
a[510] = 4294967295; a[511] = 4294967295; a[512] = 4294967295; a[513] = 4294967295; 
a[514] = 4294967295; a[515] = 4294967295; a[516] = 4294967295; a[517] = 4294967295; 
a[518] = 4294967295; a[519] = 4294967295; a[520] = 4294967295; a[521] = 4294967295; 
a[522] = 4294967295; a[523] = 4294967295; a[524] = 4294967295; a[525] = 4294967295; 
a[526] = 4294967295; a[527] = 4294967295; a[528] = 4294967295; a[529] = 4294967295; 
a[530] = 4294967295; a[531] = 4294967295; a[532] = 4294967295; a[533] = 4294967295; 
a[534] = 4294967295; a[535] = 4294967295; a[536] = 4294967295; a[537] = 4294967295; 
a[538] = 4294967295; a[539] = 4294967295; a[540] = 4294967295; a[541] = 4294967295; 
a[542] = 4294967295; a[543] = 4294967295; a[544] = 4294967295; a[545] = 4294967295; 
a[546] = 4294967295; a[547] = 4294967295; a[548] = 4294967295; a[549] = 4294967295; 
a[550] = 4294967295; a[551] = 4294967295; a[552] = 4294967295; a[553] = 4294967295; 
a[554] = 4294967295; a[555] = 4294967295; a[556] = 4294967295; a[557] = 4294967295; 
a[558] = 4294967295; a[559] = 4294967295; a[560] = 4294967295; a[561] = 4294967295; 
a[562] = 4294967295; a[563] = 4294967295; a[564] = 4294967295; a[565] = 4294967295; 
a[566] = 4294967295; a[567] = 4294967295; a[568] = 4294967295; a[569] = 4294967295; 
a[570] = 4294967295; a[571] = 4294967295; a[572] = 4294967295; a[573] = 4294967295; 
a[574] = 4294967295; a[575] = 4294967295; a[576] = 4294967295; a[577] = 4294967295; 
a[578] = 4294967295; a[579] = 4294967295; a[580] = 4294967295; a[581] = 4294967295; 
a[582] = 4294967295; a[583] = 4294967295; a[584] = 4294967295; a[585] = 4294967295; 
a[586] = 4294967295; a[587] = 4294967295; a[588] = 4294967295; a[589] = 4294967295; 
a[590] = 4294967295; a[591] = 4294967295; a[592] = 4294967295; a[593] = 4294967295; 
a[594] = 4294967295; a[595] = 4294967295; a[596] = 4294967295; a[597] = 4294967295; 
a[598] = 4294967295; a[599] = 4294967295; a[600] = 4294967295; a[601] = 4294967295; 
a[602] = 4294967295; a[603] = 4294967295; a[604] = 4294967295; a[605] = 4294967295; 
a[606] = 4294967295; a[607] = 4294967295; a[608] = 4294967295; a[609] = 4294967295; 
a[610] = 4294967295; a[611] = 4294967295; a[612] = 4294967295; a[613] = 4294967295; 
a[614] = 4294967295; a[615] = 4294967295; a[616] = 4294967295; a[617] = 4294967295; 
a[618] = 4294967295; a[619] = 4294967295; a[620] = 4294967295; a[621] = 4194303; 
a[622] = 4294967295; a[623] = 4294967295; a[624] = 4294967295; a[625] = 4294967295; 
a[626] = 4294967295; a[627] = 4294967295; a[628] = 4294967295; a[629] = 4294967295; 
a[630] = 4294967295; a[631] = 4294967295; a[632] = 4294967295; a[633] = 4294967295; 
a[634] = 4294967295; a[635] = 4294967295; a[636] = 4294967295; a[637] = 4294967295; 
a[638] = 4294967295; a[639] = 4294967295; a[640] = 4294967295; a[641] = 4294967295; 
a[642] = 4294967295; a[643] = 4294967295; a[644] = 4294967295; a[645] = 4294967295; 
a[646] = 4294967295; a[647] = 4294967295; a[648] = 4294967295; a[649] = 4294967295; 
a[650] = 4294967295; a[651] = 4294967295; a[652] = 4294967295; a[653] = 4294967295; 
a[654] = 4294967295; a[655] = 4294967295; a[656] = 4294967295; a[657] = 4294967295; 
a[658] = 4294967295; a[659] = 4294967295; a[660] = 4294967295; a[661] = 4294967295; 
a[662] = 4294967295; a[663] = 4294967295; a[664] = 4294967295; a[665] = 4294967295; 
a[666] = 4294967295; a[667] = 4294967295; a[668] = 4294967295; a[669] = 4294967295; 
a[670] = 4294967295; a[671] = 4294967295; a[672] = 4294967295; a[673] = 4294967295; 
a[674] = 4294967295; a[675] = 4294967295; a[676] = 4294967295; a[677] = 4294967295; 
a[678] = 4294967295; a[679] = 4294967295; a[680] = 4294967295; a[681] = 4294967295; 
a[682] = 4294967295; a[683] = 4294967295; a[684] = 4294967295; a[685] = 4294967295; 
a[686] = 4294967295; a[687] = 4294967295; a[688] = 4294967295; a[689] = 4294967295; 
a[690] = 4294967295; a[691] = 4294967295; a[692] = 4294967295; a[693] = 4294967295; 
a[694] = 4294967295; a[695] = 4294967295; a[696] = 4294967295; a[697] = 4294967295; 
a[698] = 4294967295; a[699] = 4294967295; a[700] = 4294967295; a[701] = 4294967295; 
a[702] = 4294967295; a[703] = 4294967295; a[704] = 4294967295; a[705] = 4294967295; 
a[706] = 4294967295; a[707] = 4294967295; a[708] = 4294967295; a[709] = 4294967295; 
a[710] = 4294967295; a[711] = 4294967295; a[712] = 4294967295; a[713] = 4294967295; 
a[714] = 4294967295; a[715] = 4294967295; a[716] = 4294967295; a[717] = 4294967295; 
a[718] = 4294967295; a[719] = 4294967295; a[720] = 4294967295; a[721] = 4294967295; 
a[722] = 4294967295; a[723] = 4294967295; a[724] = 4294967295; a[725] = 4294967295; 
a[726] = 4294967295; a[727] = 4294967295; a[728] = 4294967295; a[729] = 4294967295; 
a[730] = 4294967295; a[731] = 4294967295; a[732] = 4294967295; a[733] = 4294967295; 
a[734] = 4294967295; a[735] = 4294967295; a[736] = 4294967295; a[737] = 4294967295; 
a[738] = 4294967295; a[739] = 4294967295; a[740] = 4294967295; a[741] = 4294967295; 
a[742] = 4294967295; a[743] = 4294967295; a[744] = 4294967295; a[745] = 4294967295; 
a[746] = 4294967295; a[747] = 4294967295; a[748] = 4294967295; a[749] = 4294967295; 
a[750] = 4294967295; a[751] = 4294967295; a[752] = 4294967295; a[753] = 4294967295; 
a[754] = 4294967295; a[755] = 4294967295; a[756] = 4294967295; a[757] = 4294967295; 
a[758] = 4294967295; a[759] = 4294967295; a[760] = 4294967295; a[761] = 4294967295; 
a[762] = 4294967295; a[763] = 4294967295; a[764] = 4294967295; a[765] = 4294967295; 
a[766] = 4294967295; a[767] = 4294967295; a[768] = 4294967295; a[769] = 4294967295; 
a[770] = 4294967295; a[771] = 4294967295; a[772] = 4294967295; a[773] = 4294967295; 
a[774] = 4294967295; a[775] = 4294967295; a[776] = 4294967295; a[777] = 4294967295; 
a[778] = 4294967295; a[779] = 4294967295; a[780] = 4294967295; a[781] = 4294967295; 
a[782] = 4294967295; a[783] = 4294967295; a[784] = 4294967295; a[785] = 4294967295; 
a[786] = 4294967295; a[787] = 4294967295; a[788] = 4294967295; a[789] = 4294967295; 
a[790] = 4294967295; a[791] = 4294967295; a[792] = 4294967295; a[793] = 4294967295; 
a[794] = 4294967295; a[795] = 4294967295; a[796] = 4294967295; a[797] = 4294967295; 
a[798] = 4294967295; a[799] = 4294967295; a[800] = 4294967295; a[801] = 4294967295; 
a[802] = 4294967295; a[803] = 4294967295; a[804] = 4294967295; a[805] = 4294967295; 
a[806] = 4294967295; a[807] = 4294967295; a[808] = 4294967295; a[809] = 4294967295; 
a[810] = 4294967295; a[811] = 4294967295; a[812] = 4294967295; a[813] = 4294967295; 
a[814] = 4294967295; a[815] = 4294967295; a[816] = 4294967295; a[817] = 4294967295; 
a[818] = 4294967295; a[819] = 4294967295; a[820] = 4294967295; a[821] = 4294967295; 
a[822] = 4294967295; a[823] = 4294967295; a[824] = 4294967295; a[825] = 4294967295; 
a[826] = 4294967295; a[827] = 4294967295; a[828] = 4294967295; a[829] = 4294967295; 
a[830] = 4294967295; a[831] = 4294967295; a[832] = 4294967295; a[833] = 4294967295; 
a[834] = 4294967295; a[835] = 4294967295; a[836] = 4294967295; a[837] = 4294967295; 
a[838] = 4294967295; a[839] = 4294967295; a[840] = 4294967295; a[841] = 4294967295; 
a[842] = 4294967295; a[843] = 4294967295; a[844] = 4294967295; a[845] = 4294967295; 
a[846] = 4294967295; a[847] = 4294967295; a[848] = 4294967295; a[849] = 4294967295; 
a[850] = 4294967295; a[851] = 4294967295; a[852] = 4294967295; a[853] = 4294967295; 
a[854] = 4294967295; a[855] = 4294967295; a[856] = 4294967295; a[857] = 4294967295; 
a[858] = 4294967295; a[859] = 4294967295; a[860] = 4294967295; a[861] = 4294967295; 
a[862] = 4294967295; a[863] = 4294967295; a[864] = 4294967295; a[865] = 4294967295; 
a[866] = 4294967295; a[867] = 4294967295; a[868] = 4294967295; a[869] = 4294967295; 
a[870] = 4294967295; a[871] = 4294967295; a[872] = 4294967295; a[873] = 4294967295; 
a[874] = 4294967295; a[875] = 4294967295; a[876] = 4294967295; a[877] = 4294967295; 
a[878] = 4294967295; a[879] = 4294967295; a[880] = 4294967295; a[881] = 4294967295; 
a[882] = 4294967295; a[883] = 4294967295; a[884] = 4294967295; a[885] = 4294967295; 
a[886] = 4294967295; a[887] = 4294967295; a[888] = 4294967295; a[889] = 4294967295; 
a[890] = 4294967295; a[891] = 4294967295; a[892] = 4294967295; a[893] = 4294967295; 
a[894] = 4294967295; a[895] = 4294967295; a[896] = 4294967295; a[897] = 4294967295; 
a[898] = 4294967295; a[899] = 4294967295; a[900] = 4294967295; a[901] = 4294967295; 
a[902] = 4294967295; a[903] = 4294967295; a[904] = 4294967295; a[905] = 4294967295; 
a[906] = 4294967295; a[907] = 4294967295; a[908] = 4294967295; a[909] = 4294967295; 
a[910] = 4294967295; a[911] = 4294967295; a[912] = 4294967295; a[913] = 4294967295; 
a[914] = 4294967295; a[915] = 4294967295; a[916] = 4294967295; a[917] = 4294967295; 
a[918] = 4294967295; a[919] = 4294967295; a[920] = 4294967295; a[921] = 4294967295; 
a[922] = 4294967295; a[923] = 4294967295; a[924] = 4294967295; a[925] = 4294967295; 
a[926] = 4294967295; a[927] = 4294967295; a[928] = 4294967295; a[929] = 4294967295; 
a[930] = 4294967295; a[931] = 4294967295; a[932] = 4294967295; a[933] = 4294967295; 
a[934] = 4294967295; a[935] = 4294967295; a[936] = 4294967295; a[937] = 4294967295; 
a[938] = 4294967295; a[939] = 4294967295; a[940] = 4294967295; a[941] = 4294967295; 
a[942] = 4294967295; a[943] = 4294967295; a[944] = 4294967295; a[945] = 4294967295; 
a[946] = 4294967295; a[947] = 4294967295; a[948] = 4294967295; a[949] = 4294967295; 
a[950] = 4294967295; a[951] = 4294967295; a[952] = 4294967295; a[953] = 4294967295; 
a[954] = 4294967295; a[955] = 4294967295; a[956] = 4294967295; a[957] = 4294967295; 
a[958] = 4294967295; a[959] = 4294967295; a[960] = 4294967295; a[961] = 4294967295; 
a[962] = 4294967295; a[963] = 4294967295; a[964] = 4294967295; a[965] = 4294967295; 
a[966] = 4294967295; a[967] = 4294967295; a[968] = 4294967295; a[969] = 4294967295; 
a[970] = 4294967295; a[971] = 4294967295; a[972] = 4294967295; a[973] = 4294967295; 
a[974] = 4294967295; a[975] = 4294967295; a[976] = 4294967295; a[977] = 4294967295; 
a[978] = 4294967295; a[979] = 4294967295; a[980] = 4294967295; a[981] = 4294967295; 
a[982] = 4294967295; a[983] = 4294967295; a[984] = 4294967295; a[985] = 4294967295; 
a[986] = 4294967295; a[987] = 4294967295; a[988] = 4294967295; a[989] = 4294967295; 
a[990] = 4294967295; a[991] = 4294967295; a[992] = 4294967295; a[993] = 4294967295; 
a[994] = 4294967295; a[995] = 4294967295; a[996] = 4294967295; a[997] = 4294967295; 
a[998] = 4294967295; a[999] = 4294967295; a[1000] = 4294967295; a[1001] = 4294967295; 
a[1002] = 4294967295; a[1003] = 4294967295; a[1004] = 4294967295; a[1005] = 4294967295; 
a[1006] = 4294967295; a[1007] = 4294967295; a[1008] = 4294967295; a[1009] = 4294967295; 
a[1010] = 4294967295; a[1011] = 4294967295; a[1012] = 4294967295; a[1013] = 4294967295; 
a[1014] = 4294967295; a[1015] = 4294967295; a[1016] = 4294967295; a[1017] = 4294967295; 
a[1018] = 4294967295; a[1019] = 4294967295; a[1020] = 4294967295; a[1021] = 4294967295; 
a[1022] = 4294967295; a[1023] = 4294967295; a[1024] = 4294967295; a[1025] = 4294967295; 
a[1026] = 4294967295; a[1027] = 4294967295; a[1028] = 4294967295; a[1029] = 4294967295; 
a[1030] = 4294967295; a[1031] = 4294967295; a[1032] = 4294967295; a[1033] = 4294967295; 
a[1034] = 4294967295; a[1035] = 4294967295; a[1036] = 4294967295; a[1037] = 4294967295; 
a[1038] = 4294967295; a[1039] = 4294967295; a[1040] = 4294967295; a[1041] = 4294967295; 
a[1042] = 4294967295; a[1043] = 4294967295; a[1044] = 4294967295; a[1045] = 4294967295; 
a[1046] = 4294967295; a[1047] = 4294967295; a[1048] = 4294967295; a[1049] = 4294967295; 
a[1050] = 4294967295; a[1051] = 4294967295; a[1052] = 4294967295; a[1053] = 4294967295; 
a[1054] = 4294967295; a[1055] = 4294967295; a[1056] = 4294967295; a[1057] = 4294967295; 
a[1058] = 4294967295; a[1059] = 4294967295; a[1060] = 4294967295; a[1061] = 4294967295; 
a[1062] = 4294967295; a[1063] = 4294967295; a[1064] = 4294967295; a[1065] = 4294967295; 
a[1066] = 4294967295; a[1067] = 4294967295; a[1068] = 4294967295; a[1069] = 4294967295; 
a[1070] = 4294967295; a[1071] = 4294967295; a[1072] = 4294967295; a[1073] = 4294967295; 
a[1074] = 4294967295; a[1075] = 4294967295; a[1076] = 4294967295; a[1077] = 4294967295; 
a[1078] = 4294967295; a[1079] = 4294967295; a[1080] = 4294967295; a[1081] = 4294967295; 
a[1082] = 4294967295; a[1083] = 4294967295; a[1084] = 4294967295; a[1085] = 4294967295; 
a[1086] = 4294967295; a[1087] = 4294967295; a[1088] = 4294967295; a[1089] = 4294967295; 
a[1090] = 4294967295; a[1091] = 4294967295; a[1092] = 4294967295; a[1093] = 4294967295; 
a[1094] = 4294967295; a[1095] = 4294967295; a[1096] = 4294967295; a[1097] = 4294967295; 
a[1098] = 4294967295; a[1099] = 4294967295; a[1100] = 4294967295; a[1101] = 4294967295; 
a[1102] = 4294967295; a[1103] = 4294967295; a[1104] = 4294967295; a[1105] = 4294967295; 
a[1106] = 4294967295; a[1107] = 4294967295; a[1108] = 4294967295; a[1109] = 4294967295; 
a[1110] = 4294967295; a[1111] = 4294967295; a[1112] = 4294967295; a[1113] = 4294967295; 
a[1114] = 4294967295; a[1115] = 4294967295; a[1116] = 4294967295; a[1117] = 4294967295; 
a[1118] = 4294967295; a[1119] = 4294967295; a[1120] = 4294967295; a[1121] = 4294967295; 
a[1122] = 4294967295; a[1123] = 4294967295; a[1124] = 4294967295; a[1125] = 4294967295; 
a[1126] = 4294967295; a[1127] = 4294967295; a[1128] = 4294967295; a[1129] = 4294967295; 
a[1130] = 4294967295; a[1131] = 4294967295; a[1132] = 4294967295; a[1133] = 4294967295; 
a[1134] = 4294967295; a[1135] = 4294967295; a[1136] = 4294967295; a[1137] = 4294967295; 
a[1138] = 4294967295; a[1139] = 4294967295; a[1140] = 4294967295; a[1141] = 4294967295; 
a[1142] = 4294967295; a[1143] = 4294967295; a[1144] = 4294967295; a[1145] = 4294967295; 
a[1146] = 4294967295; a[1147] = 4294967295; a[1148] = 4294967295; a[1149] = 4294967295; 
a[1150] = 4294967295; a[1151] = 4294967295; a[1152] = 4294967295; a[1153] = 4294967295; 
a[1154] = 4294967295; a[1155] = 4294967295; a[1156] = 4294967295; a[1157] = 4294967295; 
a[1158] = 4294967295; a[1159] = 4294967295; a[1160] = 4294967295; a[1161] = 4294967295; 
a[1162] = 4294967295; a[1163] = 4294967295; a[1164] = 4294967295; a[1165] = 4294967295; 
a[1166] = 4294967295; a[1167] = 4294967295; a[1168] = 4294967295; a[1169] = 4294967295; 
a[1170] = 4294967295; a[1171] = 4294967295; a[1172] = 4294967295; a[1173] = 4294967295; 
a[1174] = 4294967295; a[1175] = 4294967295; a[1176] = 4294967295; a[1177] = 4294967295; 
a[1178] = 4294967295; a[1179] = 4294967295; a[1180] = 4294967295; a[1181] = 4294967295; 
a[1182] = 4294967295; a[1183] = 4294967295; a[1184] = 4294967295; a[1185] = 4294967295; 
a[1186] = 4294967295; a[1187] = 4294967295; a[1188] = 4294967295; a[1189] = 4294967295; 
a[1190] = 4294967295; a[1191] = 4294967295; a[1192] = 4294967295; a[1193] = 4294967295; 
a[1194] = 4294967295; a[1195] = 4294967295; a[1196] = 4294967295; a[1197] = 4294967295; 
a[1198] = 4294967295; a[1199] = 4294967295; a[1200] = 4294967295; a[1201] = 4294967295; 
a[1202] = 4294967295; a[1203] = 4294967295; a[1204] = 4294967295; a[1205] = 4294967295; 
a[1206] = 4294967295; a[1207] = 4294967295; a[1208] = 4294967295; a[1209] = 4294967295; 
a[1210] = 4294967295; a[1211] = 4294967295; a[1212] = 4294967295; a[1213] = 4294967295; 
a[1214] = 4294967295; a[1215] = 4294967295; a[1216] = 4294967295; a[1217] = 4294967295; 
a[1218] = 4294967295; a[1219] = 4294967295; a[1220] = 4294967295; a[1221] = 4294967295; 
a[1222] = 4294967295; a[1223] = 4294967295; a[1224] = 4294967295; a[1225] = 4294967295; 
a[1226] = 4294967295; a[1227] = 4294967295; a[1228] = 4294967295; a[1229] = 4294967295; 
a[1230] = 4294967295; a[1231] = 4294967295; a[1232] = 4294967295; a[1233] = 4294967295; 
a[1234] = 4294967295; a[1235] = 4294967295; a[1236] = 4294967295; a[1237] = 4294967295; 
a[1238] = 4294967295; a[1239] = 4294967295; a[1240] = 4294967295; a[1241] = 4294967295; 
a[1242] = 4294967295; a[1243] = 4294967295; a[1244] = 4294967295; a[1245] = 4294967295; 
a[1246] = 4294967295; a[1247] = 4294967295; a[1248] = 4294967295; a[1249] = 4294967295; 
a[1250] = 4294967295; a[1251] = 4294967295; a[1252] = 4294967295; a[1253] = 4294967295; 
a[1254] = 4294967295; a[1255] = 4294967295; a[1256] = 4294967295; a[1257] = 4294967295; 
a[1258] = 4294967295; a[1259] = 4294967295; a[1260] = 4294967295; a[1261] = 4294967295; 
a[1262] = 4294967295; a[1263] = 4294967295; a[1264] = 4294967295; a[1265] = 4294967295; 
a[1266] = 4294967295; a[1267] = 4294967295; a[1268] = 4294967295; a[1269] = 4294967295; 
a[1270] = 4294967295; a[1271] = 4294967295; a[1272] = 4294967295; a[1273] = 4294967295; 
a[1274] = 4294967295; a[1275] = 4294967295; a[1276] = 4294967295; a[1277] = 4294967295; 
a[1278] = 4294967295; a[1279] = 2047; a[1280] = 4294967295; a[1281] = 4294967295; 
a[1282] = 4294967295; a[1283] = 4294967295; a[1284] = 4294967295; a[1285] = 4294967295; 
a[1286] = 4294967295; a[1287] = 4294967295; a[1288] = 4294967295; a[1289] = 4294967295; 
a[1290] = 4294967295; a[1291] = 4294967295; a[1292] = 4294967295; a[1293] = 4294967295; 
a[1294] = 4294967295; a[1295] = 4294967295; a[1296] = 4294967295; a[1297] = 4294967295; 
a[1298] = 4294967295; a[1299] = 4294967295; a[1300] = 4294967295; a[1301] = 4294967295; 
a[1302] = 4294967295; a[1303] = 4294967295; a[1304] = 4294967295; a[1305] = 4294967295; 
a[1306] = 4294967295; a[1307] = 4294967295; a[1308] = 4294967295; a[1309] = 4294967295; 
a[1310] = 4294967295; a[1311] = 4294967295; a[1312] = 4294967295; a[1313] = 4294967295; 
a[1314] = 4294967295; a[1315] = 4294967295; a[1316] = 4294909951; a[1317] = 4294967295; 
a[1318] = 4294901887; a[1319] = 4294967295; a[1320] = 4294967295; a[1321] = 4294967295; 
a[1322] = 4294967295; a[1323] = 4294967295; a[1324] = 4294967295; a[1325] = 4294967295; 
a[1326] = 4294967295; a[1327] = 4294967295; a[1328] = 4294967295; a[1329] = 4095; 
a[1330] = 4294967295; a[1331] = 4294967295; a[1332] = 4294967295; a[1333] = 4294967295; 
a[1334] = 4294967295; a[1335] = 16777215; a[1336] = 4294967295; a[1337] = 4294967295; 
a[1338] = 4294967295; a[1339] = 4294967295; a[1340] = 4294967295; a[1341] = 16744447; 
a[1343] = 4286578688; a[1344] = 4294967295; a[1345] = 67047423; a[1346] = 4294967295; 
a[1347] = 16777215; a[1348] = 4294967295; a[1349] = 4294967295; a[1350] = 67092543; 
a[1351] = 1073741823; a[1352] = 4294967295; a[1353] = 4294967295; a[1354] = 2148532223; 
a[1355] = 536870911; a[1356] = 4294967295; a[1357] = 4294967295; a[1358] = 3288317951; 
a[1359] = 2147483647; a[1360] = 4294967295; a[1361] = 8388607; a[1362] = 4093591551; 
a[1363] = 4294967295; a[1364] = 4294967295; a[1365] = 4294967295; a[1366] = 4160749575; 
a[1367] = 8388607; a[1368] = 8289918; a[1369] = 4294934399; a[1370] = 4294967295; 
a[1371] = 4294901823; a[1372] = 4294967295; a[1373] = 4294967295; a[1374] = 4294967295; 
a[1375] = 67059711; a[1376] = 4294967295; a[1377] = 4294967295; a[1378] = 4294967295; 
a[1379] = 4294967295; a[1380] = 4294967295; a[1381] = 4294967295; a[1382] = 4294967295; 
a[1383] = 4294967295; a[1384] = 4294967295; a[1385] = 4294967295; a[1386] = 4294967295; 
a[1387] = 4294967295; a[1388] = 4294967295; a[1389] = 4294967295; a[1390] = 4294967295; 
a[1391] = 4294967295; a[1392] = 4294967295; a[1393] = 4294967295; a[1394] = 4294967295; 
a[1395] = 4294967295; a[1396] = 4294967295; a[1397] = 4294967295; a[1398] = 4294967295; 
a[1399] = 4294967295; a[1400] = 4294967295; a[1401] = 4294967295; a[1402] = 4294967295; 
a[1403] = 4294967295; a[1404] = 4294967295; a[1405] = 4294967295; a[1406] = 4294967295; 
a[1407] = 4294967295; a[1408] = 4294967295; a[1409] = 4294967295; a[1410] = 4294967295; 
a[1411] = 4294967295; a[1412] = 4294967295; a[1413] = 4294967295; a[1414] = 4294967295; 
a[1415] = 4294967295; a[1416] = 4294967295; a[1417] = 4294967295; a[1418] = 4294967295; 
a[1419] = 4294967295; a[1420] = 4294967295; a[1421] = 4294967295; a[1422] = 4294967295; 
a[1423] = 4294967295; a[1424] = 4294967295; a[1425] = 4294967295; a[1426] = 4294967295; 
a[1427] = 4294967295; a[1428] = 4294967295; a[1429] = 4294967295; a[1430] = 4294967295; 
a[1431] = 4294967295; a[1432] = 4294967295; a[1433] = 4294967295; a[1434] = 4294967295; 
a[1435] = 4294967295; a[1436] = 4294967295; a[1437] = 4294967295; a[1438] = 4294967295; 
a[1439] = 4294967295; a[1440] = 4294967295; a[1441] = 4294967295; a[1442] = 4294967295; 
a[1443] = 4294967295; a[1444] = 4294967295; a[1445] = 4294967295; a[1446] = 4294967295; 
a[1447] = 4294967295; a[1448] = 4294967295; a[1449] = 4294967295; a[1450] = 4294967295; 
a[1451] = 4294967295; a[1452] = 4294967295; a[1453] = 4294967295; a[1454] = 4294967295; 
a[1455] = 4294967295; a[1456] = 4294967295; a[1457] = 4294967295; a[1458] = 4294967295; 
a[1459] = 4294967295; a[1460] = 4294967295; a[1461] = 4294967295; a[1462] = 4294967295; 
a[1463] = 4294967295; a[1464] = 4294967295; a[1465] = 4294967295; a[1466] = 4294967295; 
a[1467] = 4294967295; a[1468] = 4294967295; a[1469] = 4294967295; a[1470] = 4294967295; 
a[1471] = 4294967295; a[1472] = 4294967295; a[1473] = 4294967295; a[1474] = 4294967295; 
a[1475] = 4294967295; a[1476] = 4294967295; a[1477] = 4294967295; a[1478] = 4294967295; 
a[1479] = 4294967295; a[1480] = 4294967295; a[1481] = 4294967295; a[1482] = 4294967295; 
a[1483] = 4294967295; a[1484] = 4294967295; a[1485] = 4294967295; a[1486] = 4294967295; 
a[1487] = 4294967295; a[1488] = 4294967295; a[1489] = 4294967295; a[1490] = 4294967295; 
a[1491] = 4294967295; a[1492] = 4294967295; a[1493] = 4294967295; a[1494] = 4294967295; 
a[1495] = 4294967295; a[1496] = 4294967295; a[1497] = 4294967295; a[1498] = 4294967295; 
a[1499] = 4294967295; a[1500] = 4294967295; a[1501] = 4294967295; a[1502] = 4294967295; 
a[1503] = 4294967295; a[1504] = 4294967295; a[1505] = 4294967295; a[1506] = 4294967295; 
a[1507] = 4294967295; a[1508] = 4294967295; a[1509] = 4294967295; a[1510] = 4294967295; 
a[1511] = 4294967295; a[1512] = 4294967295; a[1513] = 4294967295; a[1514] = 4294967295; 
a[1515] = 4294967295; a[1516] = 4294967295; a[1517] = 4294967295; a[1518] = 4294967295; 
a[1519] = 4294967295; a[1520] = 4294967295; a[1521] = 4294967295; a[1522] = 4294967295; 
a[1523] = 4294967295; a[1524] = 4294967295; a[1525] = 4294967295; a[1526] = 4294967295; 
a[1527] = 4294967295; a[1528] = 4294967295; a[1529] = 4294967295; a[1530] = 4294967295; 
a[1531] = 4294967295; a[1532] = 4294967295; a[1533] = 4294967295; a[1534] = 4294967295; 
a[1535] = 4294967295; a[1536] = 4294967295; a[1537] = 4294967295; a[1538] = 4294967295; 
a[1539] = 4294967295; a[1540] = 4294967295; a[1541] = 4294967295; a[1542] = 4294967295; 
a[1543] = 4294967295; a[1544] = 4294967295; a[1545] = 4294967295; a[1546] = 4294967295; 
a[1547] = 4294967295; a[1548] = 4294967295; a[1549] = 4294967295; a[1550] = 4294967295; 
a[1551] = 4294967295; a[1552] = 4294967295; a[1553] = 4294967295; a[1554] = 4294967295; 
a[1555] = 4294967295; a[1556] = 4294967295; a[1557] = 4294967295; a[1558] = 4294967295; 
a[1559] = 4294967295; a[1560] = 4294967295; a[1561] = 4294967295; a[1562] = 4294967295; 
a[1563] = 4294967295; a[1564] = 4294967295; a[1565] = 4294967295; a[1566] = 4294967295; 
a[1567] = 4294967295; a[1568] = 4294967295; a[1569] = 4294967295; a[1570] = 4294967295; 
a[1571] = 4294967295; a[1572] = 4294967295; a[1573] = 4294967295; a[1574] = 4294967295; 
a[1575] = 4294967295; a[1576] = 4294967295; a[1577] = 4294967295; a[1578] = 4294967295; 
a[1579] = 4294967295; a[1580] = 4294967295; a[1581] = 4294967295; a[1582] = 4294967295; 
a[1583] = 4294967295; a[1584] = 4294967295; a[1585] = 4294967295; a[1586] = 4294967295; 
a[1587] = 4294967295; a[1588] = 4294967295; a[1589] = 4294967295; a[1590] = 4294967295; 
a[1591] = 4294967295; a[1592] = 4294967295; a[1593] = 4294967295; a[1594] = 4294967295; 
a[1595] = 4294967295; a[1596] = 4294967295; a[1597] = 4294967295; a[1598] = 4294967295; 
a[1599] = 4294967295; a[1600] = 4294967295; a[1601] = 4294967295; a[1602] = 4294967295; 
a[1603] = 4294967295; a[1604] = 4294967295; a[1605] = 4294967295; a[1606] = 4294967295; 
a[1607] = 4294967295; a[1608] = 4294967295; a[1609] = 4294967295; a[1610] = 4294967295; 
a[1611] = 4294967295; a[1612] = 4294967295; a[1613] = 4294967295; a[1614] = 4294967295; 
a[1615] = 4294967295; a[1616] = 4294967295; a[1617] = 4294967295; a[1618] = 4294967295; 
a[1619] = 4294967295; a[1620] = 4294967295; a[1621] = 4294967295; a[1622] = 4294967295; 
a[1623] = 4294967295; a[1624] = 4294967295; a[1625] = 4294967295; a[1626] = 4294967295; 
a[1627] = 4294967295; a[1628] = 4294967295; a[1629] = 4294967295; a[1630] = 4294967295; 
a[1631] = 4294967295; a[1632] = 4294967295; a[1633] = 4294967295; a[1634] = 4294967295; 
a[1635] = 4294967295; a[1636] = 4294967295; a[1637] = 4294967295; a[1638] = 4294967295; 
a[1639] = 4294967295; a[1640] = 4294967295; a[1641] = 4294967295; a[1642] = 4294967295; 
a[1643] = 4294967295; a[1644] = 4294967295; a[1645] = 4294967295; a[1646] = 4294967295; 
a[1647] = 4294967295; a[1648] = 4294967295; a[1649] = 4294967295; a[1650] = 4294967295; 
a[1651] = 4294967295; a[1652] = 4294967295; a[1653] = 4294967295; a[1654] = 4294967295; 
a[1655] = 4294967295; a[1656] = 4294967295; a[1657] = 4294967295; a[1658] = 4294967295; 
a[1659] = 4294967295; a[1660] = 4294967295; a[1661] = 4294967295; a[1662] = 4294967295; 
a[1663] = 4294967295; a[1664] = 4294967295; a[1665] = 4294967295; a[1666] = 4294967295; 
a[1667] = 4294967295; a[1668] = 4294967295; a[1669] = 4294967295; a[1670] = 4294967295; 
a[1671] = 4294967295; a[1672] = 4294967295; a[1673] = 4294967295; a[1674] = 4294967295; 
a[1675] = 4294967295; a[1676] = 4294967295; a[1677] = 4294967295; a[1678] = 4294967295; 
a[1679] = 4294967295; a[1680] = 4294967295; a[1681] = 4294967295; a[1682] = 4294967295; 
a[1683] = 4294967295; a[1684] = 4294967295; a[1685] = 4294967295; a[1686] = 4294967295; 
a[1687] = 4294967295; a[1688] = 4294967295; a[1689] = 4294967295; a[1690] = 4294967295; 
a[1691] = 4294967295; a[1692] = 4294967295; a[1693] = 4294967295; a[1694] = 4294967295; 
a[1695] = 4294967295; a[1696] = 4294967295; a[1697] = 4294967295; a[1698] = 4294967295; 
a[1699] = 4294967295; a[1700] = 4294967295; a[1701] = 4294967295; a[1702] = 4294967295; 
a[1703] = 4294967295; a[1704] = 4294967295; a[1705] = 4294967295; a[1706] = 4294967295; 
a[1707] = 4294967295; a[1708] = 4294967295; a[1709] = 4294967295; a[1710] = 4294967295; 
a[1711] = 4294967295; a[1712] = 4294967295; a[1713] = 4294967295; a[1714] = 4294967295; 
a[1715] = 4294967295; a[1716] = 4294967295; a[1717] = 4294967295; a[1718] = 4294967295; 
a[1719] = 4294967295; a[1720] = 4294967295; a[1721] = 4294967295; a[1722] = 4294967295; 
a[1723] = 4294967295; a[1724] = 4294967295; a[1725] = 4294901775; a[1726] = 4294965375; 
a[1727] = 268435455; a[1792] = 4294967295; a[1793] = 4294967295; a[1794] = 4294967295; 
a[1795] = 4294967295; a[1796] = 4294967295; a[1797] = 4294967295; a[1798] = 4294967295; 
a[1799] = 4294967295; a[1800] = 4294967295; a[1801] = 4294967295; a[1802] = 4294967295; 
a[1803] = 4294967295; a[1804] = 4294967295; a[1805] = 4294967295; a[1806] = 4294967295; 
a[1807] = 4294967295; a[1808] = 4294967295; a[1809] = 4294967295; a[1810] = 4294967295; 
a[1811] = 4294967295; a[1812] = 4294967295; a[1813] = 4294967295; a[1814] = 4294967295; 
a[1815] = 4294967295; a[1816] = 4294967295; a[1817] = 4294967295; a[1818] = 4294967295; 
a[1819] = 4294967295; a[1820] = 4294967295; a[1821] = 4294967295; a[1822] = 4294967295; 
a[1823] = 4294967295; a[1824] = 4294967295; a[1825] = 4294967295; a[1826] = 4294967295; 
a[1827] = 4294967295; a[1828] = 4294967295; a[1829] = 4294967295; a[1830] = 4294967295; 
a[1831] = 4294967295; a[1832] = 4294967295; a[1833] = 4294967295; a[1834] = 4294967295; 
a[1835] = 4294967295; a[1836] = 4294967295; a[1837] = 4294967295; a[1838] = 4294967295; 
a[1839] = 4294967295; a[1840] = 4294967295; a[1841] = 4294967295; a[1842] = 4294967295; 
a[1843] = 4294967295; a[1844] = 4294967295; a[1845] = 4294967295; a[1846] = 4294967295; 
a[1847] = 4294967295; a[1848] = 4294967295; a[1849] = 4294967295; a[1850] = 4294967295; 
a[1851] = 4294967295; a[1852] = 4294967295; a[1853] = 4294967295; a[1854] = 4294967295; 
a[1855] = 4294967295; a[1856] = 4294967295; a[1857] = 4294967295; a[1858] = 4294967295; 
a[1859] = 4294967295; a[1860] = 4294967295; a[1861] = 4294967295; a[1862] = 4294967295; 
a[1863] = 4294967295; a[1864] = 4294967295; a[1865] = 4294967295; a[1866] = 4294967295; 
a[1867] = 4294967295; a[1868] = 4294967295; a[1869] = 4294967295; a[1870] = 4294967295; 
a[1871] = 4294967295; a[1872] = 4294967295; a[1873] = 4294967295; a[1874] = 4294967295; 
a[1875] = 4294967295; a[1876] = 4294967295; a[1877] = 4294967295; a[1878] = 4294967295; 
a[1879] = 4294967295; a[1880] = 4294967295; a[1881] = 4294967295; a[1882] = 4294967295; 
a[1883] = 4294967295; a[1884] = 4294967295; a[1885] = 4294967295; a[1886] = 4294967295; 
a[1887] = 4294967295; a[1888] = 4294967295; a[1889] = 4294967295; a[1890] = 4294967295; 
a[1891] = 4294967295; a[1892] = 4294967295; a[1893] = 4294967295; a[1894] = 4294967295; 
a[1895] = 4294967295; a[1896] = 4294967295; a[1897] = 4294967295; a[1898] = 4294967295; 
a[1899] = 4294967295; a[1900] = 4294967295; a[1901] = 4294967295; a[1902] = 4294967295; 
a[1903] = 4294967295; a[1904] = 4294967295; a[1905] = 4294967295; a[1906] = 4294967295; 
a[1907] = 4294967295; a[1908] = 4294967295; a[1909] = 4294967295; a[1910] = 4294967295; 
a[1911] = 4294967295; a[1912] = 4294967295; a[1913] = 4294967295; a[1914] = 4294967295; 
a[1915] = 4294967295; a[1916] = 4294967295; a[1917] = 4294967295; a[1918] = 4294967295; 
a[1919] = 4294967295; a[1920] = 4294967295; a[1921] = 4294967295; a[1922] = 4294967295; 
a[1923] = 4294967295; a[1924] = 4294967295; a[1925] = 4294967295; a[1926] = 4294967295; 
a[1927] = 4294967295; a[1928] = 4294967295; a[1929] = 4294967295; a[1930] = 4294967295; 
a[1931] = 4294967295; a[1932] = 4294967295; a[1933] = 4294967295; a[1934] = 4294967295; 
a[1935] = 4294967295; a[1936] = 4294967295; a[1937] = 4294967295; a[1938] = 4294967295; 
a[1939] = 4294967295; a[1940] = 4294967295; a[1941] = 4294967295; a[1942] = 4294967295; 
a[1943] = 4294967295; a[1944] = 4294967295; a[1945] = 4294967295; a[1946] = 4294967295; 
a[1947] = 4294967295; a[1948] = 4294967295; a[1949] = 4294967295; a[1950] = 4294967295; 
a[1951] = 4294967295; a[1952] = 4294967295; a[1953] = 4294967295; a[1954] = 4294967295; 
a[1955] = 4294967295; a[1956] = 4294967295; a[1957] = 4294967295; a[1958] = 4294967295; 
a[1959] = 4294967295; a[1960] = 4294967295; a[1961] = 4294967295; a[1962] = 4294967295; 
a[1963] = 4294967295; a[1964] = 4294967295; a[1965] = 4294967295; a[1966] = 4294967295; 
a[1967] = 4294967295; a[1968] = 4294967295; a[1969] = 4294967295; a[1970] = 4294967295; 
a[1971] = 4294967295; a[1972] = 4294967295; a[1973] = 4294967295; a[1974] = 4294967295; 
a[1975] = 4294967295; a[1976] = 4294967295; a[1977] = 4294967295; a[1978] = 4294967295; 
a[1979] = 4294967295; a[1980] = 4294967295; a[1981] = 4294967295; a[1982] = 4294967295; 
a[1983] = 4294967295; a[1984] = 4294967295; a[1985] = 4294967295; a[1986] = 4294967295; 
a[1987] = 4294967295; a[1988] = 4294967295; a[1989] = 4294967295; a[1990] = 4294967295; 
a[1991] = 4294967295; a[1992] = 4294967295; a[1993] = 4294967295; a[1994] = 4294967295; 
a[1995] = 4294967295; a[1996] = 4294967295; a[1997] = 4294967295; a[1998] = 4294967295; 
a[1999] = 4294967295; a[2000] = 4294967295; a[2001] = 4294967295; a[2002] = 4294967295; 
a[2003] = 4294918143; a[2004] = 4294967295; a[2005] = 4294967295; a[2006] = 67108863; 
a[2008] = 3774349439; a[2009] = 1602224127; a[2010] = 4294967259; a[2011] = 4294967295; 
a[2012] = 4294967295; a[2013] = 4294967295; a[2014] = 4294443011; a[2015] = 4294967295; 
a[2016] = 4294967295; a[2017] = 4294967295; a[2018] = 4294967295; a[2019] = 4294967295; 
a[2020] = 4294967295; a[2021] = 4294967295; a[2022] = 4294967295; a[2023] = 4294967295; 
a[2024] = 4294967295; a[2025] = 4294967295; a[2026] = 4294901760; a[2027] = 4294967295; 
a[2028] = 4294770687; a[2029] = 4294967295; a[2030] = 255; a[2031] = 1073676288; 
a[2032] = 67108863; a[2033] = 4294967295; a[2034] = 4294443007; a[2035] = 4292808575; 
a[2036] = 4294967295; a[2037] = 4294967295; a[2038] = 4294967295; a[2039] = 2684354559; 
a[2040] = 4294967294; a[2041] = 4294967295; a[2042] = 4294967295; a[2043] = 4294967295; 
a[2044] = 4294967295; a[2045] = 2147483647; a[2046] = 486341884; a[2047] = 1040220031; 
a[2048] = 4294963199; a[2049] = 3087007615; a[2050] = 1073692671; a[2052] = 4294967295; 
a[2053] = 4294967295; a[2054] = 4294967295; a[2055] = 134217727; a[2056] = 4294967175; 
a[2057] = 4287627263; a[2058] = 4294967295; a[2059] = 4294967295; a[2060] = 268402687; 
a[2061] = 1; a[2062] = 4294901760; a[2063] = 1073741823; a[2068] = 536870911; 
a[2069] = 4294967295; a[2070] = 131071; a[2071] = 268435455; a[2072] = 4294967295; 
a[2073] = 4294959119; a[2074] = 4294903807; a[2075] = 134217727; a[2076] = 3221225471; 
a[2077] = 4294967295; a[2078] = 4194063; a[2080] = 4294967295; a[2081] = 4294967295; 
a[2082] = 4294967295; a[2083] = 4294967295; a[2084] = 1073741823; a[2085] = 4294902783; 
a[2086] = 4279238655; a[2087] = 268435455; a[2088] = 4294967295; a[2089] = 4294902015; 
a[2090] = 4294967295; a[2091] = 32783; a[2096] = 4294967295; a[2097] = 4294967295; 
a[2098] = 4294967295; a[2099] = 4294967295; a[2100] = 4294967295; a[2101] = 4294967295; 
a[2102] = 4294967295; a[2103] = 4294967295; a[2104] = 4294967295; a[2105] = 8388607; 
a[2106] = 4194303; a[2107] = 255; a[2112] = 4294966591; a[2113] = 2445279231; 
a[2114] = 4290772991; a[2115] = 4294967295; a[2116] = 2147483647; a[2117] = 65408; 
a[2119] = 4164419583; a[2120] = 2415919103; a[2121] = 2214592511; a[2124] = 4294967295; 
a[2125] = 4043309055; a[2126] = 4294770687; a[2127] = 4294967295; a[2128] = 4277137519; 
a[2129] = 2265972735; a[2130] = 33489151; a[2131] = 4294967295; a[2132] = 4294967295; 
a[2134] = 4294967295; a[2135] = 8386687; a[2136] = 4294967295; a[2137] = 4265607167; 
a[2138] = 4282384383; a[2139] = 4278714367; a[2140] = 503578623; a[2141] = 65024; 
a[2144] = 4294967295; a[2145] = 4294967295; a[2146] = 511; a[2148] = 4294967295; 
a[2149] = 524287; a[2150] = 4294967295; a[2151] = 4228382719; a[2163] = 2147483647; 
a[2176] = 4294967295; a[2177] = 4294967295; a[2178] = 4294721535; a[2179] = 2147549183; 
a[2180] = 4294967295; a[2181] = 4294967295; a[2182] = 4294901763; a[2183] = 67043839; 
a[2184] = 4294967295; a[2185] = 4292870143; a[2186] = 4294901775; a[2187] = 8388607; 
a[2188] = 4294967295; a[2189] = 4294967295; a[2190] = 4294918143; a[2191] = 2097150; 
a[2192] = 4294705151; a[2193] = 2147483647; a[2196] = 3221208447; a[2197] = 4294902783; 
a[2198] = 4294967295; a[2199] = 67045375; a[2200] = 4294549487; a[2201] = 4092460543; 
a[2202] = 3766565279; a[2203] = 2039759; a[2208] = 4294967295; a[2209] = 4294967295; 
a[2210] = 738197503; a[2212] = 4294967295; a[2213] = 4294967295; a[2214] = 67043583; 
a[2220] = 4294967295; a[2221] = 4282384383; a[2222] = 1073741823; a[2224] = 4294967295; 
a[2225] = 4294967295; a[2226] = 67043359; a[2227] = 8191; a[2228] = 4294967295; 
a[2229] = 16777215; a[2230] = 1023; a[2232] = 3825205247; a[2233] = 4294905855; 
a[2245] = 4294967295; a[2246] = 4294967295; a[2247] = 2148007935; a[2256] = 4294967295; 
a[2257] = 4294967295; a[2258] = 4294902015; a[2259] = 4294967295; a[2260] = 3758096335; 
a[2261] = 7; a[2262] = 4294967295; a[2263] = 33554431; a[2272] = 4294966783; 
a[2273] = 4286578687; a[2274] = 4294901823; a[2275] = 4294909951; a[2276] = 4294770687; 
a[2277] = 8388351; a[2280] = 4294966143; a[2281] = 3028287487; a[2282] = 67043583; 
a[2304] = 4294967295; a[2305] = 4294967295; a[2306] = 4294967295; a[2307] = 4294967295; 
a[2308] = 4294967295; a[2309] = 4294967295; a[2310] = 4294967295; a[2311] = 4294967295; 
a[2312] = 4294967295; a[2313] = 4294967295; a[2314] = 4294967295; a[2315] = 4294967295; 
a[2316] = 4294967295; a[2317] = 4294967295; a[2318] = 4294967295; a[2319] = 4294967295; 
a[2320] = 4294967295; a[2321] = 4294967295; a[2322] = 4294967295; a[2323] = 4294967295; 
a[2324] = 4294967295; a[2325] = 4294967295; a[2326] = 4294967295; a[2327] = 4294967295; 
a[2328] = 4294967295; a[2329] = 4294967295; a[2330] = 4294967295; a[2331] = 4294967295; 
a[2332] = 67108863; a[2336] = 4294967295; a[2337] = 4294967295; a[2338] = 4294967295; 
a[2339] = 2064383; a[2340] = 4294967295; a[2341] = 4294967295; a[2342] = 4294967295; 
a[2343] = 4294967295; a[2344] = 4294967295; a[2345] = 4294967295; a[2346] = 15; 
a[2432] = 4294967295; a[2433] = 4294967295; a[2434] = 4294967295; a[2435] = 4294967295; 
a[2436] = 4294967295; a[2437] = 4294967295; a[2438] = 4294967295; a[2439] = 4294967295; 
a[2440] = 4294967295; a[2441] = 4294967295; a[2442] = 4294967295; a[2443] = 4294967295; 
a[2444] = 4294967295; a[2445] = 4294967295; a[2446] = 4294967295; a[2447] = 4294967295; 
a[2448] = 4294967295; a[2449] = 4294967295; a[2450] = 4294967295; a[2451] = 4294967295; 
a[2452] = 4294967295; a[2453] = 4294967295; a[2454] = 4294967295; a[2455] = 4294967295; 
a[2456] = 4294967295; a[2457] = 4294967295; a[2458] = 4294967295; a[2459] = 4294967295; 
a[2460] = 4294967295; a[2461] = 4294967295; a[2462] = 4294967295; a[2463] = 4294967295; 
a[2464] = 4294967295; a[2465] = 32767; a[2592] = 4294967295; a[2593] = 4294967295; 
a[2594] = 4294967295; a[2595] = 4294967295; a[2596] = 4294967295; a[2597] = 4294967295; 
a[2598] = 4294967295; a[2599] = 4294967295; a[2600] = 4294967295; a[2601] = 4294967295; 
a[2602] = 4294967295; a[2603] = 4294967295; a[2604] = 4294967295; a[2605] = 4294967295; 
a[2606] = 4294967295; a[2607] = 4294967295; a[2608] = 4294967295; a[2609] = 4294967295; 
a[2610] = 127; a[2880] = 4294967295; a[2881] = 4294967295; a[2882] = 4294967295; 
a[2883] = 4294967295; a[2884] = 4294967295; a[2885] = 4294967295; a[2886] = 4294967295; 
a[2887] = 4294967295; a[2888] = 4294967295; a[2889] = 4294967295; a[2890] = 4294967295; 
a[2891] = 4294967295; a[2892] = 4294967295; a[2893] = 4294967295; a[2894] = 4294967295; 
a[2895] = 4294967295; a[2896] = 4294967295; a[2897] = 33554431; a[2898] = 2147483647; 
a[2899] = 50175; a[2902] = 4294901760; a[2903] = 4145151; a[2904] = 4294967295; 
a[2905] = 4294967295; a[2906] = 4227792959; a[2907] = 3774873595; a[2908] = 65535; 
a[2936] = 4294967295; a[2937] = 4294967295; a[2938] = 4294901791; a[2939] = 2147483647; 
a[2940] = 4294934528; a[2943] = 3; a[2944] = 4294967295; a[2945] = 4294967295; 
a[2946] = 4294967295; a[2947] = 4294967295; a[2948] = 4294967295; a[2949] = 4294967295; 
a[2950] = 4294967295; a[2951] = 4294967295; a[2952] = 4294967295; a[2953] = 4294967295; 
a[2954] = 4294967295; a[2955] = 4294967295; a[2956] = 4294967295; a[2957] = 4294967295; 
a[2958] = 4294967295; a[2959] = 4294967295; a[2960] = 4294967295; a[2961] = 4294967295; 
a[2962] = 4294967295; a[2963] = 4294967295; a[2964] = 4294967295; a[2965] = 4294967295; 
a[2966] = 4294967295; a[2967] = 4294967295; a[2968] = 4294967295; a[2969] = 4294967295; 
a[2970] = 4294967295; a[2971] = 4294967295; a[2972] = 4294967295; a[2973] = 4294967295; 
a[2974] = 4294967295; a[2975] = 4294967295; a[2976] = 4294967295; a[2977] = 4294967295; 
a[2978] = 4294967295; a[2979] = 4294967295; a[2980] = 4294967295; a[2981] = 4294967295; 
a[2982] = 4294967295; a[2983] = 4294967295; a[2984] = 4294967295; a[2985] = 4294967295; 
a[2986] = 4294967295; a[2987] = 4294967295; a[2988] = 4294967295; a[2989] = 4294967295; 
a[2990] = 4294967295; a[2991] = 4294967295; a[2992] = 4294967295; a[2993] = 4294967295; 
a[2994] = 4294967295; a[2995] = 4294967295; a[2996] = 4294967295; a[2997] = 4294967295; 
a[2998] = 4294967295; a[2999] = 4294967295; a[3000] = 4294967295; a[3001] = 4294967295; 
a[3002] = 4294967295; a[3003] = 4294967295; a[3004] = 4294967295; a[3005] = 4294967295; 
a[3006] = 4294967295; a[3007] = 4294967295; a[3008] = 4294967295; a[3009] = 4294967295; 
a[3010] = 4294967295; a[3011] = 4294967295; a[3012] = 4294967295; a[3013] = 4294967295; 
a[3014] = 4294967295; a[3015] = 4294967295; a[3016] = 4294967295; a[3017] = 4294967295; 
a[3018] = 4294967295; a[3019] = 4294967295; a[3020] = 4294967295; a[3021] = 4294967295; 
a[3022] = 4294967295; a[3023] = 4294967295; a[3024] = 4294967295; a[3025] = 4294967295; 
a[3026] = 4294967295; a[3027] = 4294967295; a[3028] = 4294967295; a[3029] = 4294967295; 
a[3030] = 4294967295; a[3031] = 4294967295; a[3032] = 4294967295; a[3033] = 4294967295; 
a[3034] = 4294967295; a[3035] = 4294967295; a[3036] = 4294967295; a[3037] = 4294967295; 
a[3038] = 4294967295; a[3039] = 4294967295; a[3040] = 4294967295; a[3041] = 4294967295; 
a[3042] = 4294967295; a[3043] = 4294967295; a[3044] = 4294967295; a[3045] = 4294967295; 
a[3046] = 4294967295; a[3047] = 4294967295; a[3048] = 4294967295; a[3049] = 4294967295; 
a[3050] = 4294967295; a[3051] = 4294967295; a[3052] = 4294967295; a[3053] = 4294967295; 
a[3054] = 4294967295; a[3055] = 4294967295; a[3056] = 4294967295; a[3057] = 4294967295; 
a[3058] = 4294967295; a[3059] = 4294967295; a[3060] = 4294967295; a[3061] = 4294967295; 
a[3062] = 4294967295; a[3063] = 4294967295; a[3064] = 4294967295; a[3065] = 4294967295; 
a[3066] = 4294967295; a[3067] = 4294967295; a[3068] = 4294967295; a[3069] = 4294967295; 
a[3070] = 4294967295; a[3071] = 4294967295; a[3072] = 4294967295; a[3073] = 4294967295; 
a[3074] = 4294967295; a[3075] = 4294967295; a[3076] = 4294967295; a[3077] = 4294967295; 
a[3078] = 4294967295; a[3079] = 4294967295; a[3080] = 4294967295; a[3081] = 4294967295; 
a[3082] = 4294967295; a[3083] = 4294967295; a[3084] = 4294967295; a[3085] = 4294967295; 
a[3086] = 4294967295; a[3087] = 4294967295; a[3088] = 4294967295; a[3089] = 4294967295; 
a[3090] = 4294967295; a[3091] = 4294967295; a[3092] = 4294967295; a[3093] = 4294967295; 
a[3094] = 4294967295; a[3095] = 4294967295; a[3096] = 4294967295; a[3097] = 4294967295; 
a[3098] = 4294967295; a[3099] = 4294967295; a[3100] = 4294967295; a[3101] = 4294967295; 
a[3102] = 4294967295; a[3103] = 4294967295; a[3104] = 4294967295; a[3105] = 4294967295; 
a[3106] = 4294967295; a[3107] = 4294967295; a[3108] = 4294967295; a[3109] = 4294967295; 
a[3110] = 4294967295; a[3111] = 4294967295; a[3112] = 4294967295; a[3113] = 4294967295; 
a[3114] = 4294967295; a[3115] = 4294967295; a[3116] = 4294967295; a[3117] = 4294967295; 
a[3118] = 4294967295; a[3119] = 4294967295; a[3120] = 4294967295; a[3121] = 4294967295; 
a[3122] = 4294967295; a[3123] = 4294967295; a[3124] = 4294967295; a[3125] = 4294967295; 
a[3126] = 4294967295; a[3127] = 4294967295; a[3128] = 4294967295; a[3129] = 4294967295; 
a[3130] = 4294967295; a[3131] = 4294967295; a[3132] = 4294967295; a[3133] = 4294967295; 
a[3134] = 4294967295; a[3135] = 8191; a[3136] = 4294967295; a[3137] = 4294967295; 
a[3138] = 4294967295; a[3139] = 4294967295; a[3140] = 4294967295; a[3141] = 4294967295; 
a[3142] = 4294967295; a[3143] = 4294967295; a[3144] = 4294967295; a[3145] = 4294967295; 
a[3146] = 4294967295; a[3147] = 4294967295; a[3148] = 4294967295; a[3149] = 4294967295; 
a[3150] = 4294967295; a[3151] = 4294967295; a[3152] = 4294967295; a[3153] = 4294967295; 
a[3154] = 4294967295; a[3155] = 4294967295; a[3156] = 4294967295; a[3157] = 4294967295; 
a[3158] = 4294967295; a[3159] = 524287; a[3456] = 4294967295; a[3457] = 4294967295; 
a[3458] = 4294967295; a[3459] = 4294967295; a[3460] = 4294967295; a[3461] = 4294967295; 
a[3462] = 4294967295; a[3463] = 4294967295; a[3464] = 2147483647; a[3467] = 4294901760; 
a[3468] = 4294967295; a[3469] = 4294967295; a[3470] = 4294967295; a[3471] = 4294967295; 
a[3472] = 4294967295; a[3473] = 4294967295; a[3474] = 4294967295; a[3475] = 4294967295; 
a[3476] = 4294967295; a[3477] = 4294967295; a[3478] = 4294967295; a[3479] = 268435455; 
a[3552] = 4294967295; a[3553] = 4294967295; a[3554] = 4294967295; a[3555] = 536807423; 
a[3556] = 4093575679; a[3557] = 15; a[3712] = 4294967295; a[3713] = 4294967295; 
a[3714] = 4294967295; a[3715] = 4294967295; a[3716] = 4294967295; a[3717] = 4294967295; 
a[3718] = 4294967295; a[3719] = 4194303; a[3720] = 4294967295; a[3721] = 4294966911; 
a[3722] = 4294967295; a[3723] = 4294967295; a[3724] = 4294967295; a[3725] = 4294967295; 
a[3726] = 4294967295; a[3727] = 511; a[3728] = 4294967295; a[3729] = 4294967295; 
a[3730] = 63; a[3736] = 4294967295; a[3737] = 4294967295; a[3738] = 8388607; 
a[3739] = 262143; a[3744] = 4294967295; a[3745] = 4294967295; a[3746] = 4292870143; 
a[3747] = 4294967295; a[3748] = 3758096383; a[3749] = 3959414372; a[3750] = 4294967279; 
a[3751] = 4294967295; a[3752] = 3755993023; a[3753] = 2080374783; a[3754] = 4294835295; 
a[3755] = 4294967295; a[3756] = 4294967295; a[3757] = 4294967295; a[3758] = 4294967295; 
a[3759] = 4294967295; a[3760] = 4294967295; a[3761] = 4294967295; a[3762] = 4294967295; 
a[3763] = 4294967295; a[3764] = 4294967295; a[3765] = 4294967103; a[3766] = 4294967295; 
a[3767] = 4294967295; a[3768] = 4294967295; a[3769] = 4294967295; a[3770] = 4294967295; 
a[3771] = 4294967295; a[3772] = 4294967295; a[3773] = 4294967295; a[3774] = 4294955007; 
a[3775] = 4294967295; a[3776] = 4294967295; a[3777] = 4294967295; a[3778] = 4294967295; 
a[3779] = 4294967295; a[3780] = 4294967295; a[3781] = 4294967295; a[3782] = 4294967295; 
a[3783] = 4294967295; a[3784] = 4294967295; a[3785] = 4294967295; a[3786] = 4294967295; 
a[3787] = 4294967295; a[3788] = 4294967295; a[3789] = 4294967295; a[3790] = 4294967295; 
a[3791] = 4294967295; a[3792] = 4294967295; a[3793] = 4294967295; a[3794] = 4294967295; 
a[3795] = 4294967295; a[3796] = 4160753663; a[3797] = 65534; a[3840] = 4194303871; 
a[3841] = 2011; a[3904] = 4294967295; a[3905] = 4294967295; a[3906] = 4294967295; 
a[3907] = 4294967295; a[3908] = 4294967295; a[3909] = 4294967295; a[3910] = 8388511; 
a[3912] = 4294967295; a[3913] = 4294967295; a[3914] = 3288270847; a[3952] = 4294967279; 
a[3953] = 184024726; a[3954] = 2862017156; a[3955] = 1593309078; a[3956] = 268434431; 
a[3957] = 268434414; a[3959] = 196608; a[3968] = 4294967295; a[3969] = 4294905855; 
a[3970] = 4294967295; a[3971] = 4294967295; a[3972] = 1048575; a[3973] = 4294868991; 
a[3974] = 4294901758; a[3975] = 4194303; a[3976] = 4294909951; a[3977] = 4294934527; 
a[3978] = 4294967295; a[3979] = 4294905855; a[3980] = 4294967295; a[3981] = 8191; 
a[3983] = 4294967232; a[3984] = 4294901767; a[3985] = 268435455; a[3986] = 197119; 
a[3987] = 63; a[3992] = 4294967295; a[3993] = 4294967295; a[3994] = 4294967295; 
a[3995] = 4294967295; a[3996] = 4294967295; a[3997] = 4294967295; a[3998] = 4294967295; 
a[3999] = 4294967295; a[4000] = 4294967295; a[4001] = 4294967295; a[4002] = 4294967295; 
a[4003] = 4294967295; a[4004] = 4294967295; a[4005] = 4294967295; a[4006] = 4294967295; 
a[4007] = 4294967295; a[4008] = 4294967295; a[4009] = 4294967295; a[4010] = 4294967295; 
a[4011] = 4294967295; a[4012] = 4294967295; a[4013] = 4294967295; a[4014] = 4294967295; 
a[4015] = 4294967295; a[4016] = 4294967295; a[4017] = 4294967295; a[4018] = 4294967295; 
a[4019] = 4294967295; a[4020] = 4294967295; a[4021] = 4294967295; a[4022] = 2097151; 
a[4023] = 33497087; a[4024] = 4294967295; a[4025] = 4294967295; a[4026] = 4294967295; 
a[4027] = 1048575; a[4028] = 4294967295; a[4029] = 4294967295; a[4030] = 2097151; 
a[4032] = 4294905855; a[4033] = 4294967295; a[4034] = 67043583; a[4035] = 4294967295; 
a[4036] = 4294902015; a[4037] = 16383; a[4040] = 4294905855; a[4041] = 2147483647; 
a[4042] = 4294909951; a[4043] = 4095; a[4044] = 16777215; a[4046] = 4294901761; 
a[4047] = 127; a[4096] = 4294967295; a[4097] = 4294967295; a[4098] = 4294967295; 
a[4099] = 4294967295; a[4100] = 4294967295; a[4101] = 4294967295; a[4102] = 4294967295; 
a[4103] = 4294967295; a[4104] = 4294967295; a[4105] = 4294967295; a[4106] = 4294967295; 
a[4107] = 4294967295; a[4108] = 4294967295; a[4109] = 4294967295; a[4110] = 4294967295; 
a[4111] = 4294967295; a[4112] = 4294967295; a[4113] = 4294967295; a[4114] = 4294967295; 
a[4115] = 4294967295; a[4116] = 4294967295; a[4117] = 4294967295; a[4118] = 4294967295; 
a[4119] = 4294967295; a[4120] = 4294967295; a[4121] = 4294967295; a[4122] = 4294967295; 
a[4123] = 4294967295; a[4124] = 4294967295; a[4125] = 4294967295; a[4126] = 4294967295; 
a[4127] = 4294967295; a[4128] = 4294967295; a[4129] = 4294967295; a[4130] = 4294967295; 
a[4131] = 4294967295; a[4132] = 4294967295; a[4133] = 4294967295; a[4134] = 4294967295; 
a[4135] = 4294967295; a[4136] = 4294967295; a[4137] = 4294967295; a[4138] = 4294967295; 
a[4139] = 4294967295; a[4140] = 4294967295; a[4141] = 4294967295; a[4142] = 4294967295; 
a[4143] = 4294967295; a[4144] = 4294967295; a[4145] = 4294967295; a[4146] = 4294967295; 
a[4147] = 4294967295; a[4148] = 4294967295; a[4149] = 4294967295; a[4150] = 4294967295; 
a[4151] = 4294967295; a[4152] = 4294967295; a[4153] = 4294967295; a[4154] = 4294967295; 
a[4155] = 4294967295; a[4156] = 4294967295; a[4157] = 4294967295; a[4158] = 4294967295; 
a[4159] = 4294967295; a[4160] = 4294967295; a[4161] = 4294967295; a[4162] = 4294967295; 
a[4163] = 4294967295; a[4164] = 4294967295; a[4165] = 4294967295; a[4166] = 4294967295; 
a[4167] = 4294967295; a[4168] = 4294967295; a[4169] = 4294967295; a[4170] = 4294967295; 
a[4171] = 4294967295; a[4172] = 4294967295; a[4173] = 4294967295; a[4174] = 4294967295; 
a[4175] = 4294967295; a[4176] = 4294967295; a[4177] = 4294967295; a[4178] = 4294967295; 
a[4179] = 4294967295; a[4180] = 4294967295; a[4181] = 4294967295; a[4182] = 4294967295; 
a[4183] = 4294967295; a[4184] = 4294967295; a[4185] = 4294967295; a[4186] = 4294967295; 
a[4187] = 4294967295; a[4188] = 4294967295; a[4189] = 4294967295; a[4190] = 4294967295; 
a[4191] = 4294967295; a[4192] = 4294967295; a[4193] = 4294967295; a[4194] = 4294967295; 
a[4195] = 4294967295; a[4196] = 4294967295; a[4197] = 4294967295; a[4198] = 4294967295; 
a[4199] = 4294967295; a[4200] = 4294967295; a[4201] = 4294967295; a[4202] = 4294967295; 
a[4203] = 4294967295; a[4204] = 4294967295; a[4205] = 4294967295; a[4206] = 4294967295; 
a[4207] = 4294967295; a[4208] = 4294967295; a[4209] = 4294967295; a[4210] = 4294967295; 
a[4211] = 4294967295; a[4212] = 4294967295; a[4213] = 4294967295; a[4214] = 4294967295; 
a[4215] = 4294967295; a[4216] = 4294967295; a[4217] = 4294967295; a[4218] = 4294967295; 
a[4219] = 4294967295; a[4220] = 4294967295; a[4221] = 4294967295; a[4222] = 4294967295; 
a[4223] = 4294967295; a[4224] = 4294967295; a[4225] = 4294967295; a[4226] = 4294967295; 
a[4227] = 4294967295; a[4228] = 4294967295; a[4229] = 4294967295; a[4230] = 4294967295; 
a[4231] = 4294967295; a[4232] = 4294967295; a[4233] = 4294967295; a[4234] = 4294967295; 
a[4235] = 4294967295; a[4236] = 4294967295; a[4237] = 4294967295; a[4238] = 4294967295; 
a[4239] = 4294967295; a[4240] = 4294967295; a[4241] = 4294967295; a[4242] = 4294967295; 
a[4243] = 4294967295; a[4244] = 4294967295; a[4245] = 4294967295; a[4246] = 4294967295; 
a[4247] = 4294967295; a[4248] = 4294967295; a[4249] = 4294967295; a[4250] = 4294967295; 
a[4251] = 4294967295; a[4252] = 4294967295; a[4253] = 4294967295; a[4254] = 4294967295; 
a[4255] = 4294967295; a[4256] = 4294967295; a[4257] = 4294967295; a[4258] = 4294967295; 
a[4259] = 4294967295; a[4260] = 4294967295; a[4261] = 4294967295; a[4262] = 4294967295; 
a[4263] = 4294967295; a[4264] = 4294967295; a[4265] = 4294967295; a[4266] = 4294967295; 
a[4267] = 4294967295; a[4268] = 4294967295; a[4269] = 4294967295; a[4270] = 4294967295; 
a[4271] = 4294967295; a[4272] = 4294967295; a[4273] = 4294967295; a[4274] = 4294967295; 
a[4275] = 4294967295; a[4276] = 4294967295; a[4277] = 4294967295; a[4278] = 4294967295; 
a[4279] = 4294967295; a[4280] = 4294967295; a[4281] = 4294967295; a[4282] = 4294967295; 
a[4283] = 4294967295; a[4284] = 4294967295; a[4285] = 4294967295; a[4286] = 4294967295; 
a[4287] = 4294967295; a[4288] = 4294967295; a[4289] = 4294967295; a[4290] = 4294967295; 
a[4291] = 4294967295; a[4292] = 4294967295; a[4293] = 4294967295; a[4294] = 4294967295; 
a[4295] = 4294967295; a[4296] = 4294967295; a[4297] = 4294967295; a[4298] = 4294967295; 
a[4299] = 4294967295; a[4300] = 4294967295; a[4301] = 4294967295; a[4302] = 4294967295; 
a[4303] = 4294967295; a[4304] = 4294967295; a[4305] = 4294967295; a[4306] = 4294967295; 
a[4307] = 4294967295; a[4308] = 4294967295; a[4309] = 4294967295; a[4310] = 4294967295; 
a[4311] = 4294967295; a[4312] = 4294967295; a[4313] = 4294967295; a[4314] = 4294967295; 
a[4315] = 4294967295; a[4316] = 4294967295; a[4317] = 4294967295; a[4318] = 4294967295; 
a[4319] = 4294967295; a[4320] = 4294967295; a[4321] = 4294967295; a[4322] = 4294967295; 
a[4323] = 4294967295; a[4324] = 4294967295; a[4325] = 4294967295; a[4326] = 4294967295; 
a[4327] = 4294967295; a[4328] = 4294967295; a[4329] = 4294967295; a[4330] = 4294967295; 
a[4331] = 4294967295; a[4332] = 4294967295; a[4333] = 4294967295; a[4334] = 4294967295; 
a[4335] = 4294967295; a[4336] = 4294967295; a[4337] = 4294967295; a[4338] = 4294967295; 
a[4339] = 4294967295; a[4340] = 4294967295; a[4341] = 4294967295; a[4342] = 4294967295; 
a[4343] = 4294967295; a[4344] = 4294967295; a[4345] = 4294967295; a[4346] = 4294967295; 
a[4347] = 4294967295; a[4348] = 4294967295; a[4349] = 4294967295; a[4350] = 4294967295; 
a[4351] = 4294967295; a[4352] = 4294967295; a[4353] = 4294967295; a[4354] = 4294967295; 
a[4355] = 4294967295; a[4356] = 4294967295; a[4357] = 4294967295; a[4358] = 4294967295; 
a[4359] = 4294967295; a[4360] = 4294967295; a[4361] = 4294967295; a[4362] = 4294967295; 
a[4363] = 4294967295; a[4364] = 4294967295; a[4365] = 4294967295; a[4366] = 4294967295; 
a[4367] = 4294967295; a[4368] = 4294967295; a[4369] = 4294967295; a[4370] = 4294967295; 
a[4371] = 4294967295; a[4372] = 4294967295; a[4373] = 4294967295; a[4374] = 4294967295; 
a[4375] = 4294967295; a[4376] = 4294967295; a[4377] = 4294967295; a[4378] = 4294967295; 
a[4379] = 4294967295; a[4380] = 4294967295; a[4381] = 4294967295; a[4382] = 4294967295; 
a[4383] = 4294967295; a[4384] = 4294967295; a[4385] = 4294967295; a[4386] = 4294967295; 
a[4387] = 4294967295; a[4388] = 4294967295; a[4389] = 4294967295; a[4390] = 4294967295; 
a[4391] = 4294967295; a[4392] = 4294967295; a[4393] = 4294967295; a[4394] = 4294967295; 
a[4395] = 4294967295; a[4396] = 4294967295; a[4397] = 4294967295; a[4398] = 4294967295; 
a[4399] = 4294967295; a[4400] = 4294967295; a[4401] = 4294967295; a[4402] = 4294967295; 
a[4403] = 4294967295; a[4404] = 4294967295; a[4405] = 4294967295; a[4406] = 4294967295; 
a[4407] = 4294967295; a[4408] = 4294967295; a[4409] = 4294967295; a[4410] = 4294967295; 
a[4411] = 4294967295; a[4412] = 4294967295; a[4413] = 4294967295; a[4414] = 4294967295; 
a[4415] = 4294967295; a[4416] = 4294967295; a[4417] = 4294967295; a[4418] = 4294967295; 
a[4419] = 4294967295; a[4420] = 4294967295; a[4421] = 4294967295; a[4422] = 4294967295; 
a[4423] = 4294967295; a[4424] = 4294967295; a[4425] = 4294967295; a[4426] = 4294967295; 
a[4427] = 4294967295; a[4428] = 4294967295; a[4429] = 4294967295; a[4430] = 4294967295; 
a[4431] = 4294967295; a[4432] = 4294967295; a[4433] = 4294967295; a[4434] = 4294967295; 
a[4435] = 4294967295; a[4436] = 4294967295; a[4437] = 4294967295; a[4438] = 4294967295; 
a[4439] = 4294967295; a[4440] = 4294967295; a[4441] = 4294967295; a[4442] = 4294967295; 
a[4443] = 4294967295; a[4444] = 4294967295; a[4445] = 4294967295; a[4446] = 4294967295; 
a[4447] = 4294967295; a[4448] = 4294967295; a[4449] = 4294967295; a[4450] = 4294967295; 
a[4451] = 4294967295; a[4452] = 4294967295; a[4453] = 4294967295; a[4454] = 4294967295; 
a[4455] = 4294967295; a[4456] = 4294967295; a[4457] = 4294967295; a[4458] = 4294967295; 
a[4459] = 4294967295; a[4460] = 4294967295; a[4461] = 4294967295; a[4462] = 4294967295; 
a[4463] = 4294967295; a[4464] = 4294967295; a[4465] = 4294967295; a[4466] = 4294967295; 
a[4467] = 4294967295; a[4468] = 4294967295; a[4469] = 4294967295; a[4470] = 4294967295; 
a[4471] = 4294967295; a[4472] = 4294967295; a[4473] = 4294967295; a[4474] = 4294967295; 
a[4475] = 4294967295; a[4476] = 4294967295; a[4477] = 4294967295; a[4478] = 4294967295; 
a[4479] = 4294967295; a[4480] = 4294967295; a[4481] = 4294967295; a[4482] = 4294967295; 
a[4483] = 4294967295; a[4484] = 4294967295; a[4485] = 4294967295; a[4486] = 4294967295; 
a[4487] = 4294967295; a[4488] = 4294967295; a[4489] = 4294967295; a[4490] = 4294967295; 
a[4491] = 4294967295; a[4492] = 4294967295; a[4493] = 4294967295; a[4494] = 4294967295; 
a[4495] = 4294967295; a[4496] = 4294967295; a[4497] = 4294967295; a[4498] = 4294967295; 
a[4499] = 4294967295; a[4500] = 4294967295; a[4501] = 4294967295; a[4502] = 4294967295; 
a[4503] = 4294967295; a[4504] = 4294967295; a[4505] = 4294967295; a[4506] = 4294967295; 
a[4507] = 4294967295; a[4508] = 4294967295; a[4509] = 4294967295; a[4510] = 4294967295; 
a[4511] = 4294967295; a[4512] = 4294967295; a[4513] = 4294967295; a[4514] = 4294967295; 
a[4515] = 4294967295; a[4516] = 4294967295; a[4517] = 4294967295; a[4518] = 4294967295; 
a[4519] = 4294967295; a[4520] = 4294967295; a[4521] = 4294967295; a[4522] = 4294967295; 
a[4523] = 4294967295; a[4524] = 4294967295; a[4525] = 4294967295; a[4526] = 4294967295; 
a[4527] = 4294967295; a[4528] = 4294967295; a[4529] = 4294967295; a[4530] = 4294967295; 
a[4531] = 4294967295; a[4532] = 4294967295; a[4533] = 4294967295; a[4534] = 4294967295; 
a[4535] = 4294967295; a[4536] = 4294967295; a[4537] = 4294967295; a[4538] = 4294967295; 
a[4539] = 4294967295; a[4540] = 4294967295; a[4541] = 4294967295; a[4542] = 4294967295; 
a[4543] = 4294967295; a[4544] = 4294967295; a[4545] = 4294967295; a[4546] = 4294967295; 
a[4547] = 4294967295; a[4548] = 4294967295; a[4549] = 4294967295; a[4550] = 4294967295; 
a[4551] = 4294967295; a[4552] = 4294967295; a[4553] = 4294967295; a[4554] = 4294967295; 
a[4555] = 4294967295; a[4556] = 4294967295; a[4557] = 4294967295; a[4558] = 4294967295; 
a[4559] = 4294967295; a[4560] = 4294967295; a[4561] = 4294967295; a[4562] = 4294967295; 
a[4563] = 4294967295; a[4564] = 4294967295; a[4565] = 4294967295; a[4566] = 4294967295; 
a[4567] = 4294967295; a[4568] = 4294967295; a[4569] = 4294967295; a[4570] = 4294967295; 
a[4571] = 4294967295; a[4572] = 4294967295; a[4573] = 4294967295; a[4574] = 4294967295; 
a[4575] = 4294967295; a[4576] = 4294967295; a[4577] = 4294967295; a[4578] = 4294967295; 
a[4579] = 4294967295; a[4580] = 4294967295; a[4581] = 4294967295; a[4582] = 4294967295; 
a[4583] = 4294967295; a[4584] = 4294967295; a[4585] = 4294967295; a[4586] = 4294967295; 
a[4587] = 4294967295; a[4588] = 4294967295; a[4589] = 4294967295; a[4590] = 4294967295; 
a[4591] = 4294967295; a[4592] = 4294967295; a[4593] = 4294967295; a[4594] = 4294967295; 
a[4595] = 4294967295; a[4596] = 4294967295; a[4597] = 4294967295; a[4598] = 4294967295; 
a[4599] = 4294967295; a[4600] = 4294967295; a[4601] = 4294967295; a[4602] = 4294967295; 
a[4603] = 4294967295; a[4604] = 4294967295; a[4605] = 4294967295; a[4606] = 4294967295; 
a[4607] = 4294967295; a[4608] = 4294967295; a[4609] = 4294967295; a[4610] = 4294967295; 
a[4611] = 4294967295; a[4612] = 4294967295; a[4613] = 4294967295; a[4614] = 4294967295; 
a[4615] = 4294967295; a[4616] = 4294967295; a[4617] = 4294967295; a[4618] = 4294967295; 
a[4619] = 4294967295; a[4620] = 4294967295; a[4621] = 4294967295; a[4622] = 4294967295; 
a[4623] = 4294967295; a[4624] = 4294967295; a[4625] = 4294967295; a[4626] = 4294967295; 
a[4627] = 4294967295; a[4628] = 4294967295; a[4629] = 4294967295; a[4630] = 4294967295; 
a[4631] = 4294967295; a[4632] = 4294967295; a[4633] = 4294967295; a[4634] = 4294967295; 
a[4635] = 4294967295; a[4636] = 4294967295; a[4637] = 4294967295; a[4638] = 4294967295; 
a[4639] = 4294967295; a[4640] = 4294967295; a[4641] = 4294967295; a[4642] = 4294967295; 
a[4643] = 4294967295; a[4644] = 4294967295; a[4645] = 4294967295; a[4646] = 4294967295; 
a[4647] = 4294967295; a[4648] = 4294967295; a[4649] = 4294967295; a[4650] = 4294967295; 
a[4651] = 4294967295; a[4652] = 4294967295; a[4653] = 4294967295; a[4654] = 4294967295; 
a[4655] = 4294967295; a[4656] = 4294967295; a[4657] = 4294967295; a[4658] = 4294967295; 
a[4659] = 4294967295; a[4660] = 4294967295; a[4661] = 4294967295; a[4662] = 4294967295; 
a[4663] = 4294967295; a[4664] = 4294967295; a[4665] = 4294967295; a[4666] = 4294967295; 
a[4667] = 4294967295; a[4668] = 4294967295; a[4669] = 4294967295; a[4670] = 4294967295; 
a[4671] = 4294967295; a[4672] = 4294967295; a[4673] = 4294967295; a[4674] = 4294967295; 
a[4675] = 4294967295; a[4676] = 4294967295; a[4677] = 4294967295; a[4678] = 4294967295; 
a[4679] = 4294967295; a[4680] = 4294967295; a[4681] = 4294967295; a[4682] = 4294967295; 
a[4683] = 4294967295; a[4684] = 4294967295; a[4685] = 4294967295; a[4686] = 4294967295; 
a[4687] = 4294967295; a[4688] = 4294967295; a[4689] = 4294967295; a[4690] = 4294967295; 
a[4691] = 4294967295; a[4692] = 4294967295; a[4693] = 4294967295; a[4694] = 4294967295; 
a[4695] = 4294967295; a[4696] = 4294967295; a[4697] = 4294967295; a[4698] = 4294967295; 
a[4699] = 4294967295; a[4700] = 4294967295; a[4701] = 4294967295; a[4702] = 4294967295; 
a[4703] = 4294967295; a[4704] = 4294967295; a[4705] = 4294967295; a[4706] = 4294967295; 
a[4707] = 4294967295; a[4708] = 4294967295; a[4709] = 4294967295; a[4710] = 4294967295; 
a[4711] = 4294967295; a[4712] = 4294967295; a[4713] = 4294967295; a[4714] = 4294967295; 
a[4715] = 4294967295; a[4716] = 4294967295; a[4717] = 4294967295; a[4718] = 4294967295; 
a[4719] = 4294967295; a[4720] = 4294967295; a[4721] = 4294967295; a[4722] = 4294967295; 
a[4723] = 4294967295; a[4724] = 4294967295; a[4725] = 4294967295; a[4726] = 4294967295; 
a[4727] = 4294967295; a[4728] = 4294967295; a[4729] = 4294967295; a[4730] = 4294967295; 
a[4731] = 4294967295; a[4732] = 4294967295; a[4733] = 4294967295; a[4734] = 4294967295; 
a[4735] = 4294967295; a[4736] = 4294967295; a[4737] = 4294967295; a[4738] = 4294967295; 
a[4739] = 4294967295; a[4740] = 4294967295; a[4741] = 4294967295; a[4742] = 4294967295; 
a[4743] = 4294967295; a[4744] = 4294967295; a[4745] = 4294967295; a[4746] = 4294967295; 
a[4747] = 4294967295; a[4748] = 4294967295; a[4749] = 4294967295; a[4750] = 4294967295; 
a[4751] = 4294967295; a[4752] = 4294967295; a[4753] = 4294967295; a[4754] = 4294967295; 
a[4755] = 4294967295; a[4756] = 4294967295; a[4757] = 4294967295; a[4758] = 4294967295; 
a[4759] = 4294967295; a[4760] = 4294967295; a[4761] = 4294967295; a[4762] = 4294967295; 
a[4763] = 4294967295; a[4764] = 4294967295; a[4765] = 4294967295; a[4766] = 4294967295; 
a[4767] = 4294967295; a[4768] = 4294967295; a[4769] = 4294967295; a[4770] = 4294967295; 
a[4771] = 4294967295; a[4772] = 4294967295; a[4773] = 4294967295; a[4774] = 4294967295; 
a[4775] = 4294967295; a[4776] = 4294967295; a[4777] = 4294967295; a[4778] = 4294967295; 
a[4779] = 4294967295; a[4780] = 4294967295; a[4781] = 4294967295; a[4782] = 4294967295; 
a[4783] = 4294967295; a[4784] = 4294967295; a[4785] = 4294967295; a[4786] = 4294967295; 
a[4787] = 4294967295; a[4788] = 4294967295; a[4789] = 4294967295; a[4790] = 4294967295; 
a[4791] = 4294967295; a[4792] = 4294967295; a[4793] = 4294967295; a[4794] = 4294967295; 
a[4795] = 4294967295; a[4796] = 4294967295; a[4797] = 4294967295; a[4798] = 4294967295; 
a[4799] = 4294967295; a[4800] = 4294967295; a[4801] = 4294967295; a[4802] = 4294967295; 
a[4803] = 4294967295; a[4804] = 4294967295; a[4805] = 4294967295; a[4806] = 4294967295; 
a[4807] = 4294967295; a[4808] = 4294967295; a[4809] = 4294967295; a[4810] = 4294967295; 
a[4811] = 4294967295; a[4812] = 4294967295; a[4813] = 4294967295; a[4814] = 4294967295; 
a[4815] = 4294967295; a[4816] = 4294967295; a[4817] = 4294967295; a[4818] = 4294967295; 
a[4819] = 4294967295; a[4820] = 4294967295; a[4821] = 4294967295; a[4822] = 4294967295; 
a[4823] = 4294967295; a[4824] = 4294967295; a[4825] = 4294967295; a[4826] = 4294967295; 
a[4827] = 4294967295; a[4828] = 4294967295; a[4829] = 4294967295; a[4830] = 4294967295; 
a[4831] = 4294967295; a[4832] = 4294967295; a[4833] = 4294967295; a[4834] = 4294967295; 
a[4835] = 4294967295; a[4836] = 4294967295; a[4837] = 4294967295; a[4838] = 4294967295; 
a[4839] = 4294967295; a[4840] = 4294967295; a[4841] = 4294967295; a[4842] = 4294967295; 
a[4843] = 4294967295; a[4844] = 4294967295; a[4845] = 4294967295; a[4846] = 4294967295; 
a[4847] = 4294967295; a[4848] = 4294967295; a[4849] = 4294967295; a[4850] = 4294967295; 
a[4851] = 4294967295; a[4852] = 4294967295; a[4853] = 4294967295; a[4854] = 4294967295; 
a[4855] = 4294967295; a[4856] = 4294967295; a[4857] = 4294967295; a[4858] = 4294967295; 
a[4859] = 4294967295; a[4860] = 4294967295; a[4861] = 4294967295; a[4862] = 4294967295; 
a[4863] = 4294967295; a[4864] = 4294967295; a[4865] = 4294967295; a[4866] = 4294967295; 
a[4867] = 4294967295; a[4868] = 4294967295; a[4869] = 4294967295; a[4870] = 4294967295; 
a[4871] = 4294967295; a[4872] = 4294967295; a[4873] = 4294967295; a[4874] = 4294967295; 
a[4875] = 4294967295; a[4876] = 4294967295; a[4877] = 4294967295; a[4878] = 4294967295; 
a[4879] = 4294967295; a[4880] = 4294967295; a[4881] = 4294967295; a[4882] = 4294967295; 
a[4883] = 4294967295; a[4884] = 4294967295; a[4885] = 4294967295; a[4886] = 4294967295; 
a[4887] = 4294967295; a[4888] = 4294967295; a[4889] = 4294967295; a[4890] = 4294967295; 
a[4891] = 4294967295; a[4892] = 4294967295; a[4893] = 4294967295; a[4894] = 4294967295; 
a[4895] = 4294967295; a[4896] = 4294967295; a[4897] = 4294967295; a[4898] = 4294967295; 
a[4899] = 4294967295; a[4900] = 4294967295; a[4901] = 4294967295; a[4902] = 4294967295; 
a[4903] = 4294967295; a[4904] = 4294967295; a[4905] = 4294967295; a[4906] = 4294967295; 
a[4907] = 4294967295; a[4908] = 4294967295; a[4909] = 4294967295; a[4910] = 4294967295; 
a[4911] = 4294967295; a[4912] = 4294967295; a[4913] = 4294967295; a[4914] = 4294967295; 
a[4915] = 4294967295; a[4916] = 4294967295; a[4917] = 4294967295; a[4918] = 4294967295; 
a[4919] = 4294967295; a[4920] = 4294967295; a[4921] = 4294967295; a[4922] = 4294967295; 
a[4923] = 4294967295; a[4924] = 4294967295; a[4925] = 4294967295; a[4926] = 4294967295; 
a[4927] = 4294967295; a[4928] = 4294967295; a[4929] = 4294967295; a[4930] = 4294967295; 
a[4931] = 4294967295; a[4932] = 4294967295; a[4933] = 4294967295; a[4934] = 4294967295; 
a[4935] = 4294967295; a[4936] = 4294967295; a[4937] = 4294967295; a[4938] = 4294967295; 
a[4939] = 4294967295; a[4940] = 4294967295; a[4941] = 4294967295; a[4942] = 4294967295; 
a[4943] = 4294967295; a[4944] = 4294967295; a[4945] = 4294967295; a[4946] = 4294967295; 
a[4947] = 4294967295; a[4948] = 4294967295; a[4949] = 4294967295; a[4950] = 4294967295; 
a[4951] = 4294967295; a[4952] = 4294967295; a[4953] = 4294967295; a[4954] = 4294967295; 
a[4955] = 4294967295; a[4956] = 4294967295; a[4957] = 4294967295; a[4958] = 4294967295; 
a[4959] = 4294967295; a[4960] = 4294967295; a[4961] = 4294967295; a[4962] = 4294967295; 
a[4963] = 4294967295; a[4964] = 4294967295; a[4965] = 4294967295; a[4966] = 4294967295; 
a[4967] = 4294967295; a[4968] = 4294967295; a[4969] = 4294967295; a[4970] = 4294967295; 
a[4971] = 4294967295; a[4972] = 4294967295; a[4973] = 4294967295; a[4974] = 4294967295; 
a[4975] = 4294967295; a[4976] = 4294967295; a[4977] = 4294967295; a[4978] = 4294967295; 
a[4979] = 4294967295; a[4980] = 4294967295; a[4981] = 4294967295; a[4982] = 4294967295; 
a[4983] = 4294967295; a[4984] = 4294967295; a[4985] = 4294967295; a[4986] = 4294967295; 
a[4987] = 4294967295; a[4988] = 4294967295; a[4989] = 4294967295; a[4990] = 4294967295; 
a[4991] = 4294967295; a[4992] = 4294967295; a[4993] = 4294967295; a[4994] = 4294967295; 
a[4995] = 4294967295; a[4996] = 4294967295; a[4997] = 4294967295; a[4998] = 4294967295; 
a[4999] = 4294967295; a[5000] = 4294967295; a[5001] = 4294967295; a[5002] = 4294967295; 
a[5003] = 4294967295; a[5004] = 4294967295; a[5005] = 4294967295; a[5006] = 4294967295; 
a[5007] = 4294967295; a[5008] = 4294967295; a[5009] = 4294967295; a[5010] = 4294967295; 
a[5011] = 4294967295; a[5012] = 4294967295; a[5013] = 4294967295; a[5014] = 4294967295; 
a[5015] = 4294967295; a[5016] = 4294967295; a[5017] = 4294967295; a[5018] = 4294967295; 
a[5019] = 4294967295; a[5020] = 4294967295; a[5021] = 4294967295; a[5022] = 4294967295; 
a[5023] = 4294967295; a[5024] = 4294967295; a[5025] = 4294967295; a[5026] = 4294967295; 
a[5027] = 4294967295; a[5028] = 4294967295; a[5029] = 4294967295; a[5030] = 4294967295; 
a[5031] = 4294967295; a[5032] = 4294967295; a[5033] = 4294967295; a[5034] = 4294967295; 
a[5035] = 4294967295; a[5036] = 4294967295; a[5037] = 4294967295; a[5038] = 4294967295; 
a[5039] = 4294967295; a[5040] = 4294967295; a[5041] = 4294967295; a[5042] = 4294967295; 
a[5043] = 4294967295; a[5044] = 4294967295; a[5045] = 4294967295; a[5046] = 4294967295; 
a[5047] = 4294967295; a[5048] = 4294967295; a[5049] = 4294967295; a[5050] = 4294967295; 
a[5051] = 4294967295; a[5052] = 4294967295; a[5053] = 4294967295; a[5054] = 4294967295; 
a[5055] = 4294967295; a[5056] = 4294967295; a[5057] = 4294967295; a[5058] = 4294967295; 
a[5059] = 4294967295; a[5060] = 4294967295; a[5061] = 4294967295; a[5062] = 4294967295; 
a[5063] = 4294967295; a[5064] = 4294967295; a[5065] = 4294967295; a[5066] = 4294967295; 
a[5067] = 4294967295; a[5068] = 4294967295; a[5069] = 4294967295; a[5070] = 4294967295; 
a[5071] = 4294967295; a[5072] = 4294967295; a[5073] = 4294967295; a[5074] = 4294967295; 
a[5075] = 4294967295; a[5076] = 4294967295; a[5077] = 4294967295; a[5078] = 4294967295; 
a[5079] = 4294967295; a[5080] = 4294967295; a[5081] = 4294967295; a[5082] = 4294967295; 
a[5083] = 4294967295; a[5084] = 4294967295; a[5085] = 4294967295; a[5086] = 4294967295; 
a[5087] = 4294967295; a[5088] = 4294967295; a[5089] = 4294967295; a[5090] = 4294967295; 
a[5091] = 4294967295; a[5092] = 4294967295; a[5093] = 4294967295; a[5094] = 4294967295; 
a[5095] = 4294967295; a[5096] = 4294967295; a[5097] = 4294967295; a[5098] = 4294967295; 
a[5099] = 4294967295; a[5100] = 4294967295; a[5101] = 4294967295; a[5102] = 4294967295; 
a[5103] = 4294967295; a[5104] = 4294967295; a[5105] = 4294967295; a[5106] = 4294967295; 
a[5107] = 4294967295; a[5108] = 4294967295; a[5109] = 4294967295; a[5110] = 4294967295; 
a[5111] = 4294967295; a[5112] = 4294967295; a[5113] = 4294967295; a[5114] = 4294967295; 
a[5115] = 4294967295; a[5116] = 4294967295; a[5117] = 4294967295; a[5118] = 4294967295; 
a[5119] = 4294967295; a[5120] = 4294967295; a[5121] = 4294967295; a[5122] = 4294967295; 
a[5123] = 4294967295; a[5124] = 4294967295; a[5125] = 4294967295; a[5126] = 4294967295; 
a[5127] = 4294967295; a[5128] = 4294967295; a[5129] = 4294967295; a[5130] = 4294967295; 
a[5131] = 4294967295; a[5132] = 4294967295; a[5133] = 4294967295; a[5134] = 4294967295; 
a[5135] = 4294967295; a[5136] = 4294967295; a[5137] = 4294967295; a[5138] = 4294967295; 
a[5139] = 4294967295; a[5140] = 4294967295; a[5141] = 4294967295; a[5142] = 4294967295; 
a[5143] = 4294967295; a[5144] = 4294967295; a[5145] = 4294967295; a[5146] = 4294967295; 
a[5147] = 4294967295; a[5148] = 4294967295; a[5149] = 4294967295; a[5150] = 4294967295; 
a[5151] = 4294967295; a[5152] = 4294967295; a[5153] = 4294967295; a[5154] = 4294967295; 
a[5155] = 4294967295; a[5156] = 4294967295; a[5157] = 4294967295; a[5158] = 4294967295; 
a[5159] = 4294967295; a[5160] = 4294967295; a[5161] = 4294967295; a[5162] = 4294967295; 
a[5163] = 4294967295; a[5164] = 4294967295; a[5165] = 4294967295; a[5166] = 4294967295; 
a[5167] = 4294967295; a[5168] = 4294967295; a[5169] = 4294967295; a[5170] = 4294967295; 
a[5171] = 4294967295; a[5172] = 4294967295; a[5173] = 4294967295; a[5174] = 4294967295; 
a[5175] = 4294967295; a[5176] = 4294967295; a[5177] = 4294967295; a[5178] = 4294967295; 
a[5179] = 4294967295; a[5180] = 4294967295; a[5181] = 4294967295; a[5182] = 4294967295; 
a[5183] = 4294967295; a[5184] = 4294967295; a[5185] = 4294967295; a[5186] = 4294967295; 
a[5187] = 4294967295; a[5188] = 4294967295; a[5189] = 4294967295; a[5190] = 4294967295; 
a[5191] = 4294967295; a[5192] = 4294967295; a[5193] = 4294967295; a[5194] = 4294967295; 
a[5195] = 4294967295; a[5196] = 4294967295; a[5197] = 4294967295; a[5198] = 4294967295; 
a[5199] = 4294967295; a[5200] = 4294967295; a[5201] = 4294967295; a[5202] = 4294967295; 
a[5203] = 4294967295; a[5204] = 4294967295; a[5205] = 4294967295; a[5206] = 4294967295; 
a[5207] = 4294967295; a[5208] = 4294967295; a[5209] = 4294967295; a[5210] = 4294967295; 
a[5211] = 4294967295; a[5212] = 4294967295; a[5213] = 4294967295; a[5214] = 4294967295; 
a[5215] = 4294967295; a[5216] = 4294967295; a[5217] = 4294967295; a[5218] = 4294967295; 
a[5219] = 4294967295; a[5220] = 4294967295; a[5221] = 4294967295; a[5222] = 4294967295; 
a[5223] = 4294967295; a[5224] = 4294967295; a[5225] = 4294967295; a[5226] = 4294967295; 
a[5227] = 4294967295; a[5228] = 4294967295; a[5229] = 4294967295; a[5230] = 4294967295; 
a[5231] = 4294967295; a[5232] = 4294967295; a[5233] = 4294967295; a[5234] = 4294967295; 
a[5235] = 4294967295; a[5236] = 4294967295; a[5237] = 4294967295; a[5238] = 4294967295; 
a[5239] = 4294967295; a[5240] = 4294967295; a[5241] = 4294967295; a[5242] = 4294967295; 
a[5243] = 4294967295; a[5244] = 4294967295; a[5245] = 4294967295; a[5246] = 4294967295; 
a[5247] = 4294967295; a[5248] = 4294967295; a[5249] = 4294967295; a[5250] = 4294967295; 
a[5251] = 4294967295; a[5252] = 4294967295; a[5253] = 4294967295; a[5254] = 4294967295; 
a[5255] = 4294967295; a[5256] = 4294967295; a[5257] = 4294967295; a[5258] = 4294967295; 
a[5259] = 4294967295; a[5260] = 4294967295; a[5261] = 4294967295; a[5262] = 4294967295; 
a[5263] = 4294967295; a[5264] = 4294967295; a[5265] = 4294967295; a[5266] = 4294967295; 
a[5267] = 4294967295; a[5268] = 4294967295; a[5269] = 4294967295; a[5270] = 4294967295; 
a[5271] = 4294967295; a[5272] = 4294967295; a[5273] = 4294967295; a[5274] = 4294967295; 
a[5275] = 4294967295; a[5276] = 4294967295; a[5277] = 4294967295; a[5278] = 4294967295; 
a[5279] = 4294967295; a[5280] = 4294967295; a[5281] = 4294967295; a[5282] = 4294967295; 
a[5283] = 4294967295; a[5284] = 4294967295; a[5285] = 4294967295; a[5286] = 4294967295; 
a[5287] = 4294967295; a[5288] = 4294967295; a[5289] = 4294967295; a[5290] = 4294967295; 
a[5291] = 4294967295; a[5292] = 4294967295; a[5293] = 4294967295; a[5294] = 4294967295; 
a[5295] = 4294967295; a[5296] = 4294967295; a[5297] = 4294967295; a[5298] = 4294967295; 
a[5299] = 4294967295; a[5300] = 4294967295; a[5301] = 4294967295; a[5302] = 4294967295; 
a[5303] = 4294967295; a[5304] = 4294967295; a[5305] = 4294967295; a[5306] = 4294967295; 
a[5307] = 4294967295; a[5308] = 4294967295; a[5309] = 4294967295; a[5310] = 4294967295; 
a[5311] = 4294967295; a[5312] = 4294967295; a[5313] = 4294967295; a[5314] = 4294967295; 
a[5315] = 4294967295; a[5316] = 4294967295; a[5317] = 4294967295; a[5318] = 4294967295; 
a[5319] = 4294967295; a[5320] = 4294967295; a[5321] = 4294967295; a[5322] = 4294967295; 
a[5323] = 4294967295; a[5324] = 4294967295; a[5325] = 4294967295; a[5326] = 4294967295; 
a[5327] = 4294967295; a[5328] = 4294967295; a[5329] = 4294967295; a[5330] = 4294967295; 
a[5331] = 4294967295; a[5332] = 4294967295; a[5333] = 4294967295; a[5334] = 4294967295; 
a[5335] = 4294967295; a[5336] = 4294967295; a[5337] = 4294967295; a[5338] = 4294967295; 
a[5339] = 4294967295; a[5340] = 4294967295; a[5341] = 4294967295; a[5342] = 4294967295; 
a[5343] = 4294967295; a[5344] = 4294967295; a[5345] = 4294967295; a[5346] = 4294967295; 
a[5347] = 4294967295; a[5348] = 4294967295; a[5349] = 4294967295; a[5350] = 4294967295; 
a[5351] = 4294967295; a[5352] = 4294967295; a[5353] = 4294967295; a[5354] = 4294967295; 
a[5355] = 4294967295; a[5356] = 4294967295; a[5357] = 4294967295; a[5358] = 4294967295; 
a[5359] = 4294967295; a[5360] = 4294967295; a[5361] = 4294967295; a[5362] = 4294967295; 
a[5363] = 4294967295; a[5364] = 4294967295; a[5365] = 4294967295; a[5366] = 4294967295; 
a[5367] = 4294967295; a[5368] = 4294967295; a[5369] = 4294967295; a[5370] = 4294967295; 
a[5371] = 4294967295; a[5372] = 4294967295; a[5373] = 4294967295; a[5374] = 4294967295; 
a[5375] = 4294967295; a[5376] = 4294967295; a[5377] = 4294967295; a[5378] = 4294967295; 
a[5379] = 4294967295; a[5380] = 4294967295; a[5381] = 4294967295; a[5382] = 4294967295; 
a[5383] = 4294967295; a[5384] = 4294967295; a[5385] = 4294967295; a[5386] = 4294967295; 
a[5387] = 4294967295; a[5388] = 4294967295; a[5389] = 4294967295; a[5390] = 4294967295; 
a[5391] = 4294967295; a[5392] = 4294967295; a[5393] = 4294967295; a[5394] = 4294967295; 
a[5395] = 4294967295; a[5396] = 4294967295; a[5397] = 4294967295; a[5398] = 4294967295; 
a[5399] = 4294967295; a[5400] = 4294967295; a[5401] = 4294967295; a[5402] = 4294967295; 
a[5403] = 4294967295; a[5404] = 4294967295; a[5405] = 4294967295; a[5406] = 4294967295; 
a[5407] = 4294967295; a[5408] = 4294967295; a[5409] = 4294967295; a[5410] = 4294967295; 
a[5411] = 4294967295; a[5412] = 4294967295; a[5413] = 4294967295; a[5414] = 4294967295; 
a[5415] = 4294967295; a[5416] = 4294967295; a[5417] = 4294967295; a[5418] = 4294967295; 
a[5419] = 4294967295; a[5420] = 4294967295; a[5421] = 4294967295; a[5422] = 4294967295; 
a[5423] = 4294967295; a[5424] = 4294967295; a[5425] = 4294967295; a[5426] = 4294967295; 
a[5427] = 4294967295; a[5428] = 4294967295; a[5429] = 4294967295; a[5430] = 8388607; 
a[5432] = 4294967295; a[5433] = 4294967295; a[5434] = 4294967295; a[5435] = 4294967295; 
a[5436] = 4294967295; a[5437] = 4294967295; a[5438] = 4294967295; a[5439] = 4294967295; 
a[5440] = 4294967295; a[5441] = 4294967295; a[5442] = 4294967295; a[5443] = 4294967295; 
a[5444] = 4294967295; a[5445] = 4294967295; a[5446] = 4294967295; a[5447] = 4294967295; 
a[5448] = 4294967295; a[5449] = 4294967295; a[5450] = 4294967295; a[5451] = 4294967295; 
a[5452] = 4294967295; a[5453] = 4294967295; a[5454] = 4294967295; a[5455] = 4294967295; 
a[5456] = 4294967295; a[5457] = 4294967295; a[5458] = 4294967295; a[5459] = 4294967295; 
a[5460] = 4294967295; a[5461] = 4294967295; a[5462] = 4294967295; a[5463] = 4294967295; 
a[5464] = 4294967295; a[5465] = 4294967295; a[5466] = 4294967295; a[5467] = 4294967295; 
a[5468] = 4294967295; a[5469] = 4294967295; a[5470] = 4294967295; a[5471] = 4294967295; 
a[5472] = 4294967295; a[5473] = 4294967295; a[5474] = 4294967295; a[5475] = 4294967295; 
a[5476] = 4294967295; a[5477] = 4294967295; a[5478] = 4294967295; a[5479] = 4294967295; 
a[5480] = 4294967295; a[5481] = 4294967295; a[5482] = 4294967295; a[5483] = 4294967295; 
a[5484] = 4294967295; a[5485] = 4294967295; a[5486] = 4294967295; a[5487] = 4294967295; 
a[5488] = 4294967295; a[5489] = 4294967295; a[5490] = 4294967295; a[5491] = 4294967295; 
a[5492] = 4294967295; a[5493] = 4294967295; a[5494] = 4294967295; a[5495] = 4294967295; 
a[5496] = 4294967295; a[5497] = 4294967295; a[5498] = 4294967295; a[5499] = 4294967295; 
a[5500] = 4294967295; a[5501] = 4294967295; a[5502] = 4294967295; a[5503] = 4294967295; 
a[5504] = 4294967295; a[5505] = 4294967295; a[5506] = 4294967295; a[5507] = 4294967295; 
a[5508] = 4294967295; a[5509] = 4294967295; a[5510] = 4294967295; a[5511] = 4294967295; 
a[5512] = 4294967295; a[5513] = 4294967295; a[5514] = 4294967295; a[5515] = 4294967295; 
a[5516] = 4294967295; a[5517] = 4294967295; a[5518] = 4294967295; a[5519] = 4294967295; 
a[5520] = 4294967295; a[5521] = 4294967295; a[5522] = 4294967295; a[5523] = 4294967295; 
a[5524] = 4294967295; a[5525] = 4294967295; a[5526] = 4294967295; a[5527] = 4294967295; 
a[5528] = 4294967295; a[5529] = 4294967295; a[5530] = 4294967295; a[5531] = 4294967295; 
a[5532] = 4294967295; a[5533] = 4294967295; a[5534] = 4294967295; a[5535] = 4294967295; 
a[5536] = 4294967295; a[5537] = 4294967295; a[5538] = 4294967295; a[5539] = 4294967295; 
a[5540] = 4294967295; a[5541] = 4294967295; a[5542] = 4294967295; a[5543] = 4294967295; 
a[5544] = 4294967295; a[5545] = 4294967295; a[5546] = 4294967295; a[5547] = 4294967295; 
a[5548] = 4294967295; a[5549] = 4294967295; a[5550] = 4294967295; a[5551] = 4294967295; 
a[5552] = 4294967295; a[5553] = 4294967295; a[5554] = 4294967295; a[5555] = 4294967295; 
a[5556] = 4294967295; a[5557] = 4294967295; a[5558] = 4294967295; a[5559] = 4294967295; 
a[5560] = 4294967295; a[5561] = 2097151; a[5562] = 4294967295; a[5563] = 4294967295; 
a[5564] = 4294967295; a[5565] = 4294967295; a[5566] = 4294967295; a[5567] = 4294967295; 
a[5568] = 1073741823; a[5569] = 4294967295; a[5570] = 4294967295; a[5571] = 4294967295; 
a[5572] = 4294967295; a[5573] = 4294967295; a[5574] = 4294967295; a[5575] = 4294967295; 
a[5576] = 4294967295; a[5577] = 4294967295; a[5578] = 4294967295; a[5579] = 4294967295; 
a[5580] = 4294967295; a[5581] = 4294967295; a[5582] = 4294967295; a[5583] = 4294967295; 
a[5584] = 4294967295; a[5585] = 4294967295; a[5586] = 4294967295; a[5587] = 4294967295; 
a[5588] = 4294967295; a[5589] = 4294967295; a[5590] = 4294967295; a[5591] = 4294967295; 
a[5592] = 4294967295; a[5593] = 4294967295; a[5594] = 4294967295; a[5595] = 4294967295; 
a[5596] = 4294967295; a[5597] = 4294967295; a[5598] = 4294967295; a[5599] = 4294967295; 
a[5600] = 4294967295; a[5601] = 4294967295; a[5602] = 4294967295; a[5603] = 4294967295; 
a[5604] = 4294967295; a[5605] = 4294967295; a[5606] = 4294967295; a[5607] = 4294967295; 
a[5608] = 4294967295; a[5609] = 4294967295; a[5610] = 4294967295; a[5611] = 4294967295; 
a[5612] = 4294967295; a[5613] = 4294967295; a[5614] = 4294967295; a[5615] = 4294967295; 
a[5616] = 4294967295; a[5617] = 4294967295; a[5618] = 4294967295; a[5619] = 4294967295; 
a[5620] = 4294967295; a[5621] = 4294967295; a[5622] = 4294967295; a[5623] = 4294967295; 
a[5624] = 4294967295; a[5625] = 4294967295; a[5626] = 4294967295; a[5627] = 4294967295; 
a[5628] = 4294967295; a[5629] = 4294967295; a[5630] = 4294967295; a[5631] = 4294967295; 
a[5632] = 4294967295; a[5633] = 4294967295; a[5634] = 4294967295; a[5635] = 4294967295; 
a[5636] = 4294967295; a[5637] = 4294967295; a[5638] = 4294967295; a[5639] = 4294967295; 
a[5640] = 4294967295; a[5641] = 4294967295; a[5642] = 4294967295; a[5643] = 4294967295; 
a[5644] = 4294967295; a[5645] = 4294967295; a[5646] = 4294967295; a[5647] = 4294967295; 
a[5648] = 4294967295; a[5649] = 4294967295; a[5650] = 4294967295; a[5651] = 4294967295; 
a[5652] = 4294967295; a[5653] = 4294967295; a[5654] = 4294967295; a[5655] = 4294967295; 
a[5656] = 4294967295; a[5657] = 4294967295; a[5658] = 4294967295; a[5659] = 4294967295; 
a[5660] = 4294967295; a[5661] = 4294967295; a[5662] = 4294967295; a[5663] = 4294967295; 
a[5664] = 4294967295; a[5665] = 4294967295; a[5666] = 4294967295; a[5667] = 4294967295; 
a[5668] = 4294967295; a[5669] = 4294967295; a[5670] = 4294967295; a[5671] = 4294967295; 
a[5672] = 4294967295; a[5673] = 4294967295; a[5674] = 4294967295; a[5675] = 4294967295; 
a[5676] = 4294967295; a[5677] = 4294967295; a[5678] = 4294967295; a[5679] = 4294967295; 
a[5680] = 4294967295; a[5681] = 4294967295; a[5682] = 4294967295; a[5683] = 4294967295; 
a[5684] = 4294967295; a[5685] = 4294967295; a[5686] = 4294967295; a[5687] = 4294967295; 
a[5688] = 4294967295; a[5689] = 4294967295; a[5690] = 4294967295; a[5691] = 4294967295; 
a[5692] = 4294967295; a[5693] = 4294967295; a[5694] = 4294967295; a[5695] = 4294967295; 
a[5696] = 4294967295; a[5697] = 4294967295; a[5698] = 4294967295; a[5699] = 4294967295; 
a[5700] = 4294967295; a[5701] = 4294967295; a[5702] = 4294967295; a[5703] = 4294967295; 
a[5704] = 4294967295; a[5705] = 4294967295; a[5706] = 4294967295; a[5707] = 4294967295; 
a[5708] = 4294967295; a[5709] = 4294967295; a[5710] = 4294967295; a[5711] = 4294967295; 
a[5712] = 4294967295; a[5713] = 4294967295; a[5714] = 4294967295; a[5715] = 4294967295; 
a[5716] = 4294967295; a[5717] = 4294967295; a[5718] = 4294967295; a[5719] = 4294967295; 
a[5720] = 4294967295; a[5721] = 4294967295; a[5722] = 4294967295; a[5723] = 4294967295; 
a[5724] = 4294967295; a[5725] = 4294967295; a[5726] = 4294967295; a[5727] = 4294967295; 
a[5728] = 4294967295; a[5729] = 4294967295; a[5730] = 4294967295; a[5731] = 4294967295; 
a[5732] = 4294967295; a[5733] = 4294967295; a[5734] = 4294967295; a[5735] = 4294967295; 
a[5736] = 4294967295; a[5737] = 4294967295; a[5738] = 4294967295; a[5739] = 4294967295; 
a[5740] = 4294967295; a[5741] = 4294967295; a[5742] = 4294967295; a[5743] = 4294967295; 
a[5744] = 4294967295; a[5745] = 4294967295; a[5746] = 4294967295; a[5747] = 4294967295; 
a[5748] = 4294967295; a[5749] = 4294901763; a[5750] = 4294967295; a[5751] = 4294967295; 
a[5752] = 4294967295; a[5753] = 4294967295; a[5754] = 4294967295; a[5755] = 4294967295; 
a[5756] = 4294967295; a[5757] = 4294967295; a[5758] = 4294967295; a[5759] = 4294967295; 
a[5760] = 4294967295; a[5761] = 4294967295; a[5762] = 4294967295; a[5763] = 4294967295; 
a[5764] = 4294967295; a[5765] = 4294967295; a[5766] = 4294967295; a[5767] = 4294967295; 
a[5768] = 4294967295; a[5769] = 4294967295; a[5770] = 4294967295; a[5771] = 4294967295; 
a[5772] = 4294967295; a[5773] = 4294967295; a[5774] = 4294967295; a[5775] = 4294967295; 
a[5776] = 4294967295; a[5777] = 4294967295; a[5778] = 4294967295; a[5779] = 4294967295; 
a[5780] = 4294967295; a[5781] = 4294967295; a[5782] = 4294967295; a[5783] = 4294967295; 
a[5784] = 4294967295; a[5785] = 4294967295; a[5786] = 4294967295; a[5787] = 4294967295; 
a[5788] = 4294967295; a[5789] = 4294967295; a[5790] = 4294967295; a[5791] = 4294967295; 
a[5792] = 4294967295; a[5793] = 4294967295; a[5794] = 4294967295; a[5795] = 4294967295; 
a[5796] = 4294967295; a[5797] = 4294967295; a[5798] = 4294967295; a[5799] = 4294967295; 
a[5800] = 4294967295; a[5801] = 4294967295; a[5802] = 4294967295; a[5803] = 4294967295; 
a[5804] = 4294967295; a[5805] = 4294967295; a[5806] = 4294967295; a[5807] = 4294967295; 
a[5808] = 4294967295; a[5809] = 4294967295; a[5810] = 4294967295; a[5811] = 4294967295; 
a[5812] = 4294967295; a[5813] = 4294967295; a[5814] = 4294967295; a[5815] = 4294967295; 
a[5816] = 4294967295; a[5817] = 4294967295; a[5818] = 4294967295; a[5819] = 4294967295; 
a[5820] = 4294967295; a[5821] = 4294967295; a[5822] = 4294967295; a[5823] = 4294967295; 
a[5824] = 4294967295; a[5825] = 4294967295; a[5826] = 4294967295; a[5827] = 4294967295; 
a[5828] = 4294967295; a[5829] = 4294967295; a[5830] = 4294967295; a[5831] = 4294967295; 
a[5832] = 4294967295; a[5833] = 4294967295; a[5834] = 4294967295; a[5835] = 4294967295; 
a[5836] = 4294967295; a[5837] = 4294967295; a[5838] = 4294967295; a[5839] = 4294967295; 
a[5840] = 4294967295; a[5841] = 4294967295; a[5842] = 4294967295; a[5843] = 4294967295; 
a[5844] = 4294967295; a[5845] = 4294967295; a[5846] = 4294967295; a[5847] = 4294967295; 
a[5848] = 4294967295; a[5849] = 4294967295; a[5850] = 4294967295; a[5851] = 4294967295; 
a[5852] = 4294967295; a[5853] = 4294967295; a[5854] = 4294967295; a[5855] = 4294967295; 
a[5856] = 4294967295; a[5857] = 4294967295; a[5858] = 4294967295; a[5859] = 4294967295; 
a[5860] = 4294967295; a[5861] = 4294967295; a[5862] = 4294967295; a[5863] = 4294967295; 
a[5864] = 4294967295; a[5865] = 4294967295; a[5866] = 4294967295; a[5867] = 4294967295; 
a[5868] = 4294967295; a[5869] = 4294967295; a[5870] = 4294967295; a[5871] = 4294967295; 
a[5872] = 4294967295; a[5873] = 4294967295; a[5874] = 4294967295; a[5875] = 4294967295; 
a[5876] = 4294967295; a[5877] = 4294967295; a[5878] = 4294967295; a[5879] = 4294967295; 
a[5880] = 4294967295; a[5881] = 4294967295; a[5882] = 4294967295; a[5883] = 4294967295; 
a[5884] = 4294967295; a[5885] = 4294967295; a[5886] = 4294967295; a[5887] = 4294967295; 
a[5888] = 4294967295; a[5889] = 4294967295; a[5890] = 4294967295; a[5891] = 4294967295; 
a[5892] = 4294967295; a[5893] = 4294967295; a[5894] = 4294967295; a[5895] = 4294967295; 
a[5896] = 4294967295; a[5897] = 4294967295; a[5898] = 4294967295; a[5899] = 4294967295; 
a[5900] = 4294967295; a[5901] = 4294967295; a[5902] = 4294967295; a[5903] = 4294967295; 
a[5904] = 4294967295; a[5905] = 4294967295; a[5906] = 4294967295; a[5907] = 4294967295; 
a[5908] = 4294967295; a[5909] = 4294967295; a[5910] = 4294967295; a[5911] = 4294967295; 
a[5912] = 4294967295; a[5913] = 4294967295; a[5914] = 4294967295; a[5915] = 4294967295; 
a[5916] = 4294967295; a[5917] = 4294967295; a[5918] = 4294967295; a[5919] = 4294967295; 
a[5920] = 4294967295; a[5921] = 4294967295; a[5922] = 4294967295; a[5923] = 4294967295; 
a[5924] = 4294967295; a[5925] = 4294967295; a[5926] = 4294967295; a[5927] = 4294967295; 
a[5928] = 4294967295; a[5929] = 4294967295; a[5930] = 4294967295; a[5931] = 4294967295; 
a[5932] = 4294967295; a[5933] = 4294967295; a[5934] = 4294967295; a[5935] = 4294967295; 
a[5936] = 4294967295; a[5937] = 4294967295; a[5938] = 4294967295; a[5939] = 4294967295; 
a[5940] = 4294967295; a[5941] = 4294967295; a[5942] = 4294967295; a[5943] = 4294967295; 
a[5944] = 4294967295; a[5945] = 4294967295; a[5946] = 4294967295; a[5947] = 4294967295; 
a[5948] = 4294967295; a[5949] = 4294967295; a[5950] = 4294967295; a[5951] = 4294967295; 
a[5952] = 4294967295; a[5953] = 4294967295; a[5954] = 4294967295; a[5955] = 4294967295; 
a[5956] = 4294967295; a[5957] = 4294967295; a[5958] = 4294967295; a[5959] = 4294967295; 
a[5960] = 4294967295; a[5961] = 4294967295; a[5962] = 4294967295; a[5963] = 4294967295; 
a[5964] = 4294967295; a[5965] = 4294967295; a[5966] = 4294967295; a[5967] = 4294967295; 
a[5968] = 4294967295; a[5969] = 4294967295; a[5970] = 4294967295; a[5971] = 4294967295; 
a[5972] = 4294967295; a[5973] = 4294967295; a[5974] = 4294967295; a[5975] = 4294967295; 
a[5976] = 4294967295; a[5977] = 4294967295; a[5978] = 4294967295; a[5979] = 4294967295; 
a[5980] = 4294967295; a[5981] = 4294967295; a[5982] = 4294967295; a[5983] = 1; 
a[6080] = 4294967295; a[6081] = 4294967295; a[6082] = 4294967295; a[6083] = 4294967295; 
a[6084] = 4294967295; a[6085] = 4294967295; a[6086] = 4294967295; a[6087] = 4294967295; 
a[6088] = 4294967295; a[6089] = 4294967295; a[6090] = 4294967295; a[6091] = 4294967295; 
a[6092] = 4294967295; a[6093] = 4294967295; a[6094] = 4294967295; a[6095] = 4294967295; 
a[6096] = 1073741823; 
delete a;

function isPrint(c) {
	var cp = ord(c);
	var idx = Math.floor(cp / 32);
	var byt = isPrintBitm[idx];
	if (byt) {
		var mask = Math.pow(2, cp - idx * 32);
		return (byt & mask) != 0;
	}
	return false;
}

function toLower(c) {
    var cp = ord(c);
    
    if (cp == 304)
	return chr(105);
    else if (cp >= 7312 && cp <= 7354)
	return c;
    else if (cp >= 7357 && cp <= 7359)
	return c;
    else if (cp == 42936)
	return c;
    else if (cp >= 93760 && cp <= 93791)
	return c;
    return c.toLowerCase();
}

function toUpper(c) {
    var cp = ord(c);
    if (cp == 223)
	return c;
    else if (cp == 329)
	return c;
    else if (cp == 496)
	return c;
    else if (cp == 912)
	return c;
    else if (cp == 944)
	return c;
    else if (cp == 1415)
	return c;
    else if (cp >= 4304 && cp <= 4346)
	return c;
    else if (cp >= 4349 && cp <= 4351)
	return c;
    else if (cp >= 7830 && cp <= 7834)
	return c;
    else if (cp == 8016)
	return c;
    else if (cp == 8018)
	return c;
    else if (cp == 8020)
	return c;
    else if (cp == 8022)
	return c;
    else if (cp >= 8064 && cp <= 8071)
	return chr(cp + 8)
    else if (cp >= 8072 && cp <= 8079)
	return c;
    else if (cp >= 8080 && cp <= 8087)
	return chr(cp + 8);
    else if (cp >= 8088 && cp <= 8095)
	return c;
    else if (cp >= 8096 && cp <= 8103)
	return chr(cp + 8)
    else if (cp >= 8104 && cp <= 8111)
	return c;
    else if (cp == 8114)
	return c;
    else if (cp == 8115)
	return chr(8124);
    else if (cp == 8116)
	return c;
    else if (cp == 8118)
	return c;
    else if (cp == 8119)
	return c;
    else if (cp == 8124)
	return c;
    else if (cp == 8130)
	return c;
    else if (cp == 8131)
	return chr(8140);
    else if (cp == 8132)
	return c;
    else if (cp == 8134)
	return c;
    else if (cp == 8135)
	return c;
    else if (cp == 8140)
	return c;
    else if (cp == 8146)
	return c;
    else if (cp == 8147)
	return c;
    else if (cp == 8150)
	return c;
    else if (cp == 8151)
	return c;
    else if (cp >= 8162 && cp <= 8164)
	return c;
    else if (cp == 8166)
	return c;
    else if (cp == 8167)
	return c;
    else if (cp == 8178)
	return c;
    else if (cp == 8179)
	return chr(8188);
    else if (cp == 8180)
	return c;
    else if (cp == 8182)
	return c;
    else if (cp == 8183)
	return c;
    else if (cp == 8188)
	return c;
    else if (cp == 42937)
	return c;
    else if (cp >= 64256 && cp <= 64262)
	return c;
    else if (cp >= 64275 && cp <= 64279)
	return c;
    else if (cp >= 93792 && cp <= 93823)
	return c;
    else
	return c.toUpperCase();
}

// Lists

function cons(v, ls) {
    return { next : ls, data : v };
}
function rev(ls) {
    var acc = null;
    for (; ls; ls = ls.next)
	acc = cons(ls.data, acc);
    return acc;
}
function concat(ls1, ls2) {
    var acc = ls2;
    ls1 = rev(ls1);
    for (; ls1; ls1 = ls1.next)
        acc = cons(ls1.data, acc);
    return acc;
}
function member(x, ls) {
    for (; ls; ls = ls.next)
        if (ls.data == x)
            return true;
    return false;
}
function remove(x, ls) {
    var acc = null;

    for (; ls; ls = ls.next)
        if (ls.data == x)
            return concat(acc, ls.next);
    else
        acc = cons(ls.data, acc);

    return ls;
}
function union(ls1, ls2) {
    var acc = ls2;

    for (; ls1; ls1 = ls1.next)
        if (!member(ls1.data, ls2))
            acc = cons(ls1.data, acc);

    return acc;
}
function length(ls) {
    var acc = 0;

    for (; ls; ls = ls.next)
        ++acc;

    return acc;
}


// Floats

function float(n) {
    return n;
}

function trunc(n) {
    return ~~n;
}

function ceil(n) {
    return Math.ceil(n);
}

function round(n) {
    return Math.round(n);
}

function pow(n, m) {
    return Math.pow(n, m);
}

function sqrt(n){
    return Math.sqrt(n);
}

function sin(n){
    return Math.sin(n);
}

function cos(n){
    return Math.cos(n);
}

function log(n){
    return Math.log(n);
}

function exp(n){
    return Math.exp(n);
}

function asin(n){
    return Math.asin(n);
}
function acos(n){
    return Math.acos(n);
}

function atan(n){
    return Math.atan(n);
}

function atan2(n, m){
    return Math.atan2(n, m);
}

function floor(n){
    return Math.floor(n);
}

function abs(n){
    return Math.abs(n);
}

// Time, represented as counts of microseconds since the epoch

var time_format = "%c";

function showTime(tm) {
    return strftime(time_format, tm);
}

function showTimeHtml(tm) {
    return eh(showTime(tm));
}

function now() {
    return (new Date()).getTime() * 1000;
}

function diffInSeconds(tm1, tm2) {
    return Math.round((tm2 - tm1) / 1000000);
}

function diffInMilliseconds(tm1, tm2) {
    return Math.round((tm2 - tm1) / 1000);
}

function toSeconds(tm) {
    return Math.round(tm / 1000000);
}

function toMilliseconds(tm) {
    return Math.round(tm / 1000);
}

function fromMilliseconds(tm) {
    return tm * 1000;
}

function addSeconds(tm, n) {
    return tm + n * 1000000;
}

function stringToTime_error(string) {
    var t = Date.parse(string);
    if (isNaN(t))
        er("Invalid date string: " + string);
    else
        return t * 1000;
}

function stringToTime(string) {
    try {
        var t = Date.parse(string);
        if (isNaN(t))
            return null;
        else
            return t * 1000;
    } catch (e) {
        return null;
    }
}

/*
  strftime() implementation from:
  YUI 3.4.1 (build 4118)
  Copyright 2011 Yahoo! Inc. All rights reserved.
  Licensed under the BSD License.
  http://yuilibrary.com/license/
*/

var xPad=function (x, pad, r)
{
    if(typeof r === "undefined")
    {
	r=10;
    }
    pad = pad.toString();
    for( ; parseInt(x, 10)<r && r>1; r/=10) {
	x = pad + x;
    }
    return x.toString();
};

var YDateEn = {
    a: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    A: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    b: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    B: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    c: "%a %d %b %Y %T %Z",
    p: ["AM", "PM"],
    P: ["am", "pm"],
    r: "%I:%M:%S %p",
    x: "%d/%m/%y",
    X: "%T"
};

var Dt = {
    formats: {
	a: function (d, l) { return l.a[d.getDay()]; },
	A: function (d, l) { return l.A[d.getDay()]; },
	b: function (d, l) { return l.b[d.getMonth()]; },
	B: function (d, l) { return l.B[d.getMonth()]; },
	C: function (d) { return xPad(parseInt(d.getFullYear()/100, 10), 0); },
	d: ["getDate", "0"],
	e: ["getDate", " "],
	g: function (d) { return xPad(parseInt(Dt.formats.G(d)%100, 10), 0); },
	G: function (d) {
	    var y = d.getFullYear();
	    var V = parseInt(Dt.formats.V(d), 10);
	    var W = parseInt(Dt.formats.W(d), 10);

	    if(W > V) {
		y++;
	    } else if(W===0 && V>=52) {
		y--;
	    }

	    return y;
	},
	H: ["getHours", "0"],
	I: function (d) { var I=d.getHours()%12; return xPad(I===0?12:I, 0); },
	j: function (d) {
	    var gmd_1 = new Date("" + d.getFullYear() + "/1/1 GMT");
	    var gmdate = new Date("" + d.getFullYear() + "/" + (d.getMonth()+1) + "/" + d.getDate() + " GMT");
	    var ms = gmdate - gmd_1;
	    var doy = parseInt(ms/60000/60/24, 10)+1;
	    return xPad(doy, 0, 100);
	},
	k: ["getHours", " "],
	l: function (d) { var I=d.getHours()%12; return xPad(I===0?12:I, " "); },
	m: function (d) { return xPad(d.getMonth()+1, 0); },
	M: ["getMinutes", "0"],
	p: function (d, l) { return l.p[d.getHours() >= 12 ? 1 : 0 ]; },
	P: function (d, l) { return l.P[d.getHours() >= 12 ? 1 : 0 ]; },
	s: function (d, l) { return parseInt(d.getTime()/1000, 10); },
	S: ["getSeconds", "0"],
	u: function (d) { var dow = d.getDay(); return dow===0?7:dow; },
	U: function (d) {
	    var doy = parseInt(Dt.formats.j(d), 10);
	    var rdow = 6-d.getDay();
	    var woy = parseInt((doy+rdow)/7, 10);
	    return xPad(woy, 0);
	},
	V: function (d) {
	    var woy = parseInt(Dt.formats.W(d), 10);
	    var dow1_1 = (new Date("" + d.getFullYear() + "/1/1")).getDay();
	    var idow = woy + (dow1_1 > 4 || dow1_1 <= 1 ? 0 : 1);
	    if(idow === 53 && (new Date("" + d.getFullYear() + "/12/31")).getDay() < 4)
	    {
		idow = 1;
	    }
	    else if(idow === 0)
	    {
		idow = Dt.formats.V(new Date("" + (d.getFullYear()-1) + "/12/31"));
	    }

	    return xPad(idow, 0);
	},
	w: "getDay",
	W: function (d) {
	    var doy = parseInt(Dt.formats.j(d), 10);
	    var rdow = 7-Dt.formats.u(d);
	    var woy = parseInt((doy+rdow)/7, 10);
	    return xPad(woy, 0, 10);
	},
	y: function (d) { return xPad(d.getFullYear()%100, 0); },
	Y: "getFullYear",
	z: function (d) {
	    var o = d.getTimezoneOffset();
	    var H = xPad(parseInt(Math.abs(o/60), 10), 0);
	    var M = xPad(Math.abs(o%60), 0);
	    return (o>0?"-":"+") + H + M;
	},
	Z: function (d) {
	    var tz = d.toString().replace(/^.*:\d\d( GMT[+-]\d+)? \(?([A-Za-z ]+)\)?\d*$/, "$2").replace(/[a-z ]/g, "");
	    if(tz.length > 4) {
		tz = Dt.formats.z(d);
	    }
	    return tz;
	},
	"%": function (d) { return "%"; }
    },

    aggregates: {
	c: "locale",
	D: "%m/%d/%y",
	F: "%Y-%m-%d",
	h: "%b",
	n: "\n",
	r: "%I:%M:%S %p",
	R: "%H:%M",
	t: "\t",
	T: "%H:%M:%S",
	x: "locale",
	X: "locale"
    },

    format : function (oDate, format) {
	var replace_aggs = function (m0, m1) {
	    var f = Dt.aggregates[m1];
	    return (f === "locale" ? YDateEn[m1] : f);
	};

	var replace_formats = function (m0, m1) {
	    var f = Dt.formats[m1];
	    switch(typeof f) {
	    case "string":
		return oDate[f]();
	    case "function":
		return f.call(oDate, oDate, YDateEn);
	    case "array":
            case "object":
		if(typeof(f[0]) === "string")
		    return xPad(oDate[f[0]](), f[1]);
	    default:
		return m1;
	    }
	};

	while(format.match(/%[cDFhnrRtTxX]/)) {
	    format = format.replace(/%([cDFhnrRtTxX])/g, replace_aggs);
	}

	var str = format.replace(/%([aAbBCdegGHIjklmMpPsSuUVwWyYzZ%])/g, replace_formats);

	replace_aggs = replace_formats = undefined;

	return str;
    }
};

// End of YUI code

function strftime(fmt, thisTime)
{
    var thisDate = new Date();
    thisDate.setTime(Math.floor(thisTime / 1000));
    return Dt.format(thisDate, fmt);
};

function fromDatetime(year, month, date, hour, minute, second) {
  return (new Date(year, month, date, hour, minute, second)).getTime() * 1000;
};

function datetimeYear(t) {
  return (new Date(t / 1000)).getYear() + 1900;
};

function datetimeMonth(t) {
  return (new Date(t / 1000)).getMonth();
};

function datetimeDay(t) {
  return (new Date(t / 1000)).getDate();
};

function datetimeHour(t) {
  return (new Date(t / 1000)).getHours();
};

function datetimeMinute(t) {
  return (new Date(t / 1000)).getMinutes();
};

function datetimeSecond(t) {
  return (new Date(t / 1000)).getSeconds();
};

function datetimeDayOfWeek(t) {
  return (new Date(t / 1000)).getDay();
};


// Error handling

function uw_debug(msg) {
    try {
        console.debug(msg);
    } catch (e) {
        alert("DEBUG: " + msg);
    }

    return 0;
}

function whine(msg) {
    alert(msg);
    throw msg;
}

function pf(loc) {
    throw ("Pattern match failure (" + loc + ")");
}

var lameDuck = false;

function runHandlers(kind, ls, arg) {
    if (!lameDuck) {
        if (ls == null)
            alert(kind + ": " + arg);
        for (; ls; ls = ls.next)
            try {
                exec({c:"a", f:{c:"a", f:ls.data, x:{c:"c", v:arg}}, x:{c:"c", v:null}});
            } catch (v) { }
    }
}

var errorHandlers = null;

function flift0(v) {
    return {c:"c", v:v};
}

function onError(f) {
    errorHandlers = cons(flift0(f), errorHandlers);
}

function er(s) {
    runHandlers("Error", errorHandlers, s);
    throw {uw_error: s};
}

var failHandlers = null;

function onFail(f) {
    failHandlers = cons(flift0(f), failHandlers);
}

function doExn(v) {
    if (v == null || v.uw_error == null) {
        var s = (v == null ? "null" : v.message ? v.message : v.toString());
        if (v != null && v.fileName && v.lineNumber)
            s += " (" + v.fileName + ":" + v.lineNumber + ")";
        runHandlers("Fail", failHandlers, s);
    }
}

var disconnectHandlers = null;

function flift(f) {
    return {c: "c", v:{env:cons(f,null), body:{c:"v", n:1}}};
}

function onDisconnect(f) {
    disconnectHandlers = cons(flift(f), disconnectHandlers);
}

function discon() {
    runHandlers("Disconnect", disconnectHandlers, null);
}

var connectHandlers = null;

function onConnectFail(f) {
    connectHandlers = cons(flift(f), connectHandlers);
}

function conn(msg) {
    var rx = /(.*)<body>((.|\n|\r)*)<\/body>(.*)/g;
    var arr = rx.exec(msg);
    msg = (arr && arr.length >= 3) ? arr[2] : msg;
    runHandlers("RPC failure", connectHandlers, msg);
}

var serverHandlers = null;

function onServerError(f) {
    serverHandlers = cons(flift0(f), serverHandlers);
}

function servErr(s) {
    window.setTimeout(function () { runHandlers("Server", serverHandlers, s); }, 0);
}

// Key and mouse events

var uw_event = null;

function uw_getEvent() {
    return window.event ? window.event : uw_event;
}

function firstGood(x, y) {
    if (x == undefined || x == 0)
        return y;
    else
        return x;
}

function uw_mouseEvent() {
    var ev = uw_getEvent();

    return {_ScreenX : firstGood(ev.screenX, 0),
            _ScreenY : firstGood(ev.screenY, 0),
            _ClientX : firstGood(ev.clientX, 0),
            _ClientY : firstGood(ev.clientY, 0),
            _OffsetX : firstGood(ev.offsetX, 0),
            _OffsetY : firstGood(ev.offsetY, 0),
            _CtrlKey : firstGood(ev.ctrlKey, false),
            _ShiftKey : firstGood(ev.shiftKey, false),
            _AltKey : firstGood(ev.altKey, false),
            _MetaKey : firstGood(ev.metaKey, false),
            _Button : ev.button == 2 ? "Right" : ev.button == 1 ? "Middle" : "Left"};
}

function uw_keyEvent() {
    var ev = uw_getEvent();

    return {_KeyCode : firstGood(ev.keyCode, ev.which),
            _CtrlKey : firstGood(ev.ctrlKey, false),
            _ShiftKey : firstGood(ev.shiftKey, false),
            _AltKey : firstGood(ev.altKey, false),
            _MetaKey : firstGood(ev.metaKey, false)};
}



// Document events

function uw_handler(name, f) {
    var old = document[name];
    if (old == undefined)
        document[name] = function(event) { uw_event = event; execF(execF(f, uw_mouseEvent())); };
    else
        document[name] = function(event) { uw_event = event; old(); execF(execF(f, uw_mouseEvent())); };
}

function uw_onClick(f) {
    uw_handler("onclick", f);
}

function uw_onContextmenu(f) {
    uw_handler("oncontextmenu", f);
}

function uw_onDblclick(f) {
    uw_handler("ondblclick", f);
}

function uw_onMousedown(f) {
    uw_handler("onmousedown", f);
}

function uw_onMouseenter(f) {
    uw_handler("onmouseenter", f);
}

function uw_onMouseleave(f) {
    uw_handler("onmouseleave", f);
}

function uw_onMousemove(f) {
    uw_handler("onmousemove", f);
}

function uw_onMouseout(f) {
    uw_handler("onmouseout", f);
}

function uw_onMouseover(f) {
    uw_handler("onmouseover", f);
}

function uw_onMouseup(f) {
    uw_handler("onmouseup", f);
}

function uw_keyHandler(name, f) {
    var old = document[name];
    if (old == undefined)
        document[name] = function(event) { uw_event = event; execF(execF(f, uw_keyEvent())); };
    else
        document[name] = function(event) { uw_event = event; old(); execF(execF(f, uw_keyEvent())); };
}

function uw_onKeydown(f) {
    uw_keyHandler("onkeydown", f);
}

function uw_onKeypress(f) {
    uw_keyHandler("onkeypress", f);
}

function uw_onKeyup(f) {
    uw_keyHandler("onkeyup", f);
}

// Cancelling of further event processing

function uw_preventDefault() {
    var e = window.event ? window.event : uw_event;
    e.returnValue = false;
    if (e.preventDefault) e.preventDefault();
}

function uw_stopPropagation() {
    var e = window.event ? window.event : uw_event;
    e.cancelBubble = true;
    if (e.stopPropagation) e.stopPropagation();
}

// Embedding closures in XML strings

function cs(f) {
    return {closure: f};
}

function isWeird(v) {
    return v.closure != null || v.cat1 != null;
}

function cat(s1, s2) {
    if (isWeird(s1) || isWeird(s2))
        return {cat1: s1, cat2: s2};
    else
        return s1 + s2;
}

var closures = [];
var freeClosures = null;

function newClosure(f) {
    var n;
    if (freeClosures == null) {
        n = closures.length;
    } else {
        n = freeClosures.data;
        freeClosures = freeClosures.next;
    }
    closures[n] = f;
    return n;
}

function freeClosure(n) {
    closures[n] = null;
    freeClosures = cons(n, freeClosures);
}

function cr(n) {
    return closures[n];
}

function flattenAcc(a, cls, trs) {
    while (trs) {
        var tr = trs.data;
        trs = trs.next;

        if (tr.cat1 != null) {
            trs = cons(tr.cat1, cons(tr.cat2, trs));
        } else if (tr.closure != null) {
            var cl = newClosure(tr.closure);
            cls.v = cons(cl, cls.v);
            a.push("cr(", cl.toString(), ")");
        } else
            a.push(tr);
    }
}

function flatten(cls, tr) {
    var a = [];
    flattenAcc(a, cls, cons(tr, null));
    return a.join("");
}

function flattenLocal(s) {
    var cls = {v : null};
    var r = flatten(cls, s);
    for (cl = cls.v; cl != null; cl = cl.next)
        freeClosure(cl.data);
    return r;
}


// Dynamic tree management

function populate(node) {
    if (node.dead) return;

    var s = node.signal;
    var oldSources = node.sources;
    try {
        var sr = execF(s, null);
        var newSources = sr._sources;

        for (var sp = oldSources; sp; sp = sp.next)
            if (!member(sp.data, newSources))
                sp.data.dyns = remove(node, sp.data.dyns);

        for (var sp = newSources; sp; sp = sp.next)
            if (!member(sp.data, oldSources))
                sp.data.dyns = cons(node, sp.data.dyns);

        node.sources = newSources;
        node.recreate(sr._data);
    } catch (v) {
        doExn(v);
    }
}

function sc(v) {
    return {data : v, dyns : null};
}
function sv(s, v) {
    if (s.data != v) {
        s.data = v;

        for (var ls = s.dyns; ls; ls = ls.next)
            populate(ls.data);
    }
}
function sg(s) {
    return s.data;
}

function ss(s) {
    return {env:cons(s, null), body:{c:"r", l:
            cons({n:"sources", v:{c:"c", v:cons(s, null)}},
                 cons({n:"data", v:{c:"f", f:sg, a:cons({c:"v", n:1}, null)}}, null))}};
}
function sr(v) {
    return {env:null, body:{c:"c", v:{_sources : null, _data : v}}};
}
function sb(x,y) {
    return {env:cons(y,cons(x,null)),
            body:{c:"=",
                e1:{c:"a", f:{c:"v", n:2}, x:{c:"c", v:null}},
                e2:{c:"=",
                    e1:{c:"a",
                        f:{c:"a", f:{c:"v", n:2}, x:{c:".", r:{c:"v", n:0}, f:"data"}},
                        x:{c:"c", v:null}},
                    e2:{c:"r", l:cons(
                                      {n:"sources", v:{c:"f", f:union, a:cons({c:".", r:{c:"v", n:1}, f:"sources"},
                                                                              cons({c:".", r:{c:"v", n:0}, f:"sources"}, null))}},
                                      cons({n:"data", v:{c:".", r:{c:"v", n:0}, f:"data"}}, null))}}}};
}
function scur(s) {
    return execF(s, null)._data;
}

function lastParent() {
    var pos = document.body;

    while (pos.lastChild && pos.lastChild.nodeType == 1)
        pos = pos.lastChild;

    pos = pos.parentNode;

    return pos;
}

var thisScript = null;

function addNode(node) {
    if (thisScript) {
        if (thisScript.parentNode)
            thisScript.parentNode.replaceChild(node, thisScript);
    } else
        lastParent().appendChild(node);
}

function runScripts(node) {
    if (node.tagName == "SCRIPT") {
        var savedScript = thisScript;
        thisScript = node;

        try {
            eval(thisScript.text);
        } catch (v) {
            doExn(v);
        }
        if (thisScript.parentNode)
            thisScript.parentNode.removeChild(thisScript);

        thisScript = savedScript;
    } else if (node.getElementsByTagName) {
        var savedScript = thisScript;

        var scripts = node.getElementsByTagName("script"), scriptsCopy = [];
        var len = scripts.length;
        for (var i = 0; i < len; ++i)
            scriptsCopy[i] = scripts[i];
        for (var i = 0; i < len; ++i) {
            thisScript = scriptsCopy[i];

            try {
                eval(thisScript.text);
            } catch (v) {
                doExn(v);
            }
            if (thisScript.parentNode)
                thisScript.parentNode.removeChild(thisScript);
        }

        thisScript = savedScript;
    }
}


// Dynamic tree entry points

function killScript(scr) {
    scr.dead = true;
    for (var ls = scr.sources; ls; ls = ls.next)
        ls.data.dyns = remove(scr, ls.data.dyns);
    for (var ls = scr.closures; ls; ls = ls.next)
        freeClosure(ls.data);
}

// Sometimes we wind up with tables that contain <script>s outside the single <tbody>.
// To avoid dealing with that case, we normalize by moving <script>s into <tbody>.
function normalizeTable(table) {
    var orig = table;

    var script, next;

    while (table && table.tagName != "TABLE")
        table = table.parentNode;

    for (var tbody = table.firstChild; tbody; tbody = tbody.nextSibling) {
        if (tbody.tagName == "TBODY") {
            var firstChild = tbody.firstChild;

            for (script = table.firstChild; script && script != tbody; script = next) {
                next = script.nextSibling;

                if (script.tagName === "SCRIPT") {
                    if (firstChild)
                        tbody.insertBefore(script, firstChild);
                    else
                        tbody.appendChild(script);
                }
            }

            return;
        }
    }

    var tbody = document.createElement("tbody");
    for (script = table.firstChild; script; script = next) {
        next = script.nextSibling;

        tbody.appendChild(script);
    }
    table.appendChild(tbody);
}

var suspendScripts = false;

function dyn(pnode, s) {
    if (suspendScripts)
        return;

    var x = document.createElement("script");
    x.dead = false;
    x.signal = s;
    x.sources = null;
    x.closures = null;

    var firstChild = null;

    x.recreate = function(v) {
        for (var ls = x.closures; ls; ls = ls.next)
            freeClosure(ls.data);

        var next;
        for (var child = firstChild; child && child != x; child = next) {
            next = child.nextSibling;

            killScript(child);
            if (child.getElementsByTagName) {
                var arr = child.getElementsByTagName("script");
                for (var i = 0; i < arr.length; ++i)
                    killScript(arr[i]);
            }

            if (child.parentNode)
                child.parentNode.removeChild(child);
        }

        var cls = {v : null};
        var html = flatten(cls, v);
        if (pnode != "table" && pnode != "tr")
            html = dynPrefix + html;
        x.closures = cls.v;

        if (pnode == "table") {
            normalizeTable(x.parentNode);

            var dummy = document.createElement("body");
            suspendScripts = true;
            try {
                dummy.innerHTML = "<table>" + html + "</table>";
            } catch (e) {
                suspendScripts = false;
                throw e;
            }

            var table = x.parentNode;

            if (table) {
                firstChild = null;
                var tbody;

                var arr = dummy.getElementsByTagName("tbody");

                var tbody;
                if (arr.length > 0 && arr[0].parentNode == dummy.firstChild) {
                    tbody = arr[0];
                    var next;
                    for (var node = dummy.firstChild.firstChild; node; node = next) {
                        next = node.nextSibling;

                        if (node.tagName != "TBODY")
                            tbody.appendChild(node);
                    }
                } else
                    tbody = dummy.firstChild;

                var next;
                firstChild = document.createElement("script");
                table.insertBefore(firstChild, x);
                for (var node = tbody.firstChild; node; node = next) {
                    next = node.nextSibling;
                    table.insertBefore(node, x);
                    suspendScripts = false;
                    runScripts(node);
                    suspendScripts = true;
                }
            }

            suspendScripts = false;
        } else if (pnode == "tr") {
            var dummy = document.createElement("body");
            suspendScripts = true;
            try {
                dummy.innerHTML = "<table><tr>" + html + "</tr></table>";
            } catch (e) {
                suspendScripts = false;
                throw e;
            }

            var table = x.parentNode;

            if (table) {
                var arr = dummy.getElementsByTagName("tr");
                firstChild = null;
                var tr;
                if (arr.length > 0 && table != null)
                    tr = arr[0];
                else
                    tr = dummy.firstChild;

                var next;
                firstChild = document.createElement("script");
                table.insertBefore(firstChild, x);
                for (var node = tr.firstChild; node; node = next) {
                    next = node.nextSibling;
                    table.insertBefore(node, x);
                    suspendScripts = false;
                    runScripts(node);
                    suspendScripts = true;
                }
            };

            suspendScripts = false;
        } else {
            firstChild = document.createElement("span");

            suspendScripts = true;
            try {
                firstChild.innerHTML = html;
                if (x.parentNode)
                    x.parentNode.insertBefore(firstChild, x);
            } catch (e) {
                suspendScripts = false;
                throw e;
            }
            suspendScripts = false;
            runScripts(firstChild);
        }
    };

    addNode(x);
    populate(x);
}

function setInnerHTML(node, html) {
    var x;

    if (node.previousSibling && node.previousSibling.closures != undefined) {
        x = node.previousSibling;

        for (var ls = x.closures; ls; ls = ls.next)
            freeClosure(ls.data);

        if (node.getElementsByTagName) {
            var arr = node.getElementsByTagName("script");
            for (var i = 0; i < arr.length; ++i)
                killScript(arr[i]);
        }
    } else {
        x = document.createElement("script");
        x.dead = false;
        x.sources = null;

        if (node.parentNode)
            node.parentNode.insertBefore(x, node);
        else
            whine("setInnerHTML: node is not already in the DOM tree");
    }

    var cls = {v : null};
    var html = flatten(cls, html);
    x.closures = cls.v;
    suspendScripts = true;
    node.innerHTML = html;
    suspendScripts = false;
    runScripts(node);
}

var maySuspend = true;

function active(s) {
    if (suspendScripts)
        return;

    var ms = maySuspend;
    maySuspend = false;
    try {
        var html = execF(s);
    } catch (e) {
        maySuspend = ms;
        throw e;
    }
    maySuspend = ms;
    if (html != "") {
        var span = document.createElement("span");
        addNode(span);
        setInnerHTML(span, html);
    }
}

function input(x, s, recreate, type, name) {
    if (name) x.name = name;
    if (type) x.type = type;
    addNode(x);

    var sc = document.createElement("script");
    sc.dead = false;
    sc.signal = ss(s);
    sc.sources = null;
    sc.recreate = recreate(x);

    if (x.parentNode)
        x.parentNode.insertBefore(sc, x);

    populate(sc);

    return x;
}

function inpt(type, s, name) {
    if (suspendScripts)
        return;

    var x = input(document.createElement("input"), s,
                  function(x) { return function(v) { if (x.value != v) x.value = v; }; }, type, name);
    x.value = s.data;
    x.onkeyup = x.oninput = x.onchange = x.onpropertychange = function() { sv(s, x.value) };

    return x;
}
function inpt_float(type, s, name) {
    if (suspendScripts)
        return;

    var filterFloat = function(value) {
	if (/^(\-|\+)?([0-9]+(\.[0-9]+)?|Infinity)$/
	    .test(value))
	    return Number(value);
	return null;
    }
    var x = input(document.createElement("input"), s, function(x) { return function(v) { if (x.value != v) x.value = v; }; }, type, name);
    x.value = s.data;
    x.onkeyup = x.oninput = x.onchange = x.onpropertychange = function() { sv(s, filterFloat(x.value)) };

    return x;
}


function inp(s, name) {
    return inpt("text", s, name);
}

function password(s, name) {
    return inpt("password", s, name);
}

function email(s, name) {
    return inpt("email", s, name);
}

function search(s, name) {
    return inpt("search", s, name);
}

function url(s, name) {
    return inpt("url", s, name);
}

function tel(s, name) {
    return inpt("tel", s, name);
}

function color(s, name) {
    return inpt("color", s, name);
}

function number(s, name) {
    return inpt_float("number", s, name);
}

function range(s, name) {
    return inpt_float("range", s, name);
}

function date(s, name) {
    return inpt("date", s, name);
}

function datetime(s, name) {
    return inpt("datetime", s, name);
}

function datetime_local(s, name) {
    return inpt("datetime-local", s, name);
}

function month(s, name) {
    return inpt("month", s, name);
}

function week(s, name) {
    return inpt("week", s, name);
}

function time(s, name) {
    return inpt("time", s, name);
}

function crad(s) {
    if (suspendScripts)
        return;

    var x = input(document.createElement("input"), s,
                  function(x) { return function(v) { x.checked = (x.value === v); }; }, "radio");
    x.onclick = x.onkeyup = x.oninput = x.onchange = x.onpropertychange = function() { sv(s, x.value) };
    setTimeout(function() {
	x.defaultChecked = x.checked = (s.data === x.value);
    }, 10);

    return x;
}

function selectValue(x) {
    if (x.options.length == 0)
        return "";
    else
        return x.options[x.selectedIndex].value;
}

function setSelectValue(x, v) {
  for (var i = 0; i < x.options.length; ++i) {
      if (x.options[i].value == v) {
          x.selectedIndex = i;
          return;
      }
  }

  if (v != "")
      er("Setting <select> to nonexistent value: " + v);
}

function sel(s, content) {
    if (suspendScripts)
        return;

    var dummy = document.createElement("span");
    dummy.innerHTML = "<select>" + content + "</select>";

    var x = dummy.firstChild;
    for (var i = 0; i < x.options.length; ++i) {
        if (x.options[i].value == "")
            x.options[i].value = x.options[i].text;
        else
            x.options[i].value = x.options[i].value.substring(1);
    }

    x = input(x, s, function(x) { return function(v) { if (selectValue(x) != v) setSelectValue(x, v); }; });

    setSelectValue(x, s.data);
    if (selectValue(x) != s.data)
        sv(s, selectValue(x));
    x.onchange = function() { sv(s, selectValue(x)) };

    return x;
}

function chk(s) {
    if (suspendScripts)
        return;

    var x = input(document.createElement("input"), s,
                  function(x) { return function(v) { if (x.checked != v) x.checked = v; }; }, "checkbox");
    x.defaultChecked = x.checked = s.data;
    x.onclick = x.onkeyup = x.oninput = x.onchange = x.onpropertychange = function() { sv(s, x.checked) };

    return x;
}

function tbx(s) {
    if (suspendScripts)
        return;

    var x = input(document.createElement("textarea"), s,
                  function(x) { return function(v) { if (x.value != v) x.value = v; }; });
    x.innerHTML = s.data;
    x.onkeyup = x.oninput = x.onchange = x.onpropertychange = function() { sv(s, x.value) };

    return x;
}

function dynClass(pnode, html, s_class, s_style) {
    if (suspendScripts)
        return;

    var htmlCls = {v : null};
    html = flatten(htmlCls, html);
    htmlCls = htmlCls.v;

    var dummy = document.createElement(pnode);
    suspendScripts = true;
    dummy.innerHTML = html;
    suspendScripts = false;
    var html = dummy.firstChild;
    dummy.removeChild(html);
    if (pnode == "table" && html.tagName == "TBODY") {
        html = html.firstChild;
    }

    var x = null;
    var y = null;

    var classNameBefore = html.className;
    var styleCssBefore = html.style.cssText;

    if (s_class) {
        x = document.createElement("script");
        x.dead = false;
        x.signal = s_class;
        x.sources = null;
        x.closures = htmlCls;

        x.recreate = function(v) {
            for (var ls = x.closures; ls != htmlCls; ls = ls.next)
                freeClosure(ls.data);

            var cls = {v : null};
            var s = flatten(cls, v);
            if (classNameBefore)
                s += " " + classNameBefore;
            html.className = s;
	    x.closures = concat(cls.v, htmlCls);
        }

        populate(x);
    }

    if (s_style) {
        var htmlCls2 = s_class ? null : htmlCls;
        y = document.createElement("script");
        y.dead = false;
        y.signal = s_style;
        y.sources = null;
        y.closures = htmlCls2;

        y.recreate = function(v) {
            for (var ls = y.closures; ls != htmlCls2; ls = ls.next)
                freeClosure(ls.data);

            var cls = {v : null};
            var s = flatten(cls, v);
            if (styleCssBefore)
                s += " " + styleCssBefore;
            html.style.cssText = s;
	    y.closures = concat(cls.v, htmlCls2);
        }

        populate(y);
    }

    addNode(html);
    runScripts(html);

    if (x)
        html.appendChild(x);
    if (y)
        html.appendChild(y);
}

function bodyDynClass(s_class, s_style) {
    if (suspendScripts)
        return;

    var htmlCls = null;

    if (s_class) {
        var x = document.createElement("script");
        x.dead = false;
        x.signal = s_class;
        x.sources = null;
        x.closures = htmlCls;

        x.recreate = function(v) {
            for (var ls = x.closures; ls != htmlCls; ls = ls.next)
                freeClosure(ls.data);

            var cls = {v : null};
            document.body.className = flatten(cls, v);
            console.log("className to + " + document.body.className);
	    x.closures = concat(cls.v, htmlCls);
        }

        document.body.appendChild(x);
        populate(x);
    }

    if (s_style) {
        var htmlCls2 = s_class ? null : htmlCls;
        var y = document.createElement("script");
        y.dead = false;
        y.signal = s_style;
        y.sources = null;
        y.closures = htmlCls2;

        y.recreate = function(v) {
            for (var ls = y.closures; ls != htmlCls2; ls = ls.next)
                freeClosure(ls.data);

            var cls = {v : null};
            document.body.style.cssText = flatten(cls, v);
            console.log("style to + " + document.body.style.cssText);
	    y.closures = concat(cls.v, htmlCls2);
        }

        document.body.appendChild(y);
        populate(y);
    }
}

function addOnChange(x, f) {
    var old = x.onchange;
    if (old == null)
        x.onchange = f;
    else
        x.onchange = function() { old(); f(); };
}

function addOnInput(x, f) {
    var old = x.oninput;
    if (old == null)
        x.oninput = f;
    else
        x.oninput = function() { old(); f(); };
}

function addOnKeyUp(x, f) {
    var old = x.onkeyup;
    if (old == null)
        x.onkeyup = f;
    else
        x.onkeyup = function(x) { old(x); f(x); };
}


// Basic string operations

function eh(x) {
    if (x == null)
        return "NULL";
    else
        return flattenLocal(x).split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
}

function ts(x) { return x.toString() }
function bs(b) { return (b ? "True" : "False") }
function s2b(s) { return s == "True" ? true : s == "False" ? false : null; }
function s2be(s) { return s == "True" ? true : s == "False" ? false : er("Illegal Boolean " ^ s); }

function id(x) { return x; }
function sub(s, i) { return Array.from(s)[i]; }
function suf(s, i) { return Array.from(s).slice(i).join(""); }
function slen(s) { return Array.from(s).length; }
function sidx(s, ch) {
    var r = Array.from(s).indexOf(ch);
    if (r == -1)
        return null;
    else
        return r;
}
function ssidx(h, n) {
    if (n == "") return 0;
    var ah = Array.from(h);
    var an = Array.from(n);
    var i = 0, y = 0;
    var top = ah.length - an.length + 1;
    if (top < 0) top = 0;
    var found = true;
    
    for(i = 0; i < top; ++i) {
	found = true;
	
	for (y = 0; y < an.length; ++y) {
	    if (ah[i + y] != an[y]) {
		found = false;
		break;
	    }		
	}

	if (found)
	    return i;
    }
    return null;
}

function sspn(s, chs) {
    var s2 = Array.from(s);
    var chs2 = Array.from(chs);
    
    for (var i = 0; i < s2.length; ++i)
        if (chs2.indexOf(s2[i]) != -1)
            return i;

    return s2.length;
}
function schr(s, ch) {
    var r = s.indexOf(ch);
    if (r == -1)
        return null;
    else
        return s.substring(r);
}
function ssub(s, start, len) {
    return Array.from(s).slice(start, start+len).join("");
}
function strlenGe(s, len) {
    return slen(s) >= len;
}

function trimZeroes(s) {
    for (var i = 0; i < s.length; ++i)
        if (s.charAt(i) != '0') {
            if (i > 0)
                return s.substring(i);
            else
                return s;
        }

    if (s.length == 0)
        return s;
    else
        return "0";
}

function pi(s) {
    var st = trimZeroes(s);
    var r = parseInt(st);
    if (r.toString() == st)
        return r;
    else
        er("Can't parse int: " + s);
}

function pfl(s) {
    var r = parseFloat(s);
    if (r.toString() == s)
        return r;
    else
        er("Can't parse float: " + s);
}

function pio(s) {
    var st = trimZeroes(s);
    var r = parseInt(st);
    if (r.toString() == st)
        return r;
    else
        return null;
}

function pflo(s) {
    var r = parseFloat(s);
    if (r.toString() == s)
        return r;
    else
        return null;
}

function parseSource(s1, s2) {
    return eval("s" + s1 + "_" + s2);
}

function uf(s) {
    if (s.length == 0)
        return "_";
    s = s.replace(/\./g, ".2E");
    return (s.charAt(0) == '_' ? "_" : "") + encodeURIComponent(s).replace(/%/g, ".");
}

function uu(s) {
    if (s.length > 0 && s.charAt(0) == '_') {
        s = s.substring(1);
    } else if (s.length >= 3 && (s.charAt(0) == '%' || s.charAt(0) == '.')
               && s.charAt(1) == '5' && (s.charAt(2) == 'f' || s.charAt(2) == 'F'))
        s = s.substring(3);
    s = s.replace(/\+/g, " ");
    s = s.replace(/\./g, "%");
    return decodeURIComponent(s);
}

function atr(s) {
    return s.replace(/\"/g, "&quot;").replace(/&/g, "&amp;")
}

function ub(b) {
    return b ? "1" : "0";
}

function uul(getToken, getData) {
    var tok = getToken();
    if (tok == "Nil") {
        return null;
    } else if (tok == "Cons") {
        var d = getData();
        var l = uul(getToken, getData);
        return {_1:d, _2:l};
    } else
        whine("Can't unmarshal list (" + tok + ")");
}

function strcmp(str1, str2) {
    return ((str1 == str2) ? 0 : ((str1 > str2) ? 1 : -1));
}

function chr(n) {
    return String.fromCodePoint(n);
}

function htmlifySpecialChar(ch) {
    return "&#" + ch.codePointAt(0) + ";";
}


// Remote calls

var client_id = null;
var client_pass = 0;
var url_prefix = "/";
var timeout = 60;
var isPost = false;

function getXHR(uri)
{
    try {
        return new XMLHttpRequest();
    } catch (e) {
        try {
            return new ActiveXObject("Msxml2.XMLHTTP");
        } catch (e) {
            try {
                return new ActiveXObject("Microsoft.XMLHTTP");
            } catch (e) {
                whine("Your browser doesn't seem to support AJAX.");
            }
        }
    }
}

var sig = null;

var unloading = false, inFlight = null;

function unload() {
    for (; inFlight; inFlight = inFlight.next) {
        inFlight.data.abort();
    }
}

function requestUri(xhr, uri, needsSig, isRpc) {
    var extraData = null;

    if (isRpc && uri.length > 2000) {
        extraData = uri.substring(2000);
        uri = uri.substring(0, 2000);
    }

    xhr.open("POST", uri, !unloading);
    xhr.setRequestHeader("Content-type", "text/plain");

    if (client_id != null) {
        xhr.setRequestHeader("UrWeb-Client", client_id.toString());
        xhr.setRequestHeader("UrWeb-Pass", client_pass.toString());
    }

    if (needsSig) {
        if (sig == null)
            whine("Missing cookie signature!");

        xhr.setRequestHeader("UrWeb-Sig", sig);
    }

    inFlight = cons(xhr, inFlight);
    xhr.send(extraData);
}

function xhrFinished(xhr) {
    xhr.abort();
    inFlight = remove(xhr, inFlight);
}

function unurlify(parse, s) {
    return parse(s);
}

function redirect(s) {
    window.location = s;
}

function makeSome(isN, v) {
    if (isN)
        return {v: v};
    else
        return v;
}

function rc(prefix, uri, parse, k, needsSig, isN) {
    if (!maySuspend)
        er("May not 'rpc' in main thread of 'code' for <active>");

    uri = cat(prefix, uri);
    uri = flattenLocal(uri);
    var xhr = getXHR();

    xhr.onreadystatechange = function() {
        if (xhr.readyState == 4) {
            var isok = false;

            try {
                if (xhr.status == 200)
                    isok = true;
            } catch (e) { }

            if (isok) {
                var lines = xhr.responseText.split("\n");
                if (lines.length != 2) {
                    if (isN == null)
                        whine("Bad RPC response lines");
                    else
                        k(null);
                } else {
                    eval(lines[0]);

                    try {
                        var v = parse(lines[1]);
                        try {
                            k(makeSome(isN, v));
                        } catch (v) {
                            doExn(v);
                        }
                    } catch (v) {
                        k(null);
                    }
                }
            } else {
                if (isN == null)
                    conn(xhr.responseText);
                else
                    k(null);
            }

            xhrFinished(xhr);
        }
    };

    requestUri(xhr, uri, needsSig, true);
}

function path_join(s1, s2) {
    if (s1.length > 0 && s1.charAt(s1.length-1) == '/')
        return s1 + s2;
    else
        return s1 + "/" + s2;
}

var channels = [];

function newQueue() {
    return { front : null, back : null };
}
function enqueue(q, v) {
    if (q.front == null) {
        q.front = cons(v, null);
        q.back = q.front;
    } else {
        var node = cons(v, null);
        q.back.next = node;
        q.back = node;
    }
}
function dequeue(q) {
    if (q.front == null)
        return null;
    else {
        var r = q.front.data;
        q.front = q.front.next;
        if (q.front == null)
            q.back = null;
        return r;
    }
}

function newChannel() {
    return { msgs : newQueue(), listeners : newQueue() };
}

function listener() {
    var uri = path_join(url_prefix, ".msgs");
    var xhr = getXHR();
    var tid, orsc, onTimeout, lastTick;

    var connect = function () {
        xhr.onreadystatechange = orsc;
        lastTick = new Date().getTime();
        tid = window.setTimeout(onTimeout, timeout * 500);
        requestUri(xhr, uri, false, false);
    }

    orsc = function() {
        if (xhr.readyState == 4) {
            window.clearTimeout(tid);

            var isok = false;

            try {
                if (xhr.status == 200)
                    isok = true;
            } catch (e) { }

            if (isok) {
                var text = xhr.responseText;
                if (text == "")
                    return;
                var lines = text.split("\n");

                if (lines.length == 1 && lines[0] == "R") {
                    lameDuck = true;

                    if (isPost)
                        history.back();
                    else
                        location.reload();

                    return;
                }

                if (lines.length < 2) {
                    discon();
                    return;
                }

                var messageReader = function(i) {
                    if (i+1 >= lines.length) {
                        xhrFinished(xhr);
                        connect();
                    }
                    else {
                        var chn = lines[i];
                        var msg = lines[i+1];

                        if (chn == "E") {
                            eval(msg);
                            window.setTimeout(function() { messageReader(i+2); }, 0);
                        } else {
                            if (chn < 0)
                                whine("Out-of-bounds channel in message from remote server");

                            var ch;

                            if (chn >= channels.length || channels[chn] == null) {
                                ch = newChannel();
                                channels[chn] = ch;
                            } else
                                ch = channels[chn];

                            var listener = dequeue(ch.listeners);
                            if (listener == null) {
                                enqueue(ch.msgs, msg);
                            } else {
                                try {
                                    listener(msg);
                                } catch (v) {
                                    doExn(v);
                                }
                            }

                            messageReader(i+2);
                        }
                    }
                }

                messageReader(0);
            }
            else {
                try {
                    if (xhr.status != 0)
                        servErr("Error querying remote server for messages: " + xhr.status);
                } catch (e) { }
            }
        }
    };

    onTimeout = function() {
        var thisTick = new Date().getTime();
        xhrFinished(xhr);

        if (thisTick - lastTick > timeout * 1000) {
            if (confirm("The session for this page has expired.  Please choose \"OK\" to reload.")) {
                if (isPost)
                    history.back();
                else
                    location.reload();
            }
        } else {
            connect();
        }
    };

    connect();
}

function rv(chn, parse, k) {
    if (!maySuspend)
        er("May not 'recv' in main thread of 'code' for <active>");

    if (chn == null)
        er("Client-side code tried to recv() from a channel belonging to a different page view.");

    if (chn < 0)
        whine("Out-of-bounds channel receive");

    var ch;

    if (chn >= channels.length || channels[chn] == null) {
        ch = newChannel();
        channels[chn] = ch;
    } else
        ch = channels[chn];

    var msg = dequeue(ch.msgs);
    if (msg == null) {
        enqueue(ch.listeners, function(msg) { k(parse(msg)); });
    } else {
        try {
            k(parse(msg));
        } catch (v) {
            doExn(v);
        }
    }
}

function sl(ms, k) {
    if (!maySuspend)
        er("May not 'sleep' in main thread of 'code' for <active>");

    window.setTimeout(function() { k(null); }, ms);
}

function sp(e) {
    window.setTimeout(function() { execF(e); }, 0);
}


// The Ur interpreter

var urfuncs = [];

function lookup(env, n) {
    while (env != null) {
        if (n == 0)
            return env.data;
        else {
            --n;
            env = env.next;
        }
    }

    whine("Out-of-bounds Ur variable reference");
}

function execP(env, p, v) {
    switch (p.c) {
    case "v":
        return cons(v, env);
    case "c":
        if (v == p.v)
            return env;
        else
            return false;
    case "s":
        if (v == null)
            return false;
        else
            return execP(env, p.p, p.n ? v.v : v);
    case "1":
        if (v.n != p.n)
            return false;
        else
            return execP(env, p.p, v.v);
    case "r":
        for (var fs = p.l; fs != null; fs = fs.next) {
            env = execP(env, fs.data.p, v["_" + fs.data.n]);
            if (env == false)
                return false;
        }
        return env;
    default:
        whine("Unknown Ur pattern kind " + p.c);
    }
}

function exec0(env, e) {
    return exec1(env, null, e);
}

function exec1(env, stack, e) {
    var stack, usedK = false;

    var saveEnv = function() {
        if (stack.next != null && stack.next.data.c != "<")
            stack = cons({c: "<", env: env}, stack.next);
        else
            stack = stack.next;
    };

    while (true) {
        switch (e.c) {
        case "c":
            var v = e.v;
            if (stack == null)
                return v;
            var fr = stack.data;

            switch (fr.c) {
            case "s":
                e = {c: "c", v: {v: v}};
                stack = stack.next;
                break;
            case "1":
                e = {c: "c", v: {n: fr.n, v: v}};
                stack = stack.next;
                break;
            case "f":
                fr.args[fr.pos++] = v;
                if (fr.a == null) {
                    var res;
                    stack = stack.next;

                    if (fr.f.apply)
                        res = fr.f.apply(null, fr.args);
                    else if (fr.args.length == 0)
                        res = fr.f();
                    else if (fr.args.length == 1)
                        res = fr.f(fr.args[0]);
                    else if (fr.args.length == 2)
                        res = fr.f(fr.args[0], fr.args[1]);
                    else if (fr.args.length == 3)
                        res = fr.f(fr.args[0], fr.args[1], fr.args[2]);
                    else if (fr.args.length == 4)
                        res = fr.f(fr.args[0], fr.args[1], fr.args[2], fr.args[3]);
                    else if (fr.args.length == 5)
                        res = fr.f(fr.args[0], fr.args[1], fr.args[2], fr.args[3], fr.args[4]);
                    else
                        whine("Native function has " + fr.args.length + " args, but there is no special case for that count.");

                    e = {c: "c", v: res};
                    if (usedK) return null;
                } else {
                    e = fr.a.data;
                    fr.a = fr.a.next;
                }
                break;
            case "a1":
                e = fr.x;
                stack = cons({c: "a2", f: v}, stack.next);
                break;
            case "a2":
                if (fr.f == null)
                    whine("Ur: applying null function");
                else if (fr.f.body) {
                    saveEnv();
                    env = cons(v, fr.f.env);
                    e = fr.f.body;
                } else {
                    e = {c: "c", v: fr.f(v)};
                    stack = stack.next;
                }
                break;
            case "<":
                env = fr.env;
                stack = stack.next;
                break;
            case "r":
                fr.fs["_" + fr.n] = v;
                if (fr.l == null) {
                    e = {c: "c", v: fr.fs};
                    stack = stack.next;
                } else {
                    fr.n = fr.l.data.n;
                    e = fr.l.data.v;
                    fr.l = fr.l.next;
                }
                break;
            case ".":
                e = {c: "c", v: v["_" + fr.f]};
                stack = stack.next;
                break;
            case ";":
                e = fr.e2;
                stack = stack.next;
                break;
            case "=":
                saveEnv();
                env = cons(v, env);
                e = fr.e2;
                break;
            case "m":
                var ps;
                for (ps = fr.p; ps != null; ps = ps.next) {
                    var r = execP(env, ps.data.p, v);
                    if (r != false) {
                        saveEnv();
                        env = r;
                        e = ps.data.b;
                        break;
                    }
                }
                if (ps == null)
                    whine("Match failure in Ur interpretation");
                break;
            default:
                whine("Unknown Ur continuation kind " + fr.c);
            }

            break;
        case "v":
            e = {c: "c", v: lookup(env, e.n)};
            break;
        case "n":
            var idx = e.n;
            e = urfuncs[idx];
            if (e.c == "t")
                e = urfuncs[idx] = eval("(" + e.f + ")");
            break;
        case "s":
            stack = cons({c: "s"}, stack);
            e = e.v;
            break;
        case "1":
            stack = cons({c: "1", n: e.n}, stack);
            e = e.v;
            break;
        case "f":
            if (e.a == null)
                e = {c: "c", v: e.f()};
            else {
                var args = [];
                stack = cons({c: "f", f: e.f, args: args, pos: 0, a: e.a.next}, stack);
                if (!e.a.data.c) alert("[2] fr.f = " + e.f + "; 0 = " + e.a.data);
                e = e.a.data;
            }
            break;
        case "l":
            e = {c: "c", v: {env: env, body: e.b}};
            break;
        case "a":
            stack = cons({c: "a1", x: e.x}, stack);
            e = e.f;
            break;
        case "r":
            if (e.l == null)
                whine("Empty Ur record in interpretation");
            var fs = {};
            stack = cons({c: "r", n: e.l.data.n, fs: fs, l: e.l.next}, stack);
            e = e.l.data.v;
            break;
        case ".":
            stack = cons({c: ".", f: e.f}, stack);
            e = e.r;
            break;
        case ";":
            stack = cons({c: ";", e2: e.e2}, stack);
            e = e.e1;
            break;
        case "=":
            stack = cons({c: "=", e2: e.e2}, stack);
            e = e.e1;
            break;
        case "m":
            stack = cons({c: "m", p: e.p}, stack);
            e = e.e;
            break;
        case "e":
            e = {c: "c", v: cs({c: "wc", env: env, body: e.e})};
            break;
        case "wc":
            env = e.env;
            e = e.body;
            break;
        case "K":
            { var savedStack = stack.next, savedEnv = env;
                e = {c: "c", v: function(v) { return exec1(savedEnv, savedStack, {c: "c", v: v}); } };}
            usedK = true;
            break;
        default:
            whine("Unknown Ur expression kind " + e.c);
        }
    }
}

function execD(e) {
    return exec0(null, e);
}

function exec(e) {
    var r = exec0(null, e);

    if (r != null && r.body != null)
        return function(v) { return exec0(cons(v, r.env), r.body); };
    else
        return r;
}

function execF(f, x) {
    return exec0(cons(x, f.env), f.body);
}


// Wrappers

function confrm(s) {
    return confirm(s) ? true : false;
}


// URL blessing

var urlRules = null;

function checkUrl(s) {
    for (var r = urlRules; r; r = r.next) {
        var ru = r.data;
        if (ru.prefix ? s.indexOf(ru.pattern) == 0 : s == ru.pattern)
            return ru.allow ? s : null;
    }

    return null;
}

function bless(s) {
    u = checkUrl(s);
    if (u == null)
        er("Disallowed URL: " + s);
    return u;
}


// Attribute name blessing
var maxCh = chr(127);

function blessData(s) {
    var chars = Array.from(s);
    
    for (var i = 0; i < chars.length; ++i) {
        var c = chars[i];
        if (c > maxCh || (!isAlnum(c) && c != '-' && c != '_'))
            er("Disallowed character in data-* attribute name");
    }

    return s;
}


// CSS validation

function atom(s) {
    var chars = Array.from(s);
    
    for (var i = 0; i < chars.length; ++i) {
        var c = chars[i];
        if (c > maxCh || (!isAlnum(c) && c != '+' && c != '-' && c != '.' && c != '%' && c != '#'))
            er("Disallowed character in CSS atom");
    }

    return s;
}

function css_url(s) {
    var chars = Array.from(s);
    
    for (var i = 0; i < chars.length; ++i) {
        var c = chars[i];
        if (c > maxCh || (!isAlnum(c) && c != ':' && c != '/' && c != '.' && c != '_' && c != '+'
			  && c != '-' && c != '%' && c != '?' && c != '&' && c != '=' && c != '#'))
            er("Disallowed character in CSS URL");
    }

    return s;
}

function property(s) {
    var chars = Array.from(s);
    
    if (chars.length <= 0)
        er("Empty CSS property");

    if (chars[0] > maxCh || (!isLower(chars[0]) && chars[0] != '_'))
        er("Bad initial character in CSS property");

    for (var i = 0; i < chars.length; ++i) {
        var c = chars[i];
        if (c > maxCh || (!isLower(c) && !isDigit(c) && c != '_' && c != '-'))
            er("Disallowed character in CSS property");
    }

    return s;
}


// ID generation

var nextId = 0;

function fresh() {
    return "uw" + (--nextId);
}

function giveFocus(id) {
    var node = document.getElementById(id);

    if (node)
        node.focus();
    else
        er("Tried to give focus to ID not used in document: " + id);
}


// App-specific code
